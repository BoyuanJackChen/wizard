[["def remove_Occ(string, char):\r\n    if char in string:\r\n        first_index = string.find(char)\r\n        last_index = string.rfind(char)\r\n        if first_index == -1 or last_index == -1:\r\n            return string\r\n        elif first_index == last_index:\r\n            return string[:first_index] + string[first_index+1:]\r\n        else:\r\n            return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\r\n    else:\r\n        return string"], ["def sort_matrix(matrix):\r\n    # Calculate the sum of each row\r\n    row_sums = [sum(row) for row in matrix]\r\n    \r\n    # Sort the rows based on their sum\r\n    sorted_rows = sorted(matrix, key=lambda row: sum(row))\r\n    \r\n    # Sort the matrix based on the sorted rows\r\n    sorted_matrix = [sorted(row) for row in sorted_rows]\r\n    \r\n    return sorted_matrix"], ["def count_common(words):\r\n    word_count = {}\r\n    for word in words:\r\n        if word in word_count:\r\n            word_count[word] += 1\r\n        else:\r\n            word_count[word] = 1\r\n    \r\n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\r\n    \r\n    return sorted_word_count"], ["def find_Volume(base, height, thickness):\r\n    return (base * height * thickness) / 2"], ["def split_lowerstring(string):\r\n    result = []\r\n    temp = \"\"\r\n    for i in range(len(string)):\r\n        if string[i].islower():\r\n            result.append(temp)\r\n            temp = \"\"\r\n        else:\r\n            temp += string[i]\r\n    result.append(temp)\r\n    return result"], ["def text_lowercase_underscore(text):\r\n    if any(char.islower() for char in text) and \"_\" in text:\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'"], ["def square_perimeter(side):\r\n    return 4 * side"], ["def remove_dirty_chars(str1, str2):\r\n    for char in str2:\r\n        str1 = str1.replace(char, '')\r\n    return str1"], ["def test_duplicate(arr):\r\n    \"\"\"\r\n    This function takes an array of integers as input and returns True if any duplicate element is found in the array, else False.\r\n    \"\"\"\r\n    # Create an empty set to store unique elements\r\n    unique_set = set()\r\n    \r\n    # Iterate through the array and add each element to the set\r\n    for num in arr:\r\n        if num in unique_set:\r\n            return True\r\n        else:\r\n            unique_set.add(num)\r\n    \r\n    # If no duplicate element is found, return False\r\n    return False"], ["def is_woodall(num):\r\n    \"\"\"\r\n    This function checks if the given number is a woodball or not.\r\n    A woodball is a number whose sum of digits is equal to the product of its digits.\r\n    \"\"\"\r\n    digits = [int(d) for d in str(num)]\r\n    sum_of_digits = sum(digits)\r\n    product_of_digits = 1\r\n    for digit in digits:\r\n        product_of_digits *= digit\r\n    return sum_of_digits == product_of_digits"], ["def multiples_of_num(n, m):\r\n    \"\"\"\r\n    Returns a list of m number of multiples of n.\r\n    \"\"\"\r\n    return [i*n for i in range(1, m+1)]"], ["def find_first_duplicate(arr):\r\n    # Create a dictionary to store the frequency of each element in the array\r\n    freq_dict = {}\r\n    for num in arr:\r\n        if num in freq_dict:\r\n            freq_dict[num] += 1\r\n        else:\r\n            freq_dict[num] = 1\r\n    \r\n    # Iterate through the array and return the first duplicate element\r\n    for num in arr:\r\n        if freq_dict[num] > 1:\r\n            return num\r\n    \r\n    # If no duplicates are found, return -1\r\n    return -1"], ["def maximum_sum(lst):\r\n    max_sum = 0\r\n    for sub_lst in lst:\r\n        sub_lst_sum = sum(sub_lst)\r\n        if sub_lst_sum > max_sum:\r\n            max_sum = sub_lst_sum\r\n    return max_sum"], ["def binary_to_decimal(binary):\r\n    decimal = 0\r\n    base = 1\r\n    while binary > 0:\r\n        last_digit = binary % 10\r\n        decimal += last_digit * base\r\n        base *= 2\r\n        binary //= 10\r\n    return decimal"], ["def find_Product(arr):\r\n    # Create a set to store unique elements\r\n    unique_set = set()\r\n    \r\n    # Iterate through the array and add unique elements to the set\r\n    for num in arr:\r\n        if num not in unique_set:\r\n            unique_set.add(num)\r\n    \r\n    # Calculate the product of the unique elements\r\n    product = 1\r\n    for num in unique_set:\r\n        product *= num\r\n    \r\n    return product"], ["def check_k_elements(tuple_list, k):\r\n    \"\"\"\r\n    This function checks if the given tuple list has all k elements.\r\n    \"\"\"\r\n    count = 0\r\n    for tup in tuple_list:\r\n        count += len(tup)\r\n    return count == k"], ["def remove(lst):\r\n    return [word.translate(str.maketrans('', '', '0123456789')) for word in lst]"], ["def binomial_Coeff(n, k):\r\n    if k > n:\r\n        return 0\r\n    if k == 0 or k == n:\r\n        return 1\r\n    return binomial_Coeff(n-1, k-1) + binomial_Coeff(n-1, k)"], ["def get_Odd_Occurrence(arr):\r\n    count = {}\r\n    for i in arr:\r\n        if i in count:\r\n            count[i] += 1\r\n        else:\r\n            count[i] = 1\r\n    for i in count:\r\n        if count[i] % 2 != 0:\r\n            return i"], ["def count_Substring_With_Equal_Ends(s):\r\n    n = len(s)\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n+1):\r\n            if s[i] == s[j-1]:\r\n                count += 1\r\n    return count"], ["import heapq\r\n\r\ndef func(lists, k):\r\n    freq = {}\r\n    for lst in lists:\r\n        for num in lst:\r\n            if num in freq:\r\n                freq[num] += 1\r\n            else:\r\n                freq[num] = 1\r\n    \r\n    heap = [(-freq[num], num) for num in freq]\r\n    heapq.heapify(heap)\r\n    \r\n    result = []\r\n    for i in range(k):\r\n        result.append(heapq.heappop(heap)[1])\r\n    \r\n    return result"], ["def max_Prime_Factors(num):\r\n    \"\"\"\r\n    This function takes a number as input and returns the largest prime factor of that number.\r\n    \"\"\"\r\n    # Initialize the largest prime factor to 1\r\n    max_factor = 1\r\n    \r\n    # Check if the number is divisible by 2\r\n    while num % 2 == 0:\r\n        max_factor = 2\r\n        num //= 2\r\n    \r\n    # Check odd numbers up to the square root of the number\r\n    for i in range(3, int(num**0.5)+1, 2):\r\n        while num % i == 0:\r\n            max_factor = i\r\n            num //= i\r\n    \r\n    # If the number is greater than 2, it is a prime number\r\n    if num > 2:\r\n        max_factor = num\r\n    \r\n    return max_factor"], ["def decimal_To_Binary(num):\r\n    binary = \"\"\r\n    while num > 0:\r\n        binary = str(num % 2) + binary\r\n        num = num // 2\r\n    return binary"], ["def find_missing(arr):\r\n    n = len(arr)\r\n    if n == 0:\r\n        return None\r\n    elif n == 1:\r\n        return 2 if arr[0] == 1 else 1\r\n    else:\r\n        for i in range(1, n):\r\n            if arr[i] - arr[i-1] != 1:\r\n                return arr[i-1] + 1\r\n        return arr[n-1] + 1"], ["def find_rect_num(n):\r\n    return n * (n + 1) * (2 * n + 1) // 6"], ["def find_Nth_Digit(num1, num2, n):\r\n    # Calculate the proper fraction of num1 and num2\r\n    proper_fraction = num1 / num2\r\n    \r\n    # Convert the proper fraction to a string\r\n    proper_fraction_str = str(proper_fraction)\r\n    \r\n    # Find the nth digit in the proper fraction string\r\n    nth_digit = int(proper_fraction_str[n-1])\r\n    \r\n    return nth_digit"], ["def sort_mixed_list(lst):\r\n    # Separate the integers and strings into two separate lists\r\n    int_lst = []\r\n    str_lst = []\r\n    for item in lst:\r\n        if isinstance(item, int):\r\n            int_lst.append(item)\r\n        else:\r\n            str_lst.append(item)\r\n    \r\n    # Sort the integers and strings separately\r\n    int_lst.sort()\r\n    str_lst.sort()\r\n    \r\n    # Combine the sorted integers and strings into a single list\r\n    sorted_lst = []\r\n    for item in int_lst + str_lst:\r\n        sorted_lst.append(item)\r\n    \r\n    return sorted_lst"], ["def div_even_odd(lst):\r\n    even_count = 0\r\n    odd_count = 0\r\n    for num in lst:\r\n        if num % 2 == 0:\r\n            even_count += 1\r\n        else:\r\n            odd_count += 1\r\n    if even_count == 0:\r\n        return odd_count\r\n    elif odd_count == 0:\r\n        return even_count\r\n    else:\r\n        return even_count / odd_count"], ["def rearange_string(s):\r\n    # create a list of tuples, where each tuple contains the character and its index in the string\r\n    char_index = [(c, i) for i, c in enumerate(s)]\r\n    \r\n    # sort the list by character, then by index\r\n    char_index.sort()\r\n    \r\n    # create a new string by iterating over the sorted list and adding characters to it\r\n    new_s = ''\r\n    for c, i in char_index:\r\n        if len(new_s) == 0 or new_s[-1] != c:\r\n            new_s += c\r\n    \r\n    # check if the new string is valid\r\n    for i in range(len(new_s) - 1):\r\n        if new_s[i] == new_s[i+1]:\r\n            return None\r\n    \r\n    return new_s"], ["from collections import Counter\r\n\r\ndef freq_element(lst):\r\n    flat_lst = [item for sublist in lst for item in sublist]\r\n    return dict(Counter(flat_lst))\r\n\r\n# Test cases\r\nassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\r\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\r\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"], ["def filter_evennumbers(numbers):\r\n    return list(filter(lambda x: x % 2 == 0, numbers))\r\n\r\n# Test cases\r\nassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\r\nassert filter_evennumbers([10, 20, 45, 67, 84, 93]) == [10, 20, 84]\r\nassert filter_evennumbers([5, 7, 9, 8, 6, 4, 3]) == [8, 6, 4]"], ["def find_Sum(arr, n):\r\n    # Create a dictionary to store the frequency of each element in the array\r\n    freq = {}\r\n    for i in arr:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    \r\n    # Iterate through the dictionary and add the repeated elements to the sum\r\n    sum = 0\r\n    for i in freq:\r\n        if freq[i] > 1:\r\n            sum += i\r\n    \r\n    # Return the sum\r\n    return sum"], ["import re\r\n\r\ndef text_match(text):\r\n    pattern = re.compile(r'[a-z]+_[a-z]+')\r\n    match = pattern.search(text)\r\n    if match:\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'"], ["def text_match_string(string):\r\n    if string.startswith(\"python\"):\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'"], ["def get_gcd(arr):\r\n    \"\"\"\r\n    This function takes an array of integers as input and returns the gcd of all the elements in the array.\r\n    \"\"\"\r\n    if len(arr) == 0:\r\n        return None\r\n    elif len(arr) == 1:\r\n        return arr[0]\r\n    else:\r\n        return gcd(arr[0], get_gcd(arr[1:]))\r\n\r\ndef gcd(a, b):\r\n    \"\"\"\r\n    This function takes two integers as input and returns their gcd.\r\n    \"\"\"\r\n    if b == 0:\r\n        return a\r\n    else:\r\n        return gcd(b, a % b)\r\n\r\n# Test cases\r\nassert get_gcd([2, 4, 6, 8, 16]) == 2\r\nassert get_gcd([1, 2, 3]) == 1\r\nassert get_gcd([2, 4, 6, 8]) == 2"], ["def test_distinct(numbers):\r\n    return len(numbers) == len(set(numbers))"], ["def compute_Last_Digit(a, b):\r\n    from math import factorial\r\n    \r\n    # Calculate factorials of a and b\r\n    fact_a = factorial(a)\r\n    fact_b = factorial(b)\r\n    \r\n    # Check if a! divides b!\r\n    if fact_a % fact_b == 0:\r\n        # Find the last digit of b!\r\n        last_digit = fact_b % 10\r\n        return last_digit\r\n    else:\r\n        return None"], ["def odd_bit_set_number(num):\r\n    return num | (num >> 1) | (num >> 2) | (num >> 3) | (num >> 4) | (num >> 5) | (num >> 6) | (num >> 7)"], ["def specified_element(lst, spec_element):\r\n    result = []\r\n    for sub_lst in lst:\r\n        result.append(sub_lst[spec_element])\r\n    return result"], ["def min_length_list(lst):\r\n    return min(lst, key=lambda x: len(x))\r\n\r\n# Test cases\r\nassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\r\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\r\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"], ["def check_equilateral(a, b, c):\r\n    if a == b == c:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Test cases\r\nassert check_equilateral(6, 8, 12) == False\r\nassert check_equilateral(6, 6, 12) == False\r\nassert check_equilateral(6, 6, 6) == True"], ["def parallelogram_area(base, height):\r\n    return base * height\r\n\r\n# Test cases\r\nassert parallelogram_area(10,20)==200\r\nassert parallelogram_area(15,20)==300\r\nassert parallelogram_area(8,9)==72"], ["def check_Equality(string):\r\n    if string[0] == string[-1]:\r\n        return \"Equal\"\r\n    else:\r\n        return \"Not Equal\""], ["def counting_sort(arr):\r\n    # Find the maximum element in the array\r\n    max_val = max(arr)\r\n    # Create a list of zeros with length equal to max_val+1\r\n    count = [0] * (max_val+1)\r\n    # Count the occurrences of each element in the array\r\n    for i in arr:\r\n        count[i] += 1\r\n    # Modify the count array such that each element at index i stores the sum of all elements before it\r\n    for i in range(1, max_val+1):\r\n        count[i] += count[i-1]\r\n    # Create a new array to store the sorted elements\r\n    sorted_arr = [0] * len(arr)\r\n    # Place the elements in the sorted array in their correct position based on their count\r\n    for i in range(len(arr)-1, -1, -1):\r\n        sorted_arr[count[arr[i]]-1] = arr[i]\r\n        count[arr[i]] -= 1\r\n    return sorted_arr"], ["def tn_gp(a, r, n):\r\n    \"\"\"\r\n    This function takes three arguments:\r\n    a: first term of the geometric series\r\n    r: common ratio of the geometric series\r\n    n: t-nth term of the geometric series\r\n    \r\n    It returns the t-nth term of the geometric series.\r\n    \"\"\"\r\n    return a * (r ** (n-1))\r\n\r\n# Test cases\r\nassert tn_gp(1,5,2)==16\r\nassert tn_gp(1,5,4)==256\r\nassert tn_gp(2,6,3)==486"], ["def check(num):\r\n    reverse = int(str(num)[::-1])\r\n    if num == reverse*2-1:\r\n        return True\r\n    else:\r\n        return False"], ["def find_Max_Num(digits, n):\r\n    digits.sort(reverse=True)\r\n    result = \"\"\r\n    for i in range(n):\r\n        result += str(digits[i])\r\n    return int(result)"], ["def opposite_Signs(a, b):\r\n    if a*b < 0:\r\n        return True\r\n    else:\r\n        return False"], ["def is_octagonal(n):\r\n    \"\"\"\r\n    This function takes an integer n as input and returns the nth octagonal number.\r\n    \"\"\"\r\n    return (n * (3 * n - 1)) // 2"], ["def max_len_sub(arr, diff):\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if abs(arr[i] - arr[j]) <= diff:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n# Test cases\r\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\r\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\r\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1"], ["def count_Substrings(s, n):\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n+1):\r\n            if sum(int(d) for d in s[i:j]) == j-i:\r\n                count += 1\r\n    return count"], ["def smallest_num(lst):\r\n    return min(lst)"], ["def max_difference(tuples_list):\r\n    max_diff = 0\r\n    for i in range(len(tuples_list)):\r\n        for j in range(i+1, len(tuples_list)):\r\n            diff = abs(tuples_list[i][1] - tuples_list[j][0])\r\n            if diff > max_diff:\r\n                max_diff = diff\r\n    return max_diff"], ["def subject_marks(subjects):\r\n    return sorted(subjects, key=lambda x: x[1], reverse=True)\r\n\r\n# Test cases\r\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\r\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\r\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], ["def recursive_list_sum(lst):\r\n    total = 0\r\n    for item in lst:\r\n        if isinstance(item, list):\r\n            total += recursive_list_sum(item)\r\n        else:\r\n            total += item\r\n    return total"], ["def pos_count(lst):\r\n    count = 0\r\n    for num in lst:\r\n        if num > 0:\r\n            count += 1\r\n    return count"], ["def bell_number(n):\r\n    if n == 0:\r\n        return 1\r\n    elif n < 0:\r\n        return 0\r\n    else:\r\n        bell = [0] * (n + 1)\r\n        bell[0] = 1\r\n        for i in range(1, n + 1):\r\n            bell[i] = bell[i - 1] * i\r\n        return bell[n]\r\n\r\n# Test cases\r\nassert bell_number(2) == 2\r\nassert bell_number(10) == 115975\r\nassert bell_number(56) == 6775685320645824322581483068371419745979053216268760300"], ["def is_monotonic(arr):\r\n    if len(arr) <= 1:\r\n        return True\r\n    \r\n    increasing = arr[0] < arr[1]\r\n    for i in range(1, len(arr)):\r\n        if increasing:\r\n            if arr[i] < arr[i-1]:\r\n                return False\r\n        else:\r\n            if arr[i] > arr[i-1]:\r\n                return False\r\n    \r\n    return True"], ["def is_sublist(lst, sublst):\r\n    \"\"\"\r\n    This function checks whether a list contains the given sublist or not.\r\n    \"\"\"\r\n    if len(sublst) > len(lst):\r\n        return False\r\n    else:\r\n        for i in range(len(lst)):\r\n            if lst[i:i+len(sublst)] == sublst:\r\n                return True\r\n        return False"], ["def get_equal(tuples_list, length):\r\n    \"\"\"\r\n    This function takes a list of tuples and a length as input and returns a string indicating whether all the tuples have equal length or not.\r\n    \"\"\"\r\n    for tup in tuples_list:\r\n        if len(tup) != length:\r\n            return 'All tuples do not have same length'\r\n    return 'All tuples have same length'"], ["def comb_sort(arr):\r\n    n = len(arr)\r\n    gap = n\r\n    shrink = 1.3\r\n    sorted = False\r\n    while not sorted:\r\n        gap = int(gap / shrink)\r\n        if gap <= 1:\r\n            gap = 1\r\n            sorted = True\r\n        i = 0\r\n        while i + gap < n:\r\n            if arr[i] > arr[i + gap]:\r\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\r\n                sorted = False\r\n            i += 1\r\n    return arr"], ["def dif_Square(n):\r\n    for i in range(1, int(n/2)+1):\r\n        if n == i*i + (i+1)*(i+1):\r\n            return True\r\n    return False"], ["import re\r\n\r\ndef multiple_split(string):\r\n    # Define the regex pattern for multiple delimiters\r\n    pattern = r'[^\\w\\s]+'\r\n    # Split the string using the pattern\r\n    return re.split(pattern, string)\r\n\r\n# Test cases\r\nassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\r\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\r\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"], ["def is_samepatterns(patterns, letters):\r\n    if len(patterns) != len(letters):\r\n        return False\r\n    for i in range(len(patterns)):\r\n        if patterns[i] not in patterns[:i] and patterns[i] != letters[i]:\r\n            return False\r\n    return True"], ["def find_tuples(lst, k):\r\n    result = []\r\n    for tup in lst:\r\n        if all(x % k == 0 for x in tup):\r\n            result.append(tup)\r\n    return str(result)"], ["def count_Squares(width, height):\r\n    return width * height"], ["def is_Diff(num):\r\n    even_sum = 0\r\n    odd_sum = 0\r\n    for digit in str(num):\r\n        if int(digit) % 2 == 0:\r\n            even_sum += int(digit)\r\n        else:\r\n            odd_sum += int(digit)\r\n    return even_sum != odd_sum"], ["def count_With_Odd_SetBits(n):\r\n    count = 0\r\n    for i in range(n+1):\r\n        if bin(i).count('1') % 2 != 0:\r\n            count += 1\r\n    return count"], ["def word_len(word):\r\n    if len(word) % 2 == 0:\r\n        return False\r\n    else:\r\n        return True"], ["def tetrahedral_number(n):\r\n    return (n * (n + 1) // 2) ** 2"], ["def zip_tuples(t1, t2):\r\n    return list(zip(t1, t2))\r\n\r\n# Test cases\r\nassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\r\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\r\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"], ["import math\r\n\r\ndef volume_sphere(radius):\r\n    return (4/3) * math.pi * (radius ** 3)\r\n\r\n# Test cases\r\nassert volume_sphere(10) == 4188.790204786391\r\nassert volume_sphere(25) == 65449.84694978735\r\nassert volume_sphere(20) == 33510.32163829113"], ["def get_Char(string):\r\n    # Convert the string to a list of characters\r\n    char_list = list(string)\r\n    \r\n    # Initialize the sum variable to 0\r\n    sum = 0\r\n    \r\n    # Loop through the list of characters and add each character to the sum variable\r\n    for char in char_list:\r\n        sum += ord(char)\r\n    \r\n    # Convert the sum variable back to a character using chr() function\r\n    result = chr(sum)\r\n    \r\n    return result"], ["def sequence(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 1\r\n    else:\r\n        a, b = 1, 1\r\n        for i in range(3, n+1):\r\n            c = a + b\r\n            a, b = b, c\r\n        return b"], ["import math\r\n\r\ndef surfacearea_sphere(radius):\r\n    return 4 * math.pi * radius ** 2\r\n\r\n# Test cases\r\nassert surfacearea_sphere(10) == 1256.6370614359173\r\nassert surfacearea_sphere(15) == 2827.4333882308138\r\nassert surfacearea_sphere(20) == 5026.548245743669"], ["def centered_hexagonal_number(n):\r\n    \"\"\"\r\n    Returns the nth centered hexagonal number.\r\n    \"\"\"\r\n    if n % 2 == 0:\r\n        return (3 * n**2 - n) // 2\r\n    else:\r\n        return (3 * n**2 + n) // 2"], ["def merge_dictionaries_three(dict1, dict2, dict3):\r\n    merged_dict = dict1.copy()\r\n    merged_dict.update(dict2)\r\n    merged_dict.update(dict3)\r\n    return merged_dict"], ["def freq_count(lst):\r\n    freq = {}\r\n    for i in lst:\r\n        if i in freq:\r\n            freq[i] += 1\r\n        else:\r\n            freq[i] = 1\r\n    return freq"], ["def closest_num(n):\r\n    \"\"\"\r\n    Find the closest smaller number than n.\r\n    \"\"\"\r\n    for i in range(n-1, 0, -1):\r\n        if i < n:\r\n            return i"], ["def len_log(lst):\r\n    max_len = 0\r\n    for word in lst:\r\n        if len(word) > max_len:\r\n            max_len = len(word)\r\n    return max_len"], ["def find_substring(lst, substr):\r\n    for word in lst:\r\n        if substr in word:\r\n            return True\r\n    return False"], ["def is_undulating(num):\r\n    \"\"\"\r\n    This function checks whether the given number is undulating or not.\r\n    \"\"\"\r\n    num = str(num)\r\n    n = len(num)\r\n    if n < 3:\r\n        return False\r\n    for i in range(1, n-1):\r\n        if num[i] != num[i-1] and num[i] != num[i+1]:\r\n            return False\r\n    return True"], ["def power(a, b):\r\n    return a ** b"], ["def index_minimum(tuples_list):\r\n    min_value = min(tuples_list, key=lambda x: x[1])\r\n    return min_value[0]\r\n\r\n# Test cases\r\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\r\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\r\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], ["def Find_Min_Length(lst):\r\n    min_length = float('inf')\r\n    for sublist in lst:\r\n        if len(sublist) < min_length:\r\n            min_length = len(sublist)\r\n    return min_length"], ["def divisor(n):\r\n    count = 0\r\n    for i in range(1, n+1):\r\n        if n % i == 0:\r\n            count += 1\r\n    return count"], ["def frequency_lists(lst):\r\n    freq = {}\r\n    for sub_lst in lst:\r\n        for num in sub_lst:\r\n            if num in freq:\r\n                freq[num] += 1\r\n            else:\r\n                freq[num] = 1\r\n    return freq"], ["def multiply_num(lst):\r\n    product = 1\r\n    for num in lst:\r\n        product *= num\r\n    return product / len(lst)"], ["def decimal_to_binary(num):\r\n    binary = \"\"\r\n    while num > 0:\r\n        binary = str(num % 2) + binary\r\n        num = num // 2\r\n    return binary"], ["def next_smallest_palindrome(n):\r\n    # Convert the number to a string\r\n    num_str = str(n)\r\n    # Check if the number is already a palindrome\r\n    if num_str == num_str[::-1]:\r\n        # If it is, add 1 to the last digit and pad with zeros\r\n        # to get the next smallest palindrome\r\n        num_list = list(num_str)\r\n        num_list[-1] = str(int(num_list[-1]) + 1)\r\n        num_str = ''.join(num_list)\r\n        while len(num_str) > 1 and num_str[0] == '0':\r\n            num_str = num_str[1:]\r\n        return int(num_str)\r\n    else:\r\n        # If it's not a palindrome, add 1 to the last digit and\r\n        # append the same digit to the beginning to get the next smallest palindrome\r\n        num_list = list(num_str)\r\n        num_list[-1] = str(int(num_list[-1]) + 1)\r\n        num_list.insert(0, num_list[-1])\r\n        num_str = ''.join(num_list)\r\n        return int(num_str)"], ["def kth_element(arr, k, n):\r\n    \"\"\"\r\n    This function takes an array, k and n as input and returns the kth element in the array.\r\n    \"\"\"\r\n    arr.sort()\r\n    return arr[k-1]\r\n\r\n# Test cases\r\nassert kth_element([12,3,5,7,19], 5, 2) == 3\r\nassert kth_element([17,24,8,23], 4, 3) == 8\r\nassert kth_element([16,21,25,36,4], 5, 4) == 36"], ["def snake_to_camel(snake_str):\r\n    words = snake_str.split('_')\r\n    camel_str = ''\r\n    for word in words:\r\n        camel_str += word.capitalize()\r\n    return camel_str"], ["def eulerian_num(n, m):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        return (eulerian_num(n-1, m) + (m**(n-1))*eulerian_num(1, m))\r\n\r\n# Test cases\r\nassert eulerian_num(3, 1) == 4\r\nassert eulerian_num(4, 1) == 11\r\nassert eulerian_num(5, 3) == 26"], ["def sort_sublists(lst):\r\n    return [sorted(sublist) for sublist in lst]\r\n\r\n# Test cases\r\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\r\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\r\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], ["def count(lst):\r\n    count = 0\r\n    for i in lst:\r\n        if i == True:\r\n            count += 1\r\n    return count"], ["def add_lists(lst, tup):\r\n    return tup + tuple(lst)\r\n\r\n# Test cases\r\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\r\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\r\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], ["def count_Hexadecimal(start, end):\r\n    count = 0\r\n    for i in range(start, end+1):\r\n        if i > 15:\r\n            i = hex(i)[2:].upper()\r\n        if i.isdigit() or i.isalpha():\r\n            count += 1\r\n    return count"], ["import heapq\r\n\r\ndef merge_sorted_list(*args):\r\n    heap = []\r\n    for i in range(len(args)):\r\n        heapq.heappush(heap, iter(args[i]))\r\n    \r\n    result = []\r\n    while heap:\r\n        min_val = heapq.heappop(heap)\r\n        try:\r\n            min_val = next(min_val)\r\n            heapq.heappush(heap, min_val)\r\n        except StopIteration:\r\n            pass\r\n        result.append(min_val)\r\n    \r\n    return result"], ["def odd_Equivalent(binary_string, length):\r\n    # Convert binary string to list of integers\r\n    binary_list = [int(i) for i in binary_string]\r\n    \r\n    # Find the count of rotations\r\n    count = 0\r\n    for i in range(length):\r\n        # Find the equivalent binary string for i rotations\r\n        rotated_binary = binary_list[-i:] + binary_list[:-i]\r\n        \r\n        # Check if the equivalent binary string has odd value\r\n        if sum(rotated_binary) % 2 == 1:\r\n            count += 1\r\n    \r\n    return count"], ["def extract_missing(ranges, start, end):\r\n    result = []\r\n    current = start\r\n    for r in ranges:\r\n        if current < r[0]:\r\n            result.append((current, min(r[0]-1, end)))\r\n        current = max(current, r[1]+1)\r\n    if current <= end:\r\n        result.append((current, end))\r\n    return result"], ["def common_in_nested_lists(nested_lists):\r\n    common_elements = set(nested_lists[0])\r\n    for lst in nested_lists[1:]:\r\n        common_elements.intersection_update(lst)\r\n    return list(common_elements)"], ["def perimeter(radius, height):\r\n    return 2 * (2 * radius + height)"], ["def check_integer(string):\r\n    try:\r\n        int(string)\r\n        return True\r\n    except ValueError:\r\n        return False"], ["def assign_freq(tuples_list):\r\n    freq_dict = {}\r\n    for tup in tuples_list:\r\n        if tup not in freq_dict:\r\n            freq_dict[tup] = 1\r\n        else:\r\n            freq_dict[tup] += 1\r\n    result = []\r\n    for tup, freq in freq_dict.items():\r\n        result.append((*tup, freq))\r\n    return str(result)"], ["def empty_dit(lst):\r\n    for d in lst:\r\n        if d:\r\n            return False\r\n    return True"], ["def tuple_to_int(tup):\r\n    \"\"\"\r\n    Converts a tuple of positive integers into an integer.\r\n    \"\"\"\r\n    return int(''.join(map(str, tup)))\r\n\r\n# Test cases\r\nassert tuple_to_int((1,2,3))==123\r\nassert tuple_to_int((4,5,6))==456\r\nassert tuple_to_int((5,6,7))==567"], ["def list_to_float(lst):\r\n    result = []\r\n    for item in lst:\r\n        if isinstance(item, tuple):\r\n            result.append(tuple(float(x) for x in item))\r\n        else:\r\n            result.append(float(item))\r\n    return result"], ["def string_to_list(string):\r\n    return string.split()"], ["def search(arr):\r\n    if len(arr) == 1:\r\n        return arr[0]\r\n    \r\n    if arr[0] != arr[1]:\r\n        return arr[0]\r\n    \r\n    if arr[-1] != arr[-2]:\r\n        return arr[-1]\r\n    \r\n    for i in range(2, len(arr)-1):\r\n        if arr[i] != arr[i-1] and arr[i] != arr[i+1]:\r\n            return arr[i]"], ["def max_product_tuple(lst):\r\n    max_product = float('-inf')\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            product = lst[i][0]*lst[j][0]\r\n            if product > max_product:\r\n                max_product = product\r\n    return max_product"], ["def check_triplet(arr, target_sum1, target_sum2, target_sum3):\r\n    arr.sort()\r\n    n = len(arr)\r\n    for i in range(n-2):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum1:\r\n                return True\r\n            elif current_sum < target_sum1:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    for i in range(n-1):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum2:\r\n                return True\r\n            elif current_sum < target_sum2:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    for i in range(n-2):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum3:\r\n                return True\r\n            elif current_sum < target_sum3:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    return False"], ["def smartNumber(n):\r\n    count = 0\r\n    num = 1\r\n    while count < n:\r\n        num += 1\r\n        if num % 10 == 0:\r\n            count += 1\r\n    return num"], ["def amicable_numbers_sum(n):\r\n    \"\"\"\r\n    Returns the sum of all amicable numbers from 1 to n.\r\n    \"\"\"\r\n    total = 0\r\n    for i in range(1, n+1):\r\n        # Calculate the divisors of i\r\n        divisors = [j for j in range(1, i+1) if i % j == 0]\r\n        # Calculate the divisors of the sum of divisors of i\r\n        divisors_sum = sum(divisors)\r\n        if divisors_sum != i and i == sum(divisors) and i != divisors_sum:\r\n            total += i\r\n    return total"], ["import cmath\r\n\r\ndef angle_complex(z):\r\n    return cmath.phase(z)\r\n\r\n# Test cases\r\nassert angle_complex(0,1j)==1.5707963267948966\r\nassert angle_complex(2,1j)==0.4636476090008061\r\nassert angle_complex(0,2j)==1.5707963267948966"], ["def find_length(binary_string, k):\r\n    n = len(binary_string)\r\n    count_0 = count_1 = 0\r\n    max_diff = 0\r\n    for i in range(n):\r\n        if binary_string[i] == '0':\r\n            count_0 += 1\r\n        else:\r\n            count_1 += 1\r\n        if count_0 > k or count_1 > k:\r\n            count_0 = count_1 = 0\r\n        else:\r\n            max_diff = max(max_diff, count_0 + count_1)\r\n    return max_diff"], ["def sum_common_divisors(num1, num2):\r\n    divisors = set()\r\n    for i in range(1, min(num1, num2) + 1):\r\n        if num1 % i == 0 and num2 % i == 0:\r\n            divisors.add(i)\r\n    return sum(divisors)"], ["def multiply_int(a, b):\r\n    result = 0\r\n    for i in range(b):\r\n        result += a\r\n    return result"], ["def long_words(n, words):\r\n    \"\"\"\r\n    Returns a list of words that are longer than n from a given list of words.\r\n    \"\"\"\r\n    return [word for word in words.split() if len(word) > n]"], ["def magic_square_test(square):\r\n    n = len(square)\r\n    magic_sum = sum(range(1, n*n+1))\r\n    row_sum = col_sum = diag_sum = off_diag_sum = 0\r\n    \r\n    for i in range(n):\r\n        row_sum += sum(square[i])\r\n        col_sum += square[i][i]\r\n        diag_sum += square[i][n-i-1]\r\n        off_diag_sum += square[i][n-i-1]\r\n    \r\n    if row_sum != magic_sum or col_sum != magic_sum or diag_sum != magic_sum or off_diag_sum != magic_sum:\r\n        return False\r\n    \r\n    for i in range(n):\r\n        for j in range(n):\r\n            if square[i][j] != square[j][i]:\r\n                return False\r\n    \r\n    return True"], ["def max_occurrences(lst):\r\n    \"\"\"\r\n    Finds the item with maximum frequency in a given list.\r\n    \"\"\"\r\n    freq_dict = {}\r\n    for item in lst:\r\n        if item in freq_dict:\r\n            freq_dict[item] += 1\r\n        else:\r\n            freq_dict[item] = 1\r\n    max_freq = max(freq_dict.values())\r\n    max_items = [k for k, v in freq_dict.items() if v == max_freq]\r\n    return max_items[0], len(max_items)"], ["def reverse_vowels(string):\r\n    vowels = \"aeiouAEIOU\"\r\n    vowel_list = []\r\n    non_vowel_list = []\r\n    for char in string:\r\n        if char in vowels:\r\n            vowel_list.append(char)\r\n        else:\r\n            non_vowel_list.append(char)\r\n    reversed_vowels = vowel_list[::-1]\r\n    reversed_string = \"\"\r\n    for char in non_vowel_list:\r\n        reversed_string += char\r\n    for char in reversed_vowels:\r\n        reversed_string += char\r\n    return reversed_string"], ["def tup_string(tup):\r\n    return ''.join(tup)\r\n\r\n# Test cases\r\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\r\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\r\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], ["def sum_negativenum(lst):\r\n    return sum(filter(lambda x: x < 0, lst))\r\n\r\n# Test cases\r\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\r\nassert sum_negativenum([10, 15, -14, 13, -18, 12, -20]) == -52\r\nassert sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894"], ["def check_last(arr, p, operation):\r\n    # Perform the operation p times on the array\r\n    for i in range(p):\r\n        arr = [operation(x) for x in arr]\r\n    \r\n    # Check if the last element of the array is even or odd\r\n    if arr[-1] % 2 == 0:\r\n        return \"EVEN\"\r\n    else:\r\n        return \"ODD\""], ["def hexagonal_num(n):\r\n    return (n * (n - 1)) // 2\r\n\r\n# Test cases\r\nassert hexagonal_num(10) == 190\r\nassert hexagonal_num(5) == 45\r\nassert hexagonal_num(7) == 91"], ["def cal_electbill(kwh):\r\n    rate = 0.2  # Rate per kilowatt hour\r\n    if kwh <= 300:\r\n        return kwh * rate\r\n    else:\r\n        return 300 * rate + (kwh - 300) * rate * 0.1"], ["def zero_count(arr):\r\n    count = 0\r\n    for i in arr:\r\n        if i == 0:\r\n            count += 1\r\n    return count/len(arr)\r\n\r\n# Test cases\r\nassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.15\r\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.00\r\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.00"], ["def is_Sum_Of_Powers_Of_Two(n):\r\n    # Initialize a variable to store the sum of powers of 2\r\n    sum_powers = 0\r\n    \r\n    # Loop through all powers of 2 from 1 to n\r\n    for i in range(1, n+1):\r\n        # Check if the current power of 2 is a factor of n\r\n        if n % i == 0:\r\n            # Add the current power of 2 to the sum\r\n            sum_powers += i\r\n    \r\n    # Check if the sum of powers of 2 is equal to n\r\n    if sum_powers == n:\r\n        return True\r\n    else:\r\n        return False"], ["import math\r\n\r\ndef circle_circumference(radius):\r\n    return 2 * math.pi * radius\r\n\r\n# Test cases\r\nassert circle_circumference(10) == 62.830000000000005\r\nassert circle_circumference(5) == 31.415000000000003\r\nassert circle_circumference(4) == 25.132741228718345"], ["def extract_singly(tuple_list):\r\n    result = []\r\n    for tup in tuple_list:\r\n        for num in tup:\r\n            if tup.count(num) == 1:\r\n                result.append(num)\r\n    return result"], ["def pancake_sort(lst):\r\n    n = len(lst)\r\n    \r\n    while n > 1:\r\n        # Find the maximum number in the list\r\n        max_index = 0\r\n        for i in range(1, n):\r\n            if lst[i] > lst[max_index]:\r\n                max_index = i\r\n        \r\n        # If the maximum number is not at the beginning of the list, reverse the list from the beginning to the maximum number and move it to the beginning\r\n        if max_index != 0:\r\n            lst = lst[:max_index+1][::-1] + lst[max_index+1:]\r\n        \r\n        # Reverse the list from the beginning to the length of the list and move the maximum number to the end\r\n        lst = lst[:n][::-1] + [lst[max_index]]\r\n        \r\n        n -= 1\r\n    \r\n    return lst"], ["def count_samepair(list1, list2, list3):\r\n    count = 0\r\n    for i in list1:\r\n        if i in list2 and i in list3:\r\n            count += 1\r\n    return count\r\n\r\n# Test cases\r\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\r\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\r\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], ["def find_lists(tup):\r\n    count = 0\r\n    for item in tup:\r\n        if type(item) == list:\r\n            count += 1\r\n    return count"], ["def sum_Pairs(arr, n):\r\n    total = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            total += abs(arr[i] - arr[j])\r\n    return total"], ["def max_Abs_Diff(arr):\r\n    max_diff = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            diff = abs(arr[i] - arr[j])\r\n            if diff > max_diff:\r\n                max_diff = diff\r\n    return max_diff"], ["def ascii_value_string(string):\r\n    ascii_sum = 0\r\n    for char in string:\r\n        ascii_sum += ord(char)\r\n    return ascii_sum"], ["def max_path_sum(triangle, row, col):\r\n    if row == 0:\r\n        return triangle[0][col]\r\n    \r\n    left_sum = max_path_sum(triangle, row-1, col)\r\n    right_sum = max_path_sum(triangle, row-1, col-1)\r\n    \r\n    return triangle[row][col] + max(left_sum, right_sum)\r\n\r\n# Test cases\r\nassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\r\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24\r\nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"], ["def sum_digits_twoparts(n):\r\n    # Convert the number to a string\r\n    num_str = str(n)\r\n    # Calculate the sum of digits in the number\r\n    sum_digits = sum(int(digit) for digit in num_str)\r\n    # If the sum of digits is odd, add 1 to the sum to make it even\r\n    if sum_digits % 2 != 0:\r\n        sum_digits += 1\r\n    # Calculate the maximum sum of digits that can be obtained by dividing the number into two parts\r\n    max_sum = sum_digits // 2\r\n    # Initialize two variables to store the two parts of the number\r\n    part1 = 0\r\n    part2 = 0\r\n    # Iterate through the digits of the number\r\n    for digit in num_str:\r\n        # If the sum of digits in part1 is less than max_sum, add the current digit to part1\r\n        if sum(int(digit) for digit in str(part1)) < max_sum:\r\n            part1 = int(part1) * 10 + int(digit)\r\n        # If the sum of digits in part2 is less than max_sum, add the current digit to part2\r\n        elif sum(int(digit) for digit in str(part2)) < max_sum:\r\n            part2 = int(part2) * 10 + int(digit)\r\n        # If the sum of digits in part1 is greater than or equal to max_sum, and the sum of digits in part2 is greater than or equal to max_sum, break the loop\r\n        elif sum(int(digit) for digit in str(part1)) >= max_sum and sum(int(digit) for digit in str(part2)) >= max_sum:\r\n            break\r\n    # Return the sum of digits in part1 and part2\r\n    return sum(int(digit) for digit in str(part1)) + sum(int(digit) for digit in str(part2))"], ["def longest_subseq_with_diff_one(arr, n):\r\n    if not arr:\r\n        return 0\r\n    \r\n    # Initialize a dictionary to store the last index of each element\r\n    last_idx = {}\r\n    \r\n    # Initialize variables to store the length of the longest subsequence and the current subsequence length\r\n    max_len = 0\r\n    curr_len = 1\r\n    \r\n    # Iterate through the array\r\n    for i in range(1, n):\r\n        # If the difference between the current element and the last element is 1\r\n        if arr[i] - arr[i-1] == 1:\r\n            # Update the last index of the current element\r\n            last_idx[arr[i]] = i\r\n            \r\n            # Update the current subsequence length\r\n            curr_len += 1\r\n            \r\n            # Update the maximum subsequence length if the current subsequence length is greater\r\n            max_len = max(max_len, curr_len)\r\n        else:\r\n            # If the difference is not 1, reset the current subsequence length to 1\r\n            curr_len = 1\r\n            \r\n            # Reset the last index of the current element\r\n            last_idx[arr[i]] = i\r\n    \r\n    return max_len"], ["def does_Contain_B(a, b, c):\r\n    if a == 0:\r\n        return False\r\n    \r\n    while True:\r\n        if b == 0:\r\n            return False\r\n        \r\n        if b == 1:\r\n            return True\r\n        \r\n        b = abs(b) % c\r\n        \r\n        if b == 0:\r\n            return False\r\n        \r\n        if b == 1:\r\n            return True\r\n        \r\n        b = abs(b) % c\r\n        \r\n        if b == 0:\r\n            return False\r\n        \r\n        if b == 1:\r\n            return True"], ["def is_coprime(a, b):\r\n    if a == 1 or b == 1:\r\n        return False\r\n    for i in range(2, min(a, b) + 1):\r\n        if a % i == 0 and b % i == 0:\r\n            return False\r\n    return True"], ["def merge_sort(arr):\r\n    if len(arr) <= 1:\r\n        return arr\r\n    \r\n    mid = len(arr) // 2\r\n    left = arr[:mid]\r\n    right = arr[mid:]\r\n    \r\n    left = merge_sort(left)\r\n    right = merge_sort(right)\r\n    \r\n    return merge(left, right)\r\n    \r\ndef merge(left, right):\r\n    result = []\r\n    i = j = 0\r\n    \r\n    while i < len(left) and j < len(right):\r\n        if left[i] < right[j]:\r\n            result.append(left[i])\r\n            i += 1\r\n        else:\r\n            result.append(right[j])\r\n            j += 1\r\n            \r\n    result += left[i:]\r\n    result += right[j:]\r\n    \r\n    return result"], ["import math\r\n\r\ndef parabola_vertex(a, b, c):\r\n    \"\"\"\r\n    Given the coefficients of a quadratic equation ax^2 + bx + c = 0, \r\n    returns the vertex of the parabola in the form (x, y).\r\n    \"\"\"\r\n    if b**2 - 4*a*c < 0:\r\n        return None\r\n    else:\r\n        x = -b / (2*a)\r\n        y = c / (a * x**2)\r\n        return (x, y)\r\n\r\n# Test cases\r\nassert parabola_vertex(5,3,2)==(-0.3, 1.55)\r\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\r\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)"], ["def specified_element(lst, element):\r\n    result = []\r\n    for sublist in lst:\r\n        if element < len(sublist):\r\n            result.append(sublist[element])\r\n    return result"], ["def even_bit_toggle_number(num):\r\n    # Initialize a variable to store the result\r\n    result = 0\r\n    \r\n    # Loop through each bit of the number\r\n    for i in range(32):\r\n        # Check if the bit is even\r\n        if num & (1 << i):\r\n            # If the bit is even, toggle it by subtracting it from the result\r\n            result -= (1 << i)\r\n        else:\r\n            # If the bit is odd, add it to the result\r\n            result += (1 << i)\r\n    \r\n    # Return the result\r\n    return result"], ["def tuple_int_str(tup):\r\n    new_tup = []\r\n    for i in tup:\r\n        new_tup.append((int(i[0]), int(i[1])))\r\n    return tuple(new_tup)"], ["def encode_list(lst):\r\n    if not isinstance(lst, list):\r\n        raise TypeError(\"Input must be a list\")\r\n    if not all(isinstance(x, (int, float, str)) for x in lst):\r\n        raise TypeError(\"All elements in the list must be integers, floats, or strings\")\r\n    \r\n    result = []\r\n    count = 1\r\n    for i in range(1, len(lst)):\r\n        if lst[i] == lst[i-1]:\r\n            count += 1\r\n        else:\r\n            result.append([count, lst[i-1]])\r\n            count = 1\r\n    result.append([count, lst[-1]])\r\n    return result"], ["def min_Ops(arr, k, n):\r\n    if k > n*(n-1)//2:\r\n        return -1\r\n    \r\n    arr.sort()\r\n    \r\n    diff = arr[-1] - arr[0]\r\n    \r\n    if diff == 0:\r\n        return 0\r\n    \r\n    if k < diff:\r\n        return -1\r\n    \r\n    return k - diff"], ["def month_season(month, day):\r\n    if month in ['December', 'January', 'February']:\r\n        return 'winter'\r\n    elif month in ['March', 'April', 'May']:\r\n        return 'spring'\r\n    elif month in ['June', 'July', 'August']:\r\n        return 'summer'\r\n    elif month in ['September', 'October', 'November']:\r\n        return 'autumn'\r\n    else:\r\n        return 'Invalid month'\r\n\r\n# Test cases\r\nassert month_season('January',4)==('winter')\r\nassert month_season('October',28)==('autumn')\r\nassert month_season('June',6)==('spring')"], ["def solution(a, b, n):\r\n    if a == 0:\r\n        if b == 0:\r\n            return 'Infinite solutions'\r\n        else:\r\n            return 'No solution'\r\n    else:\r\n        x = (n - b) // a\r\n        y = (n - a * x) // b\r\n        if x < 0 or y < 0:\r\n            return 'No solution'\r\n        else:\r\n            return ('x = ', x, ', y = ', y)"], ["def remove_elements(list1, list2):\r\n    return [x for x in list1 if x not in list2]"], ["def sum_series(n):\r\n    sum = 0\r\n    i = 1\r\n    while i <= n:\r\n        sum += i\r\n        i += 2\r\n    return sum"], ["import math\r\n\r\ndef area_polygon(n, r):\r\n    \"\"\"\r\n    Calculate the area of a regular polygon.\r\n    \r\n    Args:\r\n    n (int): Number of sides of the polygon.\r\n    r (float): Length of the sides of the polygon.\r\n    \r\n    Returns:\r\n    float: The area of the polygon.\r\n    \"\"\"\r\n    return (n * r**2) / (4 * math.tan(math.pi/n))\r\n\r\n# Test cases\r\nassert area_polygon(4,20)==400.00000000000006\r\nassert area_polygon(10,15)==1731.1969896610804\r\nassert area_polygon(9,7)==302.90938549487214"], ["def areEquivalent(num1, num2):\r\n    # function to check whether the sum of divisors are same or not\r\n    def sum_of_divisors(n):\r\n        # function to calculate the sum of divisors of a number\r\n        divisors_sum = 0\r\n        for i in range(1, n+1):\r\n            if n % i == 0:\r\n                divisors_sum += i\r\n        return divisors_sum\r\n    \r\n    return sum_of_divisors(num1) == sum_of_divisors(num2)"], ["def count_char_position(string):\r\n    count = 0\r\n    for i in range(26):\r\n        if string.lower().count(chr(i+97)) > 0:\r\n            count += 1\r\n    return count"], ["def find_even_Pair(arr, n):\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if (arr[i]^arr[j])%2 == 0:\r\n                count += 1\r\n    return count"], ["def next_Power_Of_2(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return 2**(n-1).bit_length()"], ["def frequency(arr, num):\r\n    count = 0\r\n    for i in arr:\r\n        if i == num:\r\n            count += 1\r\n    return count"], ["def get_pell(n):\r\n    if n == 1:\r\n        return 0\r\n    elif n == 2:\r\n        return 1\r\n    else:\r\n        return 2 * get_pell(n-1) + get_pell(n-2)"], ["def sum_range_list(lst, start, end):\r\n    \"\"\"\r\n    This function takes a list and two indices as input and returns the sum of the numbers in the list between the indices.\r\n    \"\"\"\r\n    return sum(lst[start:end+1])"], ["def perimeter_pentagon(side):\r\n    return 5*side"], ["def count_occurance(string):\r\n    count = 0\r\n    for i in range(len(string)-2):\r\n        if string[i:i+3] == \"std\":\r\n            count += 1\r\n    return count"], ["import re\r\n\r\ndef remove_splchar(string):\r\n    \"\"\"\r\n    This function removes everything except alphanumeric characters from a string.\r\n    \"\"\"\r\n    return re.sub(r'[^a-zA-Z0-9]+', '', string)\r\n\r\n# Test cases\r\nassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\r\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\r\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"], ["def group_keyvalue(keyvalue_list):\r\n    result = {}\r\n    for key, value in keyvalue_list:\r\n        if key in result:\r\n            result[key].append(value)\r\n        else:\r\n            result[key] = [value]\r\n    return result"], ["def is_valid_parenthese(s):\r\n    stack = []\r\n    for char in s:\r\n        if char == '(':\r\n            stack.append(char)\r\n        elif char == ')':\r\n            if len(stack) == 0:\r\n                return False\r\n            stack.pop()\r\n    return len(stack) == 0"], ["def perimeter_triangle(a, b, c):\r\n    return a + b + c\r\n\r\n# Test cases\r\nassert perimeter_triangle(10, 20, 30) == 60\r\nassert perimeter_triangle(3, 4, 5) == 12\r\nassert perimeter_triangle(25, 35, 45) == 105"], ["def answer(a, b):\r\n    # Find the lcm of a and b\r\n    lcm = a * b // math.gcd(a, b)\r\n\r\n    # Find the range of numbers that can be multiplied to get the lcm\r\n    min_range = max(a, b)\r\n    max_range = min(a, b) * lcm // a\r\n\r\n    # Find the two distinct numbers that can be multiplied to get the lcm within the given range\r\n    for i in range(min_range, max_range + 1):\r\n        for j in range(min_range, max_range + 1):\r\n            if i != j and i * j == lcm:\r\n                return (i, j)\r\n\r\n    # If no such numbers are found, return None\r\n    return None"], ["def string_literals(literals, string):\r\n    for literal in literals:\r\n        if literal in string:\r\n            return 'Matched!'\r\n    return 'Not Matched!'"], ["def is_num_keith(n):\r\n    \"\"\"\r\n    This function takes a number as input and returns True if it is a keith number, else False.\r\n    A keith number is a number whose sum of digits is equal to the number itself.\r\n    \"\"\"\r\n    # Convert the number to a string to iterate over its digits\r\n    num_str = str(n)\r\n    # Initialize the sum of digits to zero\r\n    digit_sum = 0\r\n    # Iterate over the digits of the number\r\n    for digit in num_str:\r\n        # Add the digit to the sum of digits\r\n        digit_sum += int(digit)\r\n    # If the sum of digits is equal to the number, it is a keith number\r\n    if digit_sum == n:\r\n        return True\r\n    else:\r\n        return False"], ["import math\r\n\r\ndef distance_lat_long(lat1, lon1, lat2, lon2):\r\n    R = 6371 # Radius of the earth in km\r\n    dLat = math.radians(lat2-lat1)\r\n    dLon = math.radians(lon2-lon1)\r\n    a = math.sin(dLat/2) * math.sin(dLat/2) + math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * math.sin(dLon/2) * math.sin(dLon/2)\r\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))\r\n    return R * c"], ["def common_prefix(strs, min_len):\r\n    if not strs:\r\n        return \"\"\r\n    \r\n    prefix = strs[0]\r\n    for i in range(1, len(strs)):\r\n        while strs[i].find(prefix) != 0:\r\n            prefix = prefix[:-1]\r\n            if not prefix:\r\n                return \"\"\r\n    \r\n    if len(prefix) < min_len:\r\n        return \"\"\r\n    \r\n    return prefix"], ["import re\r\n\r\ndef find_character(string):\r\n    uppercase = re.findall(r'[A-Z]', string)\r\n    lowercase = re.findall(r'[a-z]', string)\r\n    special_char = re.findall(r'[^a-zA-Z0-9\\s]', string)\r\n    numeric = re.findall(r'[0-9]', string)\r\n    return uppercase, lowercase, special_char, numeric\r\n\r\n# Test cases\r\nassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\r\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\r\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"], ["def count_pairs(arr, k, diff):\r\n    count = 0\r\n    for i in range(len(arr)):\r\n        for j in range(i+1, len(arr)):\r\n            if abs(arr[i] - arr[j]) == diff:\r\n                count += 1\r\n    return count"], ["def greater_specificnum(lst, num):\r\n    for i in lst:\r\n        if i > num:\r\n            return True\r\n    return False"], ["def parabola_focus(a, b, c):\r\n    \"\"\"\r\n    Given the coefficients of a quadratic equation in standard form,\r\n    find the focus of the parabola.\r\n    \"\"\"\r\n    # Calculate the discriminant\r\n    discriminant = b**2 - 4*a*c\r\n    \r\n    # Calculate the focus\r\n    focus_x = -b / (2*a)\r\n    focus_y = discriminant / (4*a**2)\r\n    \r\n    return (focus_x, focus_y)"], ["import re\r\n\r\ndef check_literals(string, literals):\r\n    for literal in literals:\r\n        if re.search(r'\\b' + literal + r'\\b', string):\r\n            return 'Matched!'\r\n    return 'Not Matched!'"], ["def longest_common_subsequence(s1, s2, m, n):\r\n    # Create a table to store lengths of longest common suffixes of substrings\r\n    # of s1 and s2. The table is filled in a bottom-up manner.\r\n    table = [[0] * (n + 1) for _ in range(m + 1)]\r\n    for i in range(1, m + 1):\r\n        for j in range(1, n + 1):\r\n            if s1[i - 1] == s2[j - 1]:\r\n                table[i][j] = table[i - 1][j - 1] + 1\r\n            else:\r\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\r\n    # The length of the longest common subsequence is stored in the bottom-right corner of the table.\r\n    return table[m][n]"], ["def prod_Square(n):\r\n    for i in range(1, int(n**0.5)+1):\r\n        if n % i == 0:\r\n            j = n//i\r\n            if i**2 == j or i**2 + j**2 == n:\r\n                return True\r\n    return False"], ["def first_Missing_Positive(nums):\r\n    # Create a set to store the positive numbers\r\n    positive_nums = set()\r\n    \r\n    # Iterate through the input list\r\n    for num in nums:\r\n        # Check if the number is positive and not already in the set\r\n        if num > 0 and num not in positive_nums:\r\n            positive_nums.add(num)\r\n    \r\n    # Iterate through the range of positive numbers\r\n    for num in range(1, len(positive_nums)+1):\r\n        # If the number is not in the set, return it as the first missing positive number\r\n        if num not in positive_nums:\r\n            return num\r\n    \r\n    # If all numbers are present, return the length of the input list + 1 as the first missing positive number\r\n    return len(nums) + 1"], ["def count_Intgral_Points(x1, y1, x2, y2):\r\n    count = 0\r\n    for x in range(x1, x2+1):\r\n        for y in range(y1, y2+1):\r\n            if x == int(x) and y == int(y):\r\n                count += 1\r\n    return count"], ["def check_monthnumber(month_name):\r\n    if month_name == \"February\":\r\n        return False\r\n    elif month_name == \"April\" or month_name == \"June\" or month_name == \"September\" or month_name == \"November\":\r\n        return True\r\n    else:\r\n        return False"], ["def check_String(string):\r\n    has_letter = False\r\n    has_number = False\r\n    for char in string:\r\n        if char.isalpha():\r\n            has_letter = True\r\n        elif char.isdigit():\r\n            has_number = True\r\n        if has_letter and has_number:\r\n            return True\r\n    return False"], ["def remove_tuple(tup):\r\n    return tuple(set(tup))\r\n\r\n# Test cases\r\nassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\r\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\r\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"], ["def octal_To_Decimal(octal_num):\r\n    decimal_num = 0\r\n    base = 1\r\n    while octal_num > 0:\r\n        last_digit = octal_num % 10\r\n        decimal_num += last_digit * base\r\n        base *= 8\r\n        octal_num //= 10\r\n    return decimal_num"], ["def first(arr, target, n):\r\n    left = 0\r\n    right = n - 1\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == target:\r\n            result = mid\r\n            right = mid - 1\r\n        elif arr[mid] < target:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n    return result"], ["def remove_tuples(lst, k):\r\n    return [t for t in lst if len(t) != k]"], ["def find_exponentio(t1, t2):\r\n    result = []\r\n    for i in range(len(t1)):\r\n        result.append(t1[i] ** t2[i])\r\n    return tuple(result)\r\n\r\n# Test cases\r\nassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\r\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\r\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"], ["import math\r\n\r\ndef largest_triangle(a, b):\r\n    # Calculate the semi-major and semi-minor axes of the ellipse\r\n    semi_major = a / 2\r\n    semi_minor = b / 2\r\n    \r\n    # Calculate the angle at which the largest triangle will be inscribed\r\n    theta = math.degrees(math.acos(semi_minor / semi_major))\r\n    \r\n    # Calculate the length of the largest triangle's sides\r\n    side_a = 2 * semi_major * math.sin(math.radians(theta))\r\n    side_b = 2 * semi_minor * math.sin(math.radians(theta))\r\n    side_c = semi_major ** 2 / math.sqrt((semi_major ** 2 - semi_minor ** 2) * (semi_major ** 2 - semi_minor ** 2) + 4 * semi_minor ** 2)\r\n    \r\n    # Return the area of the largest triangle\r\n    return 0.5 * side_a * side_b"], ["def highest_Power_of_2(num):\r\n    power = 1\r\n    while power * 2 <= num:\r\n        power *= 2\r\n    return power"], ["def position_max(lst):\r\n    max_val = max(lst)\r\n    positions = [i for i, x in enumerate(lst) if x == max_val]\r\n    return positions"], ["def chkList(lst):\r\n    return len(set(lst)) == 1"], ["def remove_even(string):\r\n    new_string = \"\"\r\n    for i in range(len(string)):\r\n        if i % 2 != 0:\r\n            new_string += string[i]\r\n    return new_string"], ["def hamming_Distance(x, y):\r\n    \"\"\"\r\n    Returns the hamming distance between two integers.\r\n    \"\"\"\r\n    xor_result = x ^ y\r\n    count = 0\r\n    while xor_result:\r\n        count += xor_result & 1\r\n        xor_result >>= 1\r\n    return count"], ["def count(string, char):\r\n    count = 0\r\n    for i in string:\r\n        if i == char:\r\n            count += 1\r\n    return count"], ["def inversion_elements(tup_list):\r\n    inversions = []\r\n    for i in range(len(tup_list)):\r\n        for j in range(i+1, len(tup_list)):\r\n            if tup_list[i] > tup_list[j]:\r\n                inversions.append(tup_list[i] - tup_list[j])\r\n    return tuple(sorted(inversions, reverse=True))\r\n\r\n# Test cases\r\nassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\r\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\r\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"], ["def concatenate_elements(tuples):\r\n    result = []\r\n    for i in range(len(tuples)-1):\r\n        result.append(tuples[i] + tuples[i+1])\r\n    return result"], ["def find_longest_repeating_subseq(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    longest = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n            longest = max(longest, dp[i][j])\n\n    return longest\n\n# Test cases\nassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1"], ["import re\r\n\r\ndef is_decimal(num):\r\n    pattern = r'^\\d+\\.\\d{2}$'\r\n    if re.match(pattern, num):\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Test cases\r\nassert is_decimal('123.11') == True\r\nassert is_decimal('0.21') == True\r\nassert is_decimal('123.1214') == False"], ["def heap_replace(heap, new_item):\r\n    # Find the smallest element in the heap\r\n    smallest = heap[0]\r\n    \r\n    # Replace the smallest element with the new item\r\n    heap[0] = new_item\r\n    \r\n    # Heapify the heap to maintain the heap property\r\n    i = 0\r\n    while i < len(heap):\r\n        left_child = 2*i + 1\r\n        right_child = 2*i + 2\r\n        smallest = i\r\n        \r\n        # Find the smallest child\r\n        if left_child < len(heap) and heap[left_child] < heap[smallest]:\r\n            smallest = left_child\r\n        if right_child < len(heap) and heap[right_child] < heap[smallest]:\r\n            smallest = right_child\r\n        \r\n        # Swap the smallest child with the parent\r\n        if smallest != i:\r\n            heap[i], heap[smallest] = heap[smallest], heap[i]\r\n            i = smallest\r\n        else:\r\n            break\r\n    \r\n    return heap"], ["import re\r\n\r\ndef is_allowed_specific_char(string):\r\n    pattern = re.compile(r'^[a-zA-Z0-9]+$')\r\n    return bool(pattern.match(string))\r\n\r\n# Test cases\r\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\r\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\r\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"], ["def count_Num(n):\r\n    count = 0\r\n    for i in range(1, n+1):\r\n        if bin(i)[2] == '1' and bin(i)[3] == '1':\r\n            count += 1\r\n    return count"], ["def fourth_Power_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i**4\r\n    return sum"], ["def concatenate_strings(tup1, tup2):\r\n    return tuple(str1 + str2 for str1, str2 in zip(tup1, tup2))\r\n\r\n# Test cases\r\nassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\r\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\r\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"], ["import math\r\n\r\ndef degree_radian(radians):\r\n    return radians * 180 / math.pi\r\n\r\n# Test cases\r\nassert degree_radian(90) == 5156.620156177409\r\nassert degree_radian(60) == 3437.746770784939\r\nassert degree_radian(120) == 6875.493541569878"], ["def decode_list(lst):\r\n    decoded_lst = []\r\n    for i in lst:\r\n        if type(i) == list:\r\n            decoded_lst.extend([i[1]] * i[0])\r\n        else:\r\n            decoded_lst.append(i)\r\n    return decoded_lst"], ["def check_subset_list(nested_list1, nested_list2):\r\n    for sublist in nested_list1:\r\n        if sublist not in nested_list2:\r\n            return False\r\n    return True"], ["def first_Repeated_Char(string):\r\n    char_count = {}\r\n    for char in string:\r\n        if char in char_count:\r\n            char_count[char] += 1\r\n        else:\r\n            char_count[char] = 1\r\n    for char in string:\r\n        if char_count[char] > 1:\r\n            return char\r\n    return '\\0'"], ["def min_Operations(num1, num2):\r\n    # Initialize variables\r\n    operations = 0\r\n    temp = 0\r\n    \r\n    # Find the difference between the two numbers\r\n    diff = abs(num1 - num2)\r\n    \r\n    # If the difference is 0, return 0\r\n    if diff == 0:\r\n        return 0\r\n    \r\n    # If the difference is odd, add 1 to the operations\r\n    if diff % 2 != 0:\r\n        operations += 1\r\n        diff -= 1\r\n    \r\n    # Find the maximum power of 2 that divides the difference\r\n    while diff > 0:\r\n        temp = diff\r\n        diff -= temp & 1\r\n        temp >>= 1\r\n        operations += temp\r\n    \r\n    return operations"], ["def extract_min_max(tup, k):\r\n    \"\"\"\r\n    Extracts the maximum and minimum k elements from the given tuple.\r\n    \"\"\"\r\n    if k > len(tup):\r\n        raise ValueError(\"k should be less than or equal to the length of the tuple.\")\r\n    \r\n    min_elements = sorted(tup)[:k]\r\n    max_elements = sorted(tup, reverse=True)[:k]\r\n    \r\n    return min_elements + max_elements"], ["def replace_max_specialchar(string, n):\r\n    special_chars = [' ', ',', '.']\r\n    for char in special_chars:\r\n        count = string.count(char)\r\n        if count > n:\r\n            string = string.replace(char, ':', count - n)\r\n    return string\r\n\r\n# Test cases\r\nassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\r\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\r\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"], ["def first_even(numbers):\r\n    for num in numbers:\r\n        if num % 2 == 0:\r\n            return num\r\n    return None"], ["def check_type(tup):\r\n    \"\"\"\r\n    This function takes a tuple as input and returns True if all the elements in the tuple have the same data type, else False.\r\n    \"\"\"\r\n    # Get the data type of the first element in the tuple\r\n    data_type = type(tup[0])\r\n    \r\n    # Check if all the elements in the tuple have the same data type as the first element\r\n    for i in range(1, len(tup)):\r\n        if type(tup[i]) != data_type:\r\n            return False\r\n    \r\n    # If all the elements have the same data type, return True\r\n    return True"], ["def is_majority(arr, n, majority_element):\r\n    count = 0\r\n    for i in range(n):\r\n        if arr[i] == majority_element:\r\n            count += 1\r\n    if count > n//2:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Test cases\r\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\r\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\r\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True"], ["def count_Set_Bits(num):\r\n    count = 0\r\n    while num:\r\n        count += num & 1\r\n        num >>= 1\r\n    return count"], ["def find_min(arr, start, end):\r\n    if start == end:\r\n        return arr[start]\r\n    \r\n    if arr[start] < arr[end]:\r\n        return arr[start]\r\n    \r\n    if arr[start] > arr[end]:\r\n        return find_min(arr, start+1, end-1)\r\n    \r\n    if arr[start] == arr[end]:\r\n        return find_min(arr, start+1, end)"], ["def odd_values_string(string):\r\n    result = \"\"\r\n    for i in range(len(string)):\r\n        if i % 2 == 0:\r\n            result += string[i]\r\n    return result"], ["def min_of_three(a, b, c):\r\n    if a <= b and a <= c:\r\n        return a\r\n    elif b <= a and b <= c:\r\n        return b\r\n    else:\r\n        return c"], ["def all_Bits_Set_In_The_Given_Range(start, end):\r\n    for i in range(start, end+1):\r\n        if bin(i).count('1') != 0:\r\n            return False\r\n    return True"], ["def re_arrange_array(arr, n):\r\n    neg = []\r\n    pos = []\r\n    for i in range(n):\r\n        if arr[i] < 0:\r\n            neg.append(arr[i])\r\n        else:\r\n            pos.append(arr[i])\r\n    return neg + pos\r\n\r\n# Test cases\r\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\r\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\r\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], ["def replace_blank(string, character):\r\n    return string.replace(\" \", character)"], ["def max_sum(triangle, n):\r\n    for i in range(n-1, 0, -1):\r\n        for j in range(i):\r\n            triangle[i-1][j] = max(triangle[i][j], triangle[i][j+1]) + triangle[i-1][j]\r\n    return triangle[0][0]\r\n\r\n# Test cases\r\nassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\r\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15\r\nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28"], ["def larg_nnum(data, n):\r\n    return sorted(data, reverse=True)[:n]"], ["import math\r\n\r\ndef lateralsuface_cylinder(radius, height):\r\n    return 2 * math.pi * radius * height\r\n\r\n# Test cases\r\nassert lateralsuface_cylinder(10,5)==314.150000000000003\r\nassert lateralsuface_cylinder(4,5)==125.66000000000001\r\nassert lateralsuface_cylinder(4,10)==251.32000000000002"], ["def volume_cube(side):\r\n    return side ** 3"], ["def even_bit_set_number(num):\r\n    # Initialize a variable to store the result\r\n    result = 0\r\n    \r\n    # Loop through each bit of the number\r\n    for i in range(32):\r\n        # Check if the bit is even\r\n        if num & (1 << i) != 0:\r\n            # If the bit is even, set the corresponding bit in the result\r\n            result |= (1 << i)\r\n    \r\n    return result"], ["def No_of_Triangle(side, height):\r\n    if side < 2 or height < 2:\r\n        return -1\r\n    else:\r\n        return (side - 2) * (height - 2)"], ["def check_occurences(tuples_list):\r\n    result = {}\r\n    for i in range(len(tuples_list)):\r\n        for j in range(i+1, len(tuples_list)):\r\n            if tuples_list[i][1] == tuples_list[j][1]:\r\n                result[(tuples_list[i][0], tuples_list[j][0])] = result.get((tuples_list[i][0], tuples_list[j][0]), 0) + 1\r\n    return result"], ["def number_of_substrings(s):\r\n    n = len(s)\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n+1):\r\n            if s[i:j] != '':\r\n                count += 1\r\n    return count"], ["def get_total_number_of_sequences(n, m):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return (m - 2) * get_total_number_of_sequences(n - 1, m)"], ["def replace_list(lst1, lst2):\r\n    lst1[-1] = lst2\r\n    return lst1"], ["def array_3d(rows, cols, depth):\r\n    return [[['*' for j in range(cols)] for i in range(rows)] for k in range(depth)]"], ["def count_charac(string):\r\n    return len(string)"], ["def sort_on_occurence(lst):\r\n    # Create a dictionary to store the count of each element\r\n    count_dict = {}\r\n    for tup in lst:\r\n        if tup[0] in count_dict:\r\n            count_dict[tup[0]] += 1\r\n        else:\r\n            count_dict[tup[0]] = 1\r\n    \r\n    # Sort the list based on the count of first element of tuples\r\n    sorted_lst = sorted(lst, key=lambda x: count_dict[x[0]])\r\n    \r\n    # Create a new list to store the sorted tuples\r\n    sorted_tuples = []\r\n    for tup in sorted_lst:\r\n        if tup[0] not in sorted_tuples:\r\n            sorted_tuples.append(tup[0])\r\n    \r\n    # Add the sorted tuples to the new list\r\n    for tup in sorted_lst:\r\n        if tup[0] == sorted_tuples[0]:\r\n            sorted_tuples[0] += (tup,)\r\n        elif tup[0] == sorted_tuples[1]:\r\n            sorted_tuples[1] += (tup,)\r\n    \r\n    return sorted_tuples"], ["def next_Perfect_Square(num):\r\n    # Find the next perfect square greater than num\r\n    next_square = num ** 2\r\n    while next_square <= num:\r\n        next_square += 1\r\n        next_square = next_square ** 2\r\n    return next_square"], ["def max_sum(arr, n):\r\n    # Initialize the dp array with zeros\r\n    dp = [0] * n\r\n    \r\n    # Initialize the maximum sum variable\r\n    max_sum = 0\r\n    \r\n    # Iterate through the array\r\n    for i in range(n):\r\n        # If the current element is greater than the previous element, add it to the maximum sum\r\n        if i == 0 or arr[i] > arr[i-1]:\r\n            dp[i] = arr[i]\r\n        else:\r\n            dp[i] = dp[i-1]\r\n        \r\n        # Update the maximum sum if the current sum is greater than the previous maximum sum\r\n        max_sum = max(max_sum, dp[i])\r\n    \r\n    # Initialize the second dp array with zeros\r\n    dp2 = [0] * n\r\n    \r\n    # Initialize the maximum sum variable\r\n    max_sum2 = 0\r\n    \r\n    # Iterate through the array in reverse order\r\n    for i in range(n-1, -1, -1):\r\n        # If the current element is greater than the next element, add it to the maximum sum\r\n        if i == n-1 or arr[i] > arr[i+1]:\r\n            dp2[i] = arr[i]\r\n        else:\r\n            dp2[i] = dp2[i+1]\r\n        \r\n        # Update the maximum sum if the current sum is greater than the previous maximum sum\r\n        max_sum2 = max(max_sum2, dp2[i])\r\n    \r\n    # Return the maximum sum of the two bi-tonic sub-sequences\r\n    return max(max_sum, max_sum2)"], ["def babylonian_squareroot(n):\r\n    x = n / 2\r\n    while True:\r\n        y = (x + n / x) / 2\r\n        if y == x:\r\n            return y\r\n        x = y"], ["def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9"], ["def harmonic_sum(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        sum += 1/i\r\n    return sum\r\n\r\n# Test cases\r\nassert harmonic_sum(7) == 2.5928571428571425\r\nassert harmonic_sum(4) == 2.083333333333333\r\nassert harmonic_sum(19) == 3.547739657143682"], ["def intersection_array(arr1, arr2):\r\n    return list(set(arr1) & set(arr2))\r\n\r\n# Test cases\r\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\r\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\r\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], ["def count_X(tup, X):\r\n    count = 0\r\n    for element in tup:\r\n        if element == X:\r\n            count += 1\r\n    return count"], ["def insert_element(lst, element):\r\n    new_lst = []\r\n    for i in range(len(lst)):\r\n        new_lst.append(element)\r\n        new_lst.append(lst[i])\r\n    return new_lst"], ["import cmath\r\n\r\ndef convert(num):\r\n    return (abs(num), cmath.phase(num))"], ["def count_integer(lst):\r\n    count = 0\r\n    for i in lst:\r\n        if type(i) == int:\r\n            count += 1\r\n    return count"], ["def words_ae(string):\r\n    words = string.split()\r\n    ae_words = []\r\n    for word in words:\r\n        if word[0] == 'a' or word[0] == 'e':\r\n            ae_words.append(word)\r\n    return ae_words"], ["from itertools import product\r\n\r\ndef combinations_colors(colors, num_colors):\r\n    return [tuple(color for _ in range(num_colors)) for color in colors]\r\n\r\ndef generate_combinations(colors, num_colors):\r\n    return list(product(combinations_colors(colors, num_colors)))\r\n\r\n# Test cases\r\nassert generate_combinations([\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\r\nassert generate_combinations([\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\r\nassert generate_combinations([\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], ["def count_Primes_nums(n):\r\n    count = 0\r\n    for i in range(2, n):\r\n        if all(i % j != 0 for j in range(2, i)):\r\n            count += 1\r\n    return count"], ["def swap_numbers(a, b):\r\n    return b, a"], ["def count_odd(lst):\r\n    return len(list(filter(lambda x: x%2!=0, lst)))\r\n\r\n# Test cases\r\nassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\r\nassert count_odd([10,15,14,13,-18,12,-20])==2\r\nassert count_odd([1, 2, 4, 8, 9])==2"], ["def maximize_elements(tuples_list):\r\n    max_tuples = []\r\n    for i in range(len(tuples_list)):\r\n        max_tuples.append(max(tuples_list[i], key=lambda x: x[1]))\r\n    return max_tuples\r\n\r\n# Test cases\r\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\r\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\r\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], ["import math\r\n\r\ndef newman_prime(n):\r\n    if n < 1:\r\n        return None\r\n    \r\n    # Initialize variables\r\n    k = 1\r\n    q = 1\r\n    p = 3\r\n    \r\n    # Loop until we find the nth prime number\r\n    while k < n:\r\n        # Generate the next candidate prime number\r\n        p += 2\r\n        while not is_prime(p):\r\n            p += 2\r\n        \r\n        # Check if the candidate prime number is a Newman-Shanks-Williams prime\r\n        if is_newman_prime(p, q):\r\n            k += 1\r\n            if k == n:\r\n                return p\r\n            \r\n        # Update the q value\r\n        q = p\r\n    \r\n    # If we reach here, we didn't find the nth prime number\r\n    return None\r\n\r\ndef is_prime(n):\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(math.sqrt(n))+1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\ndef is_newman_prime(p, q):\r\n    # Check if p is a Newman-Shanks-Williams prime\r\n    if p % 4 == 3:\r\n        return False\r\n    \r\n    # Check if p is a Newman-Shanks-Williams prime using the q value\r\n    if p % (2*q) == 1:\r\n        return False\r\n    \r\n    # Check if p is a Newman-Shanks-Williams prime using the q value and the next odd number\r\n    if p % (2*q+2) == 1:\r\n        return False\r\n    \r\n    # If we reach here, p is a Newman-Shanks-Williams prime\r\n    return True"], ["def division_elements(tuple1, tuple2):\r\n    result = []\r\n    for i in range(len(tuple1)):\r\n        result.append(tuple1[i] // tuple2[i])\r\n    return tuple(result)"], ["def split_two_parts(lst, n):\r\n    \"\"\"\r\n    Splits a given list into two parts where the length of the first part of the list is given.\r\n    \r\n    Args:\r\n    lst: A list of elements.\r\n    n: An integer representing the length of the first part of the list.\r\n    \r\n    Returns:\r\n    A tuple containing two lists: the first list containing the first n elements of the input list, and the second list containing the remaining elements of the input list.\r\n    \r\n    Examples:\r\n    assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\r\n    assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\r\n    assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\r\n    \"\"\"\r\n    return lst[:n], lst[n:]"], ["def merge_dict(dict1, dict2):\r\n    \"\"\"\r\n    Merge two dictionaries.\r\n    \"\"\"\r\n    result = dict1.copy()\r\n    result.update(dict2)\r\n    return result"], ["def dog_age(human_age):\r\n    return human_age * 7\r\n\r\n# Test cases\r\nassert dog_age(12) == 61\r\nassert dog_age(15) == 73\r\nassert dog_age(24) == 109"], ["def list_split(lst, n):\r\n    \"\"\"\r\n    Splits a list for every nth element.\r\n    \"\"\"\r\n    result = []\r\n    for i in range(0, len(lst), n):\r\n        result.append(lst[i:i+n])\r\n    return result\r\n\r\n# Test cases\r\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\r\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\r\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"], ["def lateralsurface_cube(side):\r\n    return 6 * side ** 2\r\n\r\n# Test cases\r\nassert lateralsurface_cube(5) == 100\r\nassert lateralsurface_cube(9) == 324\r\nassert lateralsurface_cube(10) == 400"], ["def square_Sum(n):\r\n    sum = 0\r\n    for i in range(1, 2*n, 2):\r\n        sum += i**2\r\n    return sum"], ["def find_star_num(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return 2 * find_star_num(n-1) + 1"], ["def ascii_value(char):\r\n    return ord(char)"], ["def sum_even_and_even_index(lst, n):\r\n    \"\"\"\r\n    This function takes a list and a number n as input and returns the sum of even numbers at even positions.\r\n    \"\"\"\r\n    even_sum = 0\r\n    for i in range(0, n, 2):\r\n        if lst[i] % 2 == 0:\r\n            even_sum += lst[i]\r\n    return even_sum"], ["def even_Power_Sum(n):\r\n    sum = 0\r\n    for i in range(2, 2*n+1, 2):\r\n        sum += i**5\r\n    return sum"], ["def rear_extract(records):\r\n    return [record[-1] for record in records]\r\n\r\n# Test cases\r\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\r\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\r\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], ["def substract_elements(tuple1, tuple2):\r\n    result = []\r\n    for i in range(len(tuple1)):\r\n        result.append(tuple1[i] - tuple2[i])\r\n    return tuple(result)\r\n\r\n# Test cases\r\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\r\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\r\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], ["def even_binomial_Coeff_Sum(n):\r\n    sum = 0\r\n    for i in range(0, n+1, 2):\r\n        sum += binomial_coefficient(n, i)\r\n    return sum\r\n\r\ndef binomial_coefficient(n, k):\r\n    if k == 0 or k == n:\r\n        return 1\r\n    else:\r\n        return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)"], ["def get_Position(arr, last_removed, index):\r\n    if index == 0:\r\n        return arr.index(last_removed)\r\n    else:\r\n        return arr.index(last_removed) + index"], ["def volume_cylinder(radius, height):\r\n    \"\"\"\r\n    Calculates the volume of a cylinder.\r\n    \r\n    Args:\r\n    radius (float): The radius of the cylinder.\r\n    height (float): The height of the cylinder.\r\n    \r\n    Returns:\r\n    float: The volume of the cylinder.\r\n    \"\"\"\r\n    return 3.14159 * radius**2 * height"], ["def dict_filter(d, value):\r\n    return {k: v for k, v in d.items() if v >= value}"], ["def count_first_elements(tup):\r\n    count = 0\r\n    for i in tup:\r\n        if type(i) == tuple:\r\n            count += 1\r\n        else:\r\n            break\r\n    return count"], ["def is_num_decagonal(n):\r\n    return (n * (n * n - 1)) // 2\r\n\r\n# Test cases\r\nassert is_num_decagonal(3) == 27\r\nassert is_num_decagonal(7) == 175\r\nassert is_num_decagonal(10) == 370"], ["def sequential_search(arr, x):\r\n    \"\"\"\r\n    Searches for an element x in the given array using sequential search.\r\n    Returns a tuple containing a boolean value indicating whether the element was found and its index if found.\r\n    \"\"\"\r\n    for i in range(len(arr)):\r\n        if arr[i] == x:\r\n            return (True, i)\r\n    return (False, -1)"], ["def all_unique(lst):\r\n    return len(lst) == len(set(lst))"], ["def sub_list(list1, list2):\r\n    return list(map(lambda x, y: x - y, list1, list2))"], ["def validate(num):\r\n    num_str = str(num)\r\n    for digit in num_str:\r\n        if num_str.count(digit) > int(digit):\r\n            return False\r\n    return True"], ["def check_element(lst, element):\r\n    \"\"\"\r\n    This function takes a list and an element as input and returns True if all the elements of the list are equal to the given element, else False.\r\n    \"\"\"\r\n    return all(elem == element for elem in lst)"], ["def text_match_two_three(string):\r\n    if string[0] == 'a' and len(string) >= 4 and string[1:4] == 'bbb':\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'"], ["def max_sub_array_sum_repeated(arr, k, n):\r\n    # Repeat the array k times\r\n    modified_arr = arr * k\r\n    \r\n    # Initialize variables to store the maximum sum and the current sum\r\n    max_sum = float('-inf')\r\n    curr_sum = 0\r\n    \r\n    # Iterate through the modified array\r\n    for i in range(n):\r\n        # Add the current element to the current sum\r\n        curr_sum += modified_arr[i]\r\n        \r\n        # If the current sum is greater than the maximum sum, update the maximum sum\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n            \r\n        # If the current sum is negative, reset the current sum to 0\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n            \r\n    return max_sum"], ["def square_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1, 2):\r\n        sum += i*i\r\n    return sum"], ["def modular_inverse(arr, p, mod):\r\n    count = 0\r\n    for i in arr:\r\n        if pow(i, p-2, mod) == 1:\r\n            count += 1\r\n    return count\r\n\r\n# Test cases\r\nassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\r\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\r\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1"], ["def odd_Days(year):\r\n    # Calculate the number of leap years in the given year\r\n    leap_years = year // 4 - year // 100 + year // 400\r\n    \r\n    # Calculate the number of days in the given year\r\n    days = 365 + leap_years\r\n    \r\n    # Calculate the number of odd days in the given year\r\n    odd_days = days // 2\r\n    \r\n    return odd_days"], ["def max_length(lst):\r\n    max_len = 0\r\n    max_lst = []\r\n    for sub_lst in lst:\r\n        if len(sub_lst) > max_len:\r\n            max_len = len(sub_lst)\r\n            max_lst = sub_lst\r\n    return max_len, max_lst"], ["def count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        for j in range(1, i):\n            for color in range(1, k + 1):\n                if j == 1 or dp[j - 1] != color or dp[j] != color:\n                    dp[i] += dp[j - 1]\n\n    return dp[n]\n\n# Test cases\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228"], ["def find(num1, num2):\r\n    return num1 // num2"], ["import math\r\n\r\ndef otherside_rightangle(a, b):\r\n    c = math.sqrt(a**2 + b**2)\r\n    return round(c, 2)\r\n\r\n# Test cases\r\nassert otherside_rightangle(7,8)==10.63\r\nassert otherside_rightangle(3,4)==5\r\nassert otherside_rightangle(7,15)==16.55"], ["def max_val(lst):\r\n    max_val = lst[0]\r\n    for i in lst:\r\n        if type(i) == int and i > max_val:\r\n            max_val = i\r\n    return max_val"], ["def sum_div(n):\r\n    \"\"\"\r\n    Returns the sum of all divisors of a number n.\r\n    \"\"\"\r\n    # Initialize the sum to 0\r\n    sum = 0\r\n    \r\n    # Loop through all numbers from 1 to n\r\n    for i in range(1, n+1):\r\n        # Check if i is a divisor of n\r\n        if n % i == 0:\r\n            # Add i to the sum\r\n            sum += i\r\n    \r\n    # Return the sum\r\n    return sum"], ["def get_Inv_Count(arr, n):\r\n    inv_count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n):\r\n            if arr[i] > arr[j]:\r\n                inv_count += 1\r\n    return inv_count"], ["def flatten_list(lst):\r\n    \"\"\"\r\n    Flatten a nested list structure.\r\n    \"\"\"\r\n    result = []\r\n    for item in lst:\r\n        if isinstance(item, list):\r\n            result.extend(flatten_list(item))\r\n        else:\r\n            result.append(item)\r\n    return result"], ["def intersection_nested_lists(list1, list2):\r\n    result = []\r\n    for sublist in list1:\r\n        if sublist in list2:\r\n            result.append(sublist)\r\n    return result\r\n\r\n# Test cases\r\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\r\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\r\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"], ["def max_aggregate(tuples_list):\r\n    max_name = ''\r\n    max_score = 0\r\n    for name, score in tuples_list:\r\n        if score > max_score:\r\n            max_name = name\r\n            max_score = score\r\n    return (max_name, max_score)"], ["def count_binary_seq(n):\r\n    count = 0\r\n    for i in range(2**n):\r\n        binary_str = bin(i)[2:].zfill(n)\r\n        if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[n:]):\r\n            count += 1\r\n    return count / 2**n"], ["def dict_depth(d):\r\n    if not isinstance(d, dict):\r\n        return 0\r\n    else:\r\n        return 1 + max(dict_depth(v) for v in d.values())"], ["def set_Bit_Number(n):\r\n    msb = 0\r\n    while n > 0:\r\n        msb = msb + 1\r\n        n = n >> 1\r\n        if n & 1 == 1:\r\n            return msb"], ["def solve(arr, n):\r\n    count = [0] * n\r\n    for i in range(n):\r\n        count[arr[i]] += 1\r\n    \r\n    type1 = type2 = 0\r\n    for i in range(n):\r\n        if arr[i] == 0:\r\n            type1 += 1\r\n        elif arr[i] == 1:\r\n            type2 += 1\r\n    \r\n    return count[0] == type1 and count[1] == type2"], ["def find_Element(arr, rotations, index, n):\r\n    for i in range(n):\r\n        arr = arr[-rotations[i][1]:] + arr[:-rotations[i][1]]\r\n    return arr[index]"], ["def start_withp(words):\r\n    for word in words:\r\n        if word[0].lower() == 'p':\r\n            if len(word.split()) == 2:\r\n                return (word.split()[0], word.split()[1])\r\n    return None\r\n\r\n# Test cases\r\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\r\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\r\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst', 'Pqr')"], ["def max_sum_increasing_subseq(arr, i, k, x):\r\n    n = len(arr)\r\n    if i >= n or k >= n or i >= k:\r\n        return 0\r\n    \r\n    # Initialize dp array with all zeros\r\n    dp = [0] * n\r\n    \r\n    # Initialize max_sum with first element of arr\r\n    max_sum = arr[0]\r\n    \r\n    # Initialize max_sum_ending_at_i with first element of arr\r\n    max_sum_ending_at_i = arr[0]\r\n    \r\n    # Loop through the array from index 1 to i\r\n    for j in range(1, i+1):\r\n        # If the current element is greater than the previous element, update max_sum_ending_at_i\r\n        if arr[j] > arr[j-1]:\r\n            max_sum_ending_at_i += arr[j]\r\n        else:\r\n            max_sum_ending_at_i = arr[j]\r\n        \r\n        # Update dp array with max_sum_ending_at_i\r\n        dp[j] = max_sum_ending_at_i\r\n        \r\n        # Update max_sum with max_sum_ending_at_i\r\n        if max_sum_ending_at_i > max_sum:\r\n            max_sum = max_sum_ending_at_i\r\n    \r\n    # Loop through the array from index i+1 to k\r\n    for j in range(i+1, k+1):\r\n        # If the current element is greater than the previous element, update max_sum_ending_at_i\r\n        if arr[j] > arr[j-1]:\r\n            max_sum_ending_at_i += arr[j]\r\n        else:\r\n            max_sum_ending_at_i = arr[j]\r\n        \r\n        # Update dp array with max_sum_ending_at_i\r\n        dp[j] = max_sum_ending_at_i\r\n        \r\n        # Update max_sum with max_sum_ending_at_i\r\n        if max_sum_ending_at_i > max_sum:\r\n            max_sum = max_sum_ending_at_i\r\n    \r\n    # Add x to max_sum\r\n    max_sum += x\r\n    \r\n    # Return max_sum\r\n    return max_sum"], ["def colon_tuplex(tup, index, value):\r\n    new_tup = list(tup)\r\n    new_tup[index] = value\r\n    return tuple(new_tup)\r\n\r\n# Test cases\r\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\r\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\r\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], ["def large_product(list1, list2, n):\r\n    \"\"\"\r\n    This function takes two lists and an integer n as input and returns the n largest products of pairs of elements from the two lists.\r\n    \"\"\"\r\n    # Sort the two lists in descending order\r\n    list1.sort(reverse=True)\r\n    list2.sort(reverse=True)\r\n    \r\n    # Initialize an empty list to store the products\r\n    products = []\r\n    \r\n    # Iterate through the two lists and multiply the pairs of elements\r\n    for i in range(n):\r\n        product = list1[i] * list2[i]\r\n        products.append(product)\r\n    \r\n    return products"], ["def maximum(a, b):\r\n    if a > b:\r\n        return a\r\n    else:\r\n        return b"], ["def string_to_tuple(string):\r\n    return tuple(string)\r\n\r\n# Test cases\r\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\r\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\r\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"], ["def set_left_most_unset_bit(num):\r\n    \"\"\"\r\n    Returns the number with the left most unset bit set.\r\n    \"\"\"\r\n    return num | (num - 1)"], ["import math\r\n\r\ndef volume_cone(radius, height):\r\n    return (1/3) * math.pi * radius**2 * height\r\n\r\n# Test cases\r\nassert volume_cone(5,12)==314.15926535897927\r\nassert volume_cone(10,15)==1570.7963267948965\r\nassert volume_cone(19,17)==6426.651371693521"], ["def pos_nos(lst):\r\n    pos_lst = []\r\n    for num in lst:\r\n        if num > 0:\r\n            pos_lst.append(num)\r\n    return ','.join(str(num) for num in pos_lst)"], ["def max_sum_rectangular_grid(grid, n):\r\n    # Initialize the maximum sum and the current sum\r\n    max_sum = 0\r\n    curr_sum = 0\r\n    \r\n    # Iterate through the grid\r\n    for i in range(n):\r\n        for j in range(n):\r\n            # If the current element is not adjacent to the previous element\r\n            if j == 0 or grid[i][j] != grid[i][j-1]:\r\n                # Add the current element to the current sum\r\n                curr_sum += grid[i][j]\r\n            # If the current element is adjacent to the previous element\r\n            else:\r\n                # Update the maximum sum if the current sum is greater than the maximum sum\r\n                max_sum = max(max_sum, curr_sum)\r\n                # Reset the current sum\r\n                curr_sum = 0\r\n    \r\n    # Update the maximum sum if the current sum is greater than the maximum sum\r\n    max_sum = max(max_sum, curr_sum)\r\n    \r\n    return max_sum"], ["def find_Max_Len_Even(sentence):\r\n    words = sentence.split()\r\n    max_len = -1\r\n    max_word = \"\"\r\n    for word in words:\r\n        if len(word) % 2 == 0 and len(word) > max_len:\r\n            max_len = len(word)\r\n            max_word = word\r\n    return max_word if max_len > 0 else \"-1\""], ["def find_last_occurrence(arr, num):\r\n    \"\"\"\r\n    Find the index of the last occurrence of a given number in a sorted array.\r\n    \"\"\"\r\n    left, right = 0, len(arr) - 1\r\n    result = -1\r\n    \r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == num:\r\n            result = mid\r\n            left = mid + 1\r\n        elif arr[mid] < num:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n    \r\n    return result"], ["def modified_encode(lst):\r\n    if not lst:\r\n        return []\r\n    result = []\r\n    count = 1\r\n    for i in range(1, len(lst)):\r\n        if lst[i] == lst[i-1]:\r\n            count += 1\r\n        else:\r\n            if count > 1:\r\n                result.append([count, lst[i-1]])\r\n            else:\r\n                result.append(lst[i-1])\r\n            count = 1\r\n    if count > 1:\r\n        result.append([count, lst[-1]])\r\n    else:\r\n        result.append(lst[-1])\r\n    return result"], ["def max_volume(sum_of_sides):\r\n    max_volume = 0\r\n    for i in range(1, sum_of_sides):\r\n        for j in range(i, sum_of_sides - i):\r\n            k = sum_of_sides - i - j\r\n            if i <= k and k <= j:\r\n                volume = i * j * k\r\n                if volume > max_volume:\r\n                    max_volume = volume\r\n    return max_volume"], ["import re\r\n\r\ndef find_long_word(string):\r\n    pattern = r'\\b\\w{5}\\b'\r\n    words = re.findall(pattern, string)\r\n    return words"], ["def sum_difference(n):\r\n    sum_squares = sum([i**2 for i in range(1, n+1)])\r\n    squares_sum = sum([i for i in range(1, n+1)])**2\r\n    return squares_sum - sum_squares"], ["def find_demlo(num):\r\n    n = len(num)\r\n    demlo = \"\"\r\n    for i in range(n):\r\n        demlo += str(n - i) + num[i]\r\n    return demlo[::-1]\r\n\r\n# Test cases\r\nassert find_demlo(\"111111\") == '12345654321'\r\nassert find_demlo(\"1111\") == '1234321'\r\nassert find_demlo(\"13333122222\") == '123456789101110987654321'"], ["def position_min(lst):\r\n    min_val = min(lst)\r\n    positions = [i for i, x in enumerate(lst) if x == min_val]\r\n    return positions"], ["def re_arrange(arr, n):\r\n    # Initialize two pointers, one for positive and one for negative items\r\n    pos = 0\r\n    neg = 1\r\n    \r\n    # Loop through the array and swap items based on their sign\r\n    while neg < n:\r\n        if arr[pos] < 0 and arr[neg] > 0:\r\n            arr[pos], arr[neg] = arr[neg], arr[pos]\r\n            pos += 2\r\n            neg += 2\r\n        elif arr[pos] >= 0:\r\n            pos += 1\r\n        elif arr[neg] <= 0:\r\n            neg += 1\r\n    \r\n    return arr"], ["def sum_of_alternates(lst):\r\n    \"\"\"\r\n    This function takes a list of tuples as input and returns the sum of alternate chains of tuples.\r\n    \"\"\"\r\n    if len(lst) % 2 == 0:\r\n        return (sum(lst[::2]), sum(lst[1::2]))\r\n    else:\r\n        return (sum(lst[::2]), sum(lst[1::2]) + lst[-1])\r\n\r\n# Test cases\r\nassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\r\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\r\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"], ["def get_Min_Squares(n):\r\n    count = 0\r\n    i = 1\r\n    while i * i <= n:\r\n        count += n // (i * i)\r\n        i += 1\r\n    return count"], ["def most_occurrences(strings_list):\r\n    word_count = {}\r\n    for string in strings_list:\r\n        words = string.split()\r\n        for word in words:\r\n            if word in word_count:\r\n                word_count[word] += 1\r\n            else:\r\n                word_count[word] = 1\r\n    max_count = 0\r\n    max_word = \"\"\r\n    for word, count in word_count.items():\r\n        if count > max_count:\r\n            max_count = count\r\n            max_word = word\r\n    return max_word"], ["def check_isosceles(a, b, c):\r\n    if a == b == c:\r\n        return True\r\n    elif a == b or b == c or c == a:\r\n        return True\r\n    else:\r\n        return False"], ["def rotate_left(lst, n, k):\r\n    \"\"\"\r\n    Rotate a given list by specified number of items to the left direction.\r\n    \r\n    Args:\r\n    lst: list to be rotated\r\n    n: number of items to be rotated\r\n    k: number of times to rotate the list\r\n    \r\n    Returns:\r\n    Rotated list\r\n    \"\"\"\r\n    if n > len(lst):\r\n        n = len(lst)\r\n    if k > 0:\r\n        return lst[n:] + lst[:n] * k\r\n    else:\r\n        return lst\r\n\r\n# Test cases\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"], ["def neg_count(lst):\r\n    count = 0\r\n    for num in lst:\r\n        if num < 0:\r\n            count += 1\r\n    return count"], ["import re\r\n\r\ndef find_char(string):\r\n    words = re.findall(r'\\b\\w{3,5}\\b', string)\r\n    return words"], ["def count_unset_bits(num):\r\n    count = 0\r\n    while num:\r\n        count += num & 1\r\n        num >>= 1\r\n    return count"], ["def char_frequency(string):\r\n    freq = {}\r\n    for char in string:\r\n        if char in freq:\r\n            freq[char] += 1\r\n        else:\r\n            freq[char] = 1\r\n    return freq"], ["def Sort(lst):\r\n    return sorted(lst, key=lambda x: x[1])"], ["def check_Validity(a, b, c):\r\n    if a + b > c and a + c > b and b + c > a:\r\n        return True\r\n    else:\r\n        return False"], ["def ap_sum(a, b, c):\r\n    n = (b-a)//c\r\n    sum = (a+b)//2 + n*(a+b)\r\n    return sum"], ["def check_monthnum(month):\r\n    if month == \"February\":\r\n        return True\r\n    elif month == \"April\" or month == \"June\" or month == \"September\" or month == \"November\":\r\n        return True\r\n    else:\r\n        return False"], ["import re\r\n\r\ndef text_match_word(string):\r\n    pattern = r\"(?i)\\bpython\\b\\s*[\\.,;:?!]*$\"\r\n    match = re.search(pattern, string)\r\n    if match:\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'\r\n\r\n# Test cases\r\nprint(text_match_word(\"python.\")) # Found a match!\r\nprint(text_match_word(\"python.\")) # Found a match!\r\nprint(text_match_word(\"  lang  .\")) # Not matched!"], ["def count_Substring_With_Equal_Ends(s):\r\n    n = len(s)\r\n    count = 0\r\n    for i in range(n):\r\n        for j in range(i+1, n+1):\r\n            if s[i] == s[j-1]:\r\n                count += 1\r\n    return count"], ["def find_Divisor(start, end):\r\n    max_divisor = 0\r\n    for i in range(start, end+1):\r\n        for j in range(2, i):\r\n            if i % j == 0:\r\n                max_divisor = max(max_divisor, j)\r\n    return max_divisor"], ["def sum_three_smallest_nums(nums):\r\n    # Remove all non-positive numbers from the list\r\n    nums = [num for num in nums if num > 0]\r\n    \r\n    # Sort the list in ascending order\r\n    nums.sort()\r\n    \r\n    # Return the sum of the first three numbers in the list\r\n    return sum(nums[:3])"], ["def set_to_tuple(s):\r\n    return tuple(sorted(s))\r\n\r\n# Test cases\r\nassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\r\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\r\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"], ["def find_minimum_range(arrays):\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    for array in arrays:\n        for num in array:\n            if num < min_val:\n                min_val = num\n            if num > max_val:\n                max_val = num\n\n    return (min_val, max_val)\n\n# Test cases\nassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"], ["def dig_let(string):\r\n    num_digits = 0\r\n    num_letters = 0\r\n    for char in string:\r\n        if char.isdigit():\r\n            num_digits += 1\r\n        elif char.isalpha():\r\n            num_letters += 1\r\n    return (num_digits, num_letters)"], ["def count_Odd_Squares(start, end):\r\n    count = 0\r\n    for i in range(start, end+1):\r\n        if len(set(range(1, int(i**0.5)+1)) & set(range(1, int(i**0.5)+1, 2))) % 2 == 1:\r\n            count += 1\r\n    return count"], ["def diff_consecutivenums(lst):\r\n    diff_lst = []\r\n    for i in range(len(lst)-1):\r\n        diff_lst.append(lst[i+1] - lst[i])\r\n    return diff_lst\r\n\r\n# Test cases\r\nassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\r\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\r\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"], ["def zigzag(n, k):\r\n    if k == 1:\r\n        return 1\r\n    elif k > n:\r\n        return n\r\n    else:\r\n        return n - k + 2"], ["def count_Squares(width, height):\r\n    return width * height"], ["def find_ways(n):\r\n    # Initialize a list to store the prefix sums\r\n    prefix_sums = [0]\r\n    \r\n    # Iterate through the values and add them to the prefix sums list\r\n    for i in range(1, n+1):\r\n        prefix_sums.append(prefix_sums[-1] + i)\r\n    \r\n    # Initialize a dictionary to store the number of ways for each prefix sum\r\n    ways = {0: 1}\r\n    \r\n    # Iterate through the prefix sums and count the number of ways for each prefix sum\r\n    for i in range(1, len(prefix_sums)):\r\n        for j in range(i):\r\n            if prefix_sums[i] - prefix_sums[j] in ways:\r\n                ways[prefix_sums[i]] = ways[prefix_sums[i]] + ways[prefix_sums[i] - prefix_sums[j]]\r\n    \r\n    # Return the number of ways for the given prefix sum\r\n    return ways[n]"], ["def check(string):\r\n    for char in string:\r\n        if char != '0' and char != '1':\r\n            return \"No\"\r\n    return \"Yes\""], ["def minimum_Length(s):\r\n    freq = {}\r\n    for char in s:\r\n        if char in freq:\r\n            freq[char] += 1\r\n        else:\r\n            freq[char] = 1\r\n    \r\n    min_len = len(s)\r\n    for char in freq:\r\n        if freq[char] == 1:\r\n            min_len = min(min_len, len(s) - freq[char])\r\n    \r\n    return min_len"], ["def first_Element(arr, k, n):\r\n    count = {}\r\n    for i in range(n):\r\n        if arr[i] in count:\r\n            count[arr[i]] += 1\r\n        else:\r\n            count[arr[i]] = 1\r\n    for i in range(n):\r\n        if count[arr[i]] == k:\r\n            return arr[i]\r\n    return None"], ["def unique_Characters(string):\r\n    # Create an empty set to store unique characters\r\n    unique_set = set()\r\n    \r\n    # Loop through each character in the string\r\n    for char in string:\r\n        # If the character is already in the set, return False\r\n        if char in unique_set:\r\n            return False\r\n        # Otherwise, add the character to the set\r\n        else:\r\n            unique_set.add(char)\r\n    \r\n    # If all characters are unique, return True\r\n    return True"], ["def remove_column(nested_list, column_index):\r\n    \"\"\"\r\n    Removes a specified column from a given nested list.\r\n    \"\"\"\r\n    return [[row[i] for i in range(len(row)) if i != column_index] for row in nested_list]"], ["def tn_ap(a, l, t):\r\n    n = t - 1\r\n    return a + (n * l)\r\n\r\n# Test cases\r\nassert tn_ap(1,5,2)==9\r\nassert tn_ap(2,6,4)==22\r\nassert tn_ap(1,4,5)==16"], ["import math\r\n\r\ndef count_Rectangles(r):\r\n    if r == 0:\r\n        return 0\r\n    else:\r\n        return int(math.pi * r**2 / 2)"], ["def find_angle(angle1, angle2):\r\n    angle3 = 180 - (angle1 + angle2)\r\n    return angle3\r\n\r\n# Test cases\r\nassert find_angle(47, 89) == 44\r\nassert find_angle(45, 95) == 40\r\nassert find_angle(50, 40) == 90"], ["def find_max(records):\r\n    max_val = records[0][1]\r\n    for record in records:\r\n        if record[1] > max_val:\r\n            max_val = record[1]\r\n    return max_val"], ["def moddiv_list(list1, list2):\r\n    return list(map(lambda x: x[0] % x[1], zip(list1, list2)))"], ["def Check_Solution(a, b, c):\r\n    if a == 0:\r\n        return \"No\"\r\n    else:\r\n        D = b**2 - 4*a*c\r\n        if D < 0:\r\n            return \"No\"\r\n        else:\r\n            x1 = (-b + D**0.5) / (2*a)\r\n            x2 = (-b - D**0.5) / (2*a)\r\n            if x1 == 2*x2:\r\n                return \"Yes\"\r\n            else:\r\n                return \"No\""], ["def get_carol(n):\r\n    if n == 1:\r\n        return 1\r\n    else:\r\n        return 2 * get_carol(n-1) + 1"], ["def remove_empty(lst):\r\n    return [x for x in lst if x != []]"], ["def max_occurrences(lst):\r\n    from collections import Counter\r\n    c = Counter(lst)\r\n    max_count = max(c.values())\r\n    max_items = [k for k, v in c.items() if v == max_count]\r\n    return max_items"], ["def add_K_element(tup, k):\r\n    \"\"\"\r\n    Adds k to each element in the tuple.\r\n    \"\"\"\r\n    return [(x + k) for x in tup]\r\n\r\n# Test cases\r\nassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\r\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\r\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"], ["def min_flip_to_make_string_alternate(s):\r\n    count = 0\r\n    for i in range(len(s)):\r\n        if i % 2 == 0 and s[i] == '1':\r\n            count += 1\r\n        elif i % 2 == 1 and s[i] == '0':\r\n            count += 1\r\n    return count"], ["def count_Digit(num):\r\n    count = 0\r\n    while num > 0:\r\n        count += 1\r\n        num //= 10\r\n    return count"], ["def adjacent_num_product(lst):\r\n    if len(lst) < 2:\r\n        return None\r\n    else:\r\n        largest_product = lst[0] * lst[1]\r\n        for i in range(1, len(lst)-1):\r\n            product = lst[i] * lst[i+1]\r\n            if product > largest_product:\r\n                largest_product = product\r\n        return largest_product"], ["class TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\n\r\ndef is_tree_balanced(root: TreeNode) -> bool:\r\n    def height(node: TreeNode) -> int:\r\n        if not node:\r\n            return 0\r\n        \r\n        left_height = height(node.left)\r\n        right_height = height(node.right)\r\n        \r\n        if left_height == -1 or right_height == -1:\r\n            return -1\r\n        \r\n        return max(left_height, right_height) + 1\r\n    \r\n    return height(root) != -1"], ["def repeat_tuples(tup, n):\r\n    return tup * n\r\n\r\n# Test cases\r\nassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\r\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\r\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"], ["def lateralsurface_cuboid(length, width, height):\r\n    return 2 * (length * width + width * height + height * length)\r\n\r\n# Test cases\r\nassert lateralsurface_cuboid(8,5,6)==156\r\nassert lateralsurface_cuboid(7,9,10)==320\r\nassert lateralsurface_cuboid(10,20,30)==1800"], ["def float_sort(tup):\r\n    return sorted(tup, key=lambda x: float(x[1]))\r\n\r\n# Test cases\r\nassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\r\nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')]\r\nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')]"], ["def smallest_missing(arr, start, end):\r\n    if start > end:\r\n        return None\r\n    \r\n    if arr[start] != start:\r\n        return start\r\n    \r\n    if arr[end] != end:\r\n        return end\r\n    \r\n    mid = (start + end) // 2\r\n    \r\n    if arr[mid] == mid:\r\n        return smallest_missing(arr, mid+1, end)\r\n    elif arr[mid] > mid:\r\n        return smallest_missing(arr, start, mid-1)\r\n    else:\r\n        return smallest_missing(arr, mid+1, end)"], ["import heapq\r\n\r\ndef heap_assending(lst):\r\n    heapq.heapify(lst)\r\n    return [heapq.heappop(lst) for i in range(len(lst))]\r\n\r\n# Test cases\r\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\r\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\r\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"], ["def volume_cuboid(length, width, height):\r\n    return length * width * height\r\n\r\n# Test cases\r\nassert volume_cuboid(1,2,3) == 6\r\nassert volume_cuboid(5,7,9) == 315\r\nassert volume_cuboid(10,15,21) == 3150"], ["def permute_string(s):\r\n    if len(s) == 0:\r\n        return []\r\n    if len(s) == 1:\r\n        return [s]\r\n    result = []\r\n    for i in range(len(s)):\r\n        c = s[i]\r\n        remaining = s[:i] + s[i+1:]\r\n        for p in permute_string(remaining):\r\n            result.append(c + p)\r\n    return result"], ["def round_num(num, multiple):\r\n    return multiple * round(num/multiple)\r\n\r\n# Test cases\r\nassert round_num(4722,10)==4720\r\nassert round_num(1111,5)==1110\r\nassert round_num(219,2)==218"], ["def remove_replica(tup):\r\n    # Create a dictionary to store the count of each element in the tuple\r\n    count_dict = {}\r\n    for elem in tup:\r\n        if elem in count_dict:\r\n            count_dict[elem] += 1\r\n        else:\r\n            count_dict[elem] = 1\r\n    \r\n    # Create a new tuple with the duplicates replaced by 'MSP'\r\n    new_tup = ()\r\n    for elem in tup:\r\n        if count_dict[elem] > 1:\r\n            new_tup += ('MSP',)\r\n        else:\r\n            new_tup += (elem,)\r\n    \r\n    return new_tup"], ["def remove_Char(string, char):\r\n    return string.replace(char, '')"], ["def move_first(lst):\r\n    last_element = lst[-1]\r\n    lst.pop()\r\n    lst.insert(0, last_element)\r\n    return lst"], ["def surfacearea_cuboid(a, b, c):\r\n    return 2*(a*b + b*c + c*a)\r\n\r\n# Test cases\r\nassert surfacearea_cuboid(1,2,3)==22\r\nassert surfacearea_cuboid(5,7,9)==286\r\nassert surfacearea_cuboid(10,15,21)==1350"], ["def multi_list(rows, cols):\r\n    result = []\r\n    for i in range(rows):\r\n        row = []\r\n        for j in range(cols):\r\n            row.append(i * cols + j)\r\n        result.append(row)\r\n    return result"], ["def index_on_inner_list(lst, index):\r\n    return sorted(lst, key=lambda x: x[index])\r\n\r\n# Test cases\r\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\r\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\r\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"], ["def find_rotation_count(arr):\r\n    n = len(arr)\r\n    if n == 0 or n == 1:\r\n        return 0\r\n    \r\n    # Find the pivot element\r\n    pivot = arr[0]\r\n    \r\n    # Find the index of the pivot element\r\n    pivot_index = 0\r\n    for i in range(1, n):\r\n        if arr[i] < pivot:\r\n            pivot_index = i\r\n            break\r\n    \r\n    # If the pivot element is the last element, then the array is already sorted\r\n    if pivot_index == n-1:\r\n        return 0\r\n    \r\n    # Find the number of rotations\r\n    count = 0\r\n    for i in range(pivot_index, n):\r\n        if arr[i] < pivot:\r\n            count += 1\r\n    \r\n    return count"], ["def even_bit_toggle_number(num):\r\n    # Convert the number to binary and remove the '0b' prefix\r\n    binary_num = bin(num)[2:]\r\n    \r\n    # Toggle all odd bits by iterating over the binary string and toggling the bits\r\n    toggled_binary = ''\r\n    for bit in binary_num:\r\n        if bit == '0':\r\n            toggled_binary += '1'\r\n        else:\r\n            toggled_binary += '0'\r\n    \r\n    # Convert the toggled binary string back to decimal and return the result\r\n    return int(toggled_binary, 2)"], ["def frequency_Of_Smallest(arr):\r\n    smallest = min(arr)\r\n    count = 0\r\n    for i in arr:\r\n        if i == smallest:\r\n            count += 1\r\n    return count"], ["def get_perrin(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    else:\r\n        return get_perrin(n-1) + get_perrin(n-2)"], ["def swap_count(s):\n    stack = []\n    swaps = 0\n\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                swaps += 1\n            else:\n                continue\n\n    return swaps\n\n# Test cases\nassert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1"], ["def even_or_odd(hex_num):\r\n    # Convert the hexadecimal number to decimal\r\n    decimal_num = int(hex_num, 16)\r\n    \r\n    # Check if the decimal number is even or odd\r\n    if decimal_num % 2 == 0:\r\n        return \"Even\"\r\n    else:\r\n        return \"Odd\""], ["def highest_Power_of_2(n):\r\n    power = 1\r\n    while power * 2 <= n:\r\n        power *= 2\r\n    return power"], ["def find_lucas(n):\r\n    if n == 0:\r\n        return 2\r\n    elif n == 1:\r\n        return 1\r\n    else:\r\n        return find_lucas(n-1) + find_lucas(n-2)"], ["def add_string(lst, string):\r\n    \"\"\"\r\n    This function takes a list and a string as input and returns a new list with the given string added at the beginning of all items in the original list.\r\n    \"\"\"\r\n    new_lst = []\r\n    for item in lst:\r\n        new_lst.append(string.format(item))\r\n    return new_lst"], ["def convert_list_dictionary(keys, values, scores):\r\n    result = []\r\n    for i in range(len(keys)):\r\n        result.append({keys[i]: {values[i]: scores[i]}})\r\n    return result"], ["def get_max_sum(n):\r\n    if n == 1:\r\n        return 1\r\n    elif n % 5 == 0:\r\n        return n\r\n    else:\r\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"], ["def max_length_list(lst):\r\n    return max(enumerate(map(len, lst)), key=lambda x: x[1])\r\n\r\n# Test cases\r\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\r\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\r\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], ["def check_distinct(tup):\r\n    \"\"\"\r\n    This function takes a tuple as input and returns True if all the elements in the tuple are distinct, else False.\r\n    \"\"\"\r\n    return len(set(tup)) == len(tup)"], ["def first_non_repeating_character(string):\r\n    char_count = {}\r\n    for char in string:\r\n        if char in char_count:\r\n            char_count[char] += 1\r\n        else:\r\n            char_count[char] = 1\r\n    for char in string:\r\n        if char_count[char] == 1:\r\n            return char\r\n    return None"], ["import re\r\n\r\ndef check_char(string):\r\n    pattern = re.compile(r'^(.+)\\1$')\r\n    if pattern.match(string):\r\n        return \"Valid\"\r\n    else:\r\n        return \"Invalid\""], ["def median_numbers(num1, num2, num3):\r\n    numbers = [num1, num2, num3]\r\n    numbers.sort()\r\n    if len(numbers) % 2 == 0:\r\n        median = (numbers[len(numbers)//2] + numbers[len(numbers)//2 - 1]) / 2\r\n    else:\r\n        median = numbers[len(numbers)//2]\r\n    return median"], ["def sum_of_digits(lst):\r\n    total = 0\r\n    for num in lst:\r\n        if isinstance(num, int):\r\n            total += sum(int(digit) for digit in str(num))\r\n        elif isinstance(num, list):\r\n            total += sum_of_digits(num)\r\n    return total"], ["def bitwise_xor(t1, t2):\r\n    result = []\r\n    for i in range(len(t1)):\r\n        result.append(t1[i] ^ t2[i])\r\n    return tuple(result)\r\n\r\n# Test cases\r\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\r\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\r\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], ["def extract_freq(lst):\r\n    freq = {}\r\n    for tup in lst:\r\n        if tup not in freq:\r\n            freq[tup] = 1\r\n        else:\r\n            freq[tup] += 1\r\n    return len(freq)"], ["def add_nested_tuples(t1, t2):\r\n    result = []\r\n    for i in range(len(t1)):\r\n        result.append(tuple(t1[i][j] + t2[i][j] for j in range(len(t1[i]))))\r\n    return tuple(result)\r\n\r\n# Test cases\r\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\r\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\r\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], ["def ncr_modp(n, r, p):\r\n    if r > n:\r\n        return 0\r\n    else:\r\n        numerator = 1\r\n        for i in range(1, r+1):\r\n            numerator = (numerator * (n-i+1)) % p\r\n            denominator = 1\r\n            for j in range(1, i+1):\r\n                denominator = (denominator * j) % p\r\n            numerator = (numerator * (denominator ** p)) % p\r\n        return numerator"], ["import re\r\n\r\ndef is_valid_URL(url):\r\n    pattern = re.compile(\r\n        r'^(?:http|ftp)s?://' # http:// or https://\r\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' # domain...\r\n        r'localhost|' # localhost...\r\n        r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or IP\r\n        r'(?::\\d+)?' # optional port\r\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\r\n    return bool(pattern.match(url))\r\n\r\n# Test cases\r\nassert is_valid_URL(\"https://www.google.com\") == True\r\nassert is_valid_URL(\"https:/www.gmail.com\") == False\r\nassert is_valid_URL(\"https:// www.redit.com\") == False"], ["def minimum(a, b):\r\n    if a < b:\r\n        return a\r\n    else:\r\n        return b"], ["def check_tuplex(tup, elem):\r\n    \"\"\"\r\n    This function checks whether an element exists within a tuple.\r\n    \"\"\"\r\n    if elem in tup:\r\n        return True\r\n    else:\r\n        return False\r\n\r\n# Test cases\r\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\r\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\r\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], ["def find_Parity(num):\r\n    if num % 2 == 0:\r\n        return \"Even Parity\"\r\n    else:\r\n        return \"Odd Parity\""], ["def rearrange_bigger(num):\r\n    # Convert the number to a string\r\n    num_str = str(num)\r\n    \r\n    # Sort the digits in descending order\r\n    sorted_str = ''.join(sorted(num_str, reverse=True))\r\n    \r\n    # Check if the sorted digits are the same as the original digits\r\n    if sorted_str == num_str:\r\n        return False\r\n    \r\n    # Convert the sorted digits back to an integer\r\n    next_bigger = int(sorted_str)\r\n    \r\n    return next_bigger"], ["def k_smallest_pairs(arr1, arr2, k):\r\n    arr1.sort()\r\n    arr2.sort()\r\n    pairs = []\r\n    i = 0\r\n    j = 0\r\n    while i < len(arr1) and j < len(arr2) and len(pairs) < k:\r\n        if arr1[i] + arr2[j] < arr1[i+1] + arr2[j]:\r\n            pairs.append([arr1[i], arr2[j]])\r\n            i += 1\r\n        else:\r\n            pairs.append([arr1[i], arr2[j+1]])\r\n            j += 1\r\n    return pairs"], ["def min_product_tuple(lst):\r\n    min_product = float('inf')\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            product = lst[i][0] * lst[j][1]\r\n            if product < min_product:\r\n                min_product = product\r\n    return min_product"], ["def min_val(lst):\r\n    \"\"\"\r\n    This function takes a list as input and returns the minimum value in the list.\r\n    \"\"\"\r\n    min_val = lst[0]\r\n    for i in lst:\r\n        if type(i) == int and i < min_val:\r\n            min_val = i\r\n        elif type(i) == str and i < min_val:\r\n            min_val = i\r\n    return min_val"], ["import re\r\n\r\ndef snake_to_camel(snake_str):\r\n    words = re.findall(r'[a-z]+', snake_str.lower())\r\n    return ''.join(word.capitalize() for word in words)\r\n\r\n# Test cases\r\nassert snake_to_camel('android_tv') == 'AndroidTv'\r\nassert snake_to_camel('google_pixel') == 'GooglePixel'\r\nassert snake_to_camel('apple_watch') == 'AppleWatch'"], ["def remove_odd(lst):\r\n    return [num for num in lst if num % 2 == 0]"], ["def extract_nth_element(lst, n):\r\n    return [t[n] for t in lst]\r\n\r\n# Test cases\r\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\r\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],2)==[99, 96, 94, 98]\r\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], ["def overlapping(seq1, seq2):\r\n    return any(elem in seq2 for elem in seq1)"], ["def max_Product(arr):\r\n    arr.sort()\r\n    return (arr[-1]*arr[-2], arr[-1]) if arr[-1]*arr[-2] > arr[-1]*arr[-2-1] else (arr[-1]*arr[-2-1], arr[-1])"], ["def breakSum(n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return 1\r\n    elif n == 2:\r\n        return 2\r\n    elif n == 3:\r\n        return 4\r\n    else:\r\n        return n + breakSum(n-1) + breakSum(n-2) + breakSum(n-3)\r\n\r\n# Test cases\r\nassert breakSum(12) == 13\r\nassert breakSum(24) == 27\r\nassert breakSum(23) == 23"], ["def group_tuples(lst):\r\n    result = []\r\n    for i in range(len(lst)):\r\n        if i == 0:\r\n            result.append([lst[i][0]])\r\n        else:\r\n            if lst[i][0] in result[-1]:\r\n                result[-1].append(lst[i][1])\r\n            else:\r\n                result.append([lst[i][0], lst[i][1]])\r\n    return result"], ["def Find_Max(lst):\r\n    max_len = 0\r\n    max_sublist = []\r\n    for sublist in lst:\r\n        if len(sublist) > max_len:\r\n            max_len = len(sublist)\r\n            max_sublist = sublist\r\n    return max_sublist"], ["def round_and_sum(numbers):\r\n    total = 0\r\n    for num in numbers:\r\n        total += round(num)\r\n    return total * len(numbers)\r\n\r\n# Test cases\r\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\r\nassert round_and_sum([5, 2, 9, 24.3, 29]) == 345\r\nassert round_and_sum([25.0, 56.7, 89.2]) == 513"], ["def cube_Sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        if i % 2 == 0:\r\n            sum += i**3\r\n    return sum"], ["def concatenate_tuple(tup, delimiter='-'):\r\n    \"\"\"\r\n    Concatenate each element of tuple by the delimiter.\r\n    \"\"\"\r\n    return delimiter.join(str(elem) for elem in tup)"], ["def find_Average_Of_Cube(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i**3\r\n    return sum/n"], ["def get_maxgold(gold_matrix, m, n):\r\n    if m == 0 or n == 0:\r\n        return 0\r\n    if m == 1 and n == 1:\r\n        return gold_matrix[m-1][n-1]\r\n    \r\n    left = get_maxgold(gold_matrix, m, n-1)\r\n    right = get_maxgold(gold_matrix, m, n-1)\r\n    up = get_maxgold(gold_matrix, m-1, n)\r\n    down = get_maxgold(gold_matrix, m-1, n)\r\n    \r\n    return max(left, right, up, down) + gold_matrix[m-1][n-1]"], ["def extract_rear(tup):\r\n    return [s[-1] for s in tup]"], ["def count_element_in_list(lst, elem):\r\n    count = 0\r\n    for sublist in lst:\r\n        if elem in sublist:\r\n            count += 1\r\n    return count"], ["def filter_oddnumbers(lst):\r\n    return list(filter(lambda x: x % 2 != 0, lst))"], ["import re\r\n\r\ndef change_date_format(date):\r\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\r\n    match = re.match(pattern, date)\r\n    if match:\r\n        year = match.group(1)\r\n        month = match.group(2)\r\n        day = match.group(3)\r\n        return f'{day}-{month}-{year}'\r\n    else:\r\n        return None"], ["def shell_sort(arr):\r\n    n = len(arr)\r\n    gap = n // 2\r\n    while gap > 0:\r\n        for i in range(gap, n):\r\n            temp = arr[i]\r\n            j = i\r\n            while j >= gap and arr[j - gap] > temp:\r\n                arr[j] = arr[j - gap]\r\n                j -= gap\r\n            arr[j] = temp\r\n        gap //= 2\r\n    return arr\r\n\r\n# Test cases\r\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\r\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\r\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], ["def and_tuples(t1, t2):\r\n    result = []\r\n    for i in range(len(t1)):\r\n        if t1[i] & t2[i] == 0:\r\n            result.append(0)\r\n        else:\r\n            result.append(1)\r\n    return tuple(result)"], ["def parabola_directrix(a, b, c):\r\n    \"\"\"\r\n    This function takes three parameters a, b, and c, which represent the coefficients of the quadratic equation ax^2 + bx + c = 0.\r\n    It returns the value of the directrix of the parabola.\r\n    \"\"\"\r\n    if b**2 - 4*a*c > 0:\r\n        return (-b + b**2 - 4*a*c) / (4*a)\r\n    else:\r\n        return None\r\n\r\n# Test cases\r\nassert parabola_directrix(5,3,2)==-198\r\nassert parabola_directrix(9,8,4)==-2336\r\nassert parabola_directrix(2,4,6)==-130"], ["def common_element(list1, list2):\r\n    for i in list1:\r\n        if i in list2:\r\n            return True\r\n    return None"], ["def median_trapezium(a, b, c):\r\n    \"\"\"\r\n    Find the median of a trapezium.\r\n    \"\"\"\r\n    # Calculate the height of the trapezium\r\n    height = ((a + b + c) / 2) * ((a + b + c) / 2)\r\n    # Calculate the area of the trapezium\r\n    area = ((a + b) / 2) * height\r\n    # Calculate the median\r\n    median = area / c\r\n    return median"], ["def check_greater(arr, num):\r\n    for i in arr:\r\n        if i > num:\r\n            return 'Yes, the entered number is greater than those in the array'\r\n    return 'No, entered number is less than those in the array'\r\n\r\n# Test cases\r\nassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\r\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\r\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"], ["def text_match_one(string):\r\n    if 'a' not in string:\r\n        return 'Not matched!'\r\n    elif 'b' not in string:\r\n        return 'Not matched!'\r\n    else:\r\n        for i in range(len(string)):\r\n            if string[i] == 'a':\r\n                if i == len(string)-1:\r\n                    return 'Not matched!'\r\n                elif string[i+1] != 'b':\r\n                    return 'Not matched!'\r\n                else:\r\n                    continue\r\n            elif string[i] == 'b':\r\n                if i == len(string)-1:\r\n                    return 'Found a match!'\r\n                elif string[i+1] != 'a':\r\n                    return 'Not matched!'\r\n                else:\r\n                    continue\r\n        return 'Not matched!'"], ["def last_Digit(num):\r\n    return num % 10"], ["def neg_nos(lst):\r\n    neg_lst = []\r\n    for num in lst:\r\n        if num < 0:\r\n            neg_lst.append(num)\r\n    print(neg_lst)"], ["def remove_odd(string):\r\n    result = \"\"\r\n    for char in string:\r\n        if char.isodd():\r\n            result += char\r\n    return result"], ["def count_bidirectional(tuples_list):\r\n    count = 0\r\n    for i in range(len(tuples_list)):\r\n        for j in range(i+1, len(tuples_list)):\r\n            if tuples_list[i][1] == tuples_list[j][0] and tuples_list[j][1] == tuples_list[i][0]:\r\n                count += 1\r\n    return count"], ["def multiple_to_single(lst):\r\n    \"\"\"\r\n    Convert a list of multiple integers into a single integer.\r\n    \"\"\"\r\n    result = 0\r\n    for num in lst:\r\n        result = result * 10 + num\r\n    return result"], ["import re\r\n\r\ndef find_adverb_position(sentence):\r\n    adverbs = re.findall(r'\\b(clearly|seriously|unfortunately)\\b', sentence.lower())\r\n    positions = re.finditer(r'\\b(clearly|seriously|unfortunately)\\b', sentence.lower())\r\n    result = []\r\n    for position in positions:\r\n        result.append((position.start(), position.end(), position.group(0)))\r\n    return result"], ["def surfacearea_cube(side):\r\n    return 6 * side ** 2"], ["def positive_count(arr):\r\n    count = 0\r\n    for num in arr:\r\n        if num > 0:\r\n            count += 1\r\n    return count / len(arr)\r\n\r\n# Test cases\r\nassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\r\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69\r\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56"], ["def largest_neg(lst):\r\n    largest = float('-inf')\r\n    for num in lst:\r\n        if num < 0 and num > largest:\r\n            largest = num\r\n    return largest"], ["def trim_tuple(tuple_list, k):\r\n    result = []\r\n    for tup in tuple_list:\r\n        trimmed_tup = tup[:k]\r\n        result.append(trimmed_tup)\r\n    return result"], ["def index_multiplication(t1, t2):\r\n    result = []\r\n    for i in range(len(t1)):\r\n        result.append(tuple(t1[i][j] * t2[i][j] for j in range(len(t1[i]))))\r\n    return tuple(result)\r\n\r\n# Test cases\r\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\r\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\r\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], ["def count_Occurrence(tup, lst):\r\n    count = 0\r\n    for i in lst:\r\n        count += tup.count(i)\r\n    return count"], ["def cube_nums(lst):\r\n    return list(map(lambda x: x**3, lst))\r\n\r\n# Test cases\r\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\r\nassert cube_nums([10, 20, 30]) == ([1000, 8000, 27000])\r\nassert cube_nums([12, 15]) == ([1728, 3375])"], ["def cal_sum(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i**i\r\n    return sum"], ["def check_Triangle(a, b, c, x, y, z):\r\n    if a+b>c and a+c>b and b+c>a:\r\n        return 'Yes'\r\n    else:\r\n        return 'No'"], ["def extract_string(lst, size):\r\n    result = []\r\n    for string in lst:\r\n        if len(string) >= size:\r\n            result.append(string[:size])\r\n    return result"], ["import re\r\n\r\ndef remove_whitespaces(string):\r\n    return re.sub(r'\\s+', '', string)\r\n\r\n# Test cases\r\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\r\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\r\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], ["def loss_amount(given_amount, original_amount):\r\n    if given_amount < original_amount:\r\n        return original_amount - given_amount\r\n    else:\r\n        return None"], ["def sumofFactors(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        if n % i == 0 and i % 2 == 0:\r\n            sum += i\r\n    return sum"], ["def text_match_wordz(text):\r\n    if 'z' in text:\r\n        return 'Found a match!'\r\n    else:\r\n        return 'Not matched!'"], ["def check_monthnumb_number(month_num):\r\n    if month_num in [1, 3, 5, 7, 8, 10, 12]:\r\n        return True\r\n    elif month_num in [4, 6, 9, 11]:\r\n        return False\r\n    else:\r\n        return False"], ["def reverse_string_list(lst):\r\n    return [string[::-1] for string in lst]\r\n\r\n# Test cases\r\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\r\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\r\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"], ["def Find_Min(lst):\r\n    min_len = len(lst[0])\r\n    min_sublist = lst[0]\r\n    for sublist in lst:\r\n        if len(sublist) < min_len:\r\n            min_len = len(sublist)\r\n            min_sublist = sublist\r\n    return min_sublist"], ["def rectangle_area(length, width):\r\n    return length * width"], ["import re\r\n\r\ndef remove_uppercase(string):\r\n    return re.sub(r'[A-Z]+', '', string)\r\n\r\n# Test cases\r\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\r\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\r\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], ["def Extract(lst):\r\n    result = []\r\n    for sublist in lst:\r\n        result.append(sublist[0])\r\n    return result"], ["def upper_ctr(string):\r\n    count = 0\r\n    for char in string:\r\n        if char.isupper():\r\n            count += 1\r\n    return count"], ["def combinations_list(lst):\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend(combinations(lst, i))\n    return result\n\ndef combinations(lst, r):\n    if r == 0:\n        return [[]]\n    if len(lst) < r:\n        return []\n    result = []\n    for i in range(len(lst)):\n        remaining = lst[i+1:]\n        for c in combinations(remaining, r-1):\n            result.append([lst[i]] + c)\n    return result\n\n# Test cases\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange']) == [[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange']) == [[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']] "], ["def max_subarray_product(arr):\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n\n# Test cases\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], ["def check_value(dictionary, value):\r\n    \"\"\"\r\n    This function takes a dictionary and a value as input and returns True if all values in the dictionary are equal to the given value, else False.\r\n    \"\"\"\r\n    return all(value == dictionary[key] for key in dictionary)"], ["def drop_empty(dictionary):\r\n    return {k: v for k, v in dictionary.items() if v is not None}"], ["def find_peak(arr, n):\r\n    if n < 1:\r\n        return None\r\n    \r\n    left = 0\r\n    right = n - 1\r\n    \r\n    while left < right:\r\n        mid = (left + right) // 2\r\n        \r\n        if arr[mid] < arr[mid + 1]:\r\n            left = mid + 1\r\n        else:\r\n            right = mid\r\n            \r\n    return left"], ["def decimal_to_Octal(num):\r\n    octal = 0\r\n    base = 1\r\n    while num > 0:\r\n        octal += (num % 8) * base\r\n        num //= 8\r\n        base *= 10\r\n    return octal"], ["def max_product(arr, n):\r\n    if n == 0:\r\n        return 0\r\n    elif n == 1:\r\n        return max(arr)\r\n    else:\r\n        max_product = arr[n-1]\r\n        max_so_far = arr[n-1]\r\n        for i in range(n-2, -1, -1):\r\n            if arr[i] > max_so_far:\r\n                max_so_far = arr[i]\r\n            max_product = max(max_product * max_so_far, max_product, max_so_far)\r\n        return max_product"], ["def max_profit(prices, k):\r\n    if len(prices) < 2:\r\n        return 0\r\n    if k >= len(prices) // 2:\r\n        return sum(prices[i+1]-prices[i] for i in range(len(prices)-1))\r\n    \r\n    max_profit = 0\r\n    for i in range(k):\r\n        min_price = float('inf')\r\n        for j in range(len(prices)):\r\n            min_price = min(min_price, prices[j])\r\n            if j > i:\r\n                max_profit = max(max_profit, prices[j]-min_price)\r\n    return max_profit"], ["def add_pairwise(t):\r\n    result = []\r\n    for i in range(len(t)-1):\r\n        result.append(t[i] + t[i+1])\r\n    return tuple(result)\r\n\r\n# Test cases\r\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\r\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\r\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], ["def find_remainder(arr, n, m):\r\n    product = 1\r\n    for i in arr:\r\n        product *= i\r\n    return product % n"], ["def check_Consecutive(lst):\r\n    for i in range(len(lst)-1):\r\n        if lst[i+1] - lst[i] == 1:\r\n            continue\r\n        else:\r\n            return False\r\n    return True"], ["def tuple_intersection(tuples_list, other_tuples):\r\n    intersection = set()\r\n    for t in tuples_list:\r\n        for o in other_tuples:\r\n            if t[::-1] == o[::-1]:\r\n                intersection.add(t)\r\n    return intersection\r\n\r\n# Test cases\r\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\r\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\r\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], ["def replace_char(string, old_char, new_char):\r\n    \"\"\"\r\n    This function replaces a character in a string with a new character.\r\n    \"\"\"\r\n    new_string = \"\"\r\n    for char in string:\r\n        if char == old_char:\r\n            new_string += new_char\r\n        else:\r\n            new_string += char\r\n    return new_string"], ["from collections import Counter\r\n\r\ndef sort_counter(counter):\r\n    return sorted(counter.items(), key=lambda x: x[1], reverse=True)\r\n\r\n# Test cases\r\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\r\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\r\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], ["def big_sum(arr):\r\n    return arr[0] + arr[-1]"], ["def is_lower(string):\r\n    return string.lower()"], ["def remove_lowercase(string):\r\n    result = \"\"\r\n    for i in range(len(string)):\r\n        if string[i].isupper():\r\n            result += string[i]\r\n    return result"], ["def first_Digit(num):\r\n    return int(str(num)[0])"], ["def get_max_occuring_char(string):\r\n    char_count = {}\r\n    max_char = \"\"\r\n    max_count = 0\r\n    \r\n    for char in string:\r\n        if char in char_count:\r\n            char_count[char] += 1\r\n        else:\r\n            char_count[char] = 1\r\n            \r\n        if char_count[char] > max_count:\r\n            max_char = char\r\n            max_count = char_count[char]\r\n            \r\n    return max_char"], ["def is_subset_sum(arr, n, s):\r\n    # Create a boolean array to mark the presence of the elements in the subset\r\n    subset = [False] * n\r\n    \r\n    # Recursive function to find the subset with sum equal to s\r\n    def helper(arr, subset, n, s, start):\r\n        # Base case: if sum is 0, we have found a subset\r\n        if s == 0:\r\n            return True\r\n        \r\n        # Base case: if sum is negative or start is greater than n, we cannot find a subset\r\n        if s < 0 or start >= n:\r\n            return False\r\n        \r\n        # If the current element is already included in the subset, skip it\r\n        if subset[start]:\r\n            return helper(arr, subset, n, s, start+1)\r\n        \r\n        # Exclude the current element\r\n        subset[start] = True\r\n        if helper(arr, subset, n, s-arr[start], start+1):\r\n            return True\r\n        \r\n        # Include the current element\r\n        subset[start] = False\r\n        return helper(arr, subset, n, s, start+1)\r\n    \r\n    # Call the recursive function with the initial values\r\n    return helper(arr, subset, n, s, 0)"], ["import re\r\n\r\ndef match(string):\r\n    pattern = r'[A-Z][a-z]+'\r\n    if re.search(pattern, string):\r\n        return 'Yes'\r\n    else:\r\n        return 'No'"], ["def first_Factorial_Divisible_Number(x):\r\n    n = 1\r\n    while True:\r\n        if n == 1:\r\n            n += 1\r\n        if n > 1:\r\n            if n == 2:\r\n                if 1 % x == 0:\r\n                    return 1\r\n                else:\r\n                    n += 1\r\n            if n % x == 0:\r\n                return n\r\n            else:\r\n                n += 1"], ["def remove_matching_tuple(tuples1, tuples2):\r\n    result = []\r\n    for t1 in tuples1:\r\n        if t1 not in tuples2:\r\n            result.append(t1)\r\n    return result"], ["def largest_palindrome(arr, n):\r\n    max_palindrome = 0\r\n    for num in arr:\r\n        if str(num) == str(num)[::-1] and num > max_palindrome:\r\n            max_palindrome = num\r\n    return max_palindrome\r\n\r\n# Test cases\r\nassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\r\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\r\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"], ["import math\r\n\r\ndef binomial_probability(n, k, p):\r\n    \"\"\"\r\n    Compute the binomial probability for the given number.\r\n    \"\"\"\r\n    return math.comb(n, k) * (p ** k) * ((1 - p) ** (n - k))\r\n\r\n# Test cases\r\nassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\r\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\r\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488"], ["def sort_tuple(lst):\r\n    return sorted(lst, key=lambda x: x[-1])"], ["import math\r\n\r\ndef area_pentagon(n):\r\n    \"\"\"\r\n    Calculates the area of a regular pentagon with n sides.\r\n    \"\"\"\r\n    return (n * (n * math.sqrt(5) / 2)) - ((5 * n * n) / 4)\r\n\r\n# Test cases\r\nassert area_pentagon(5) == 43.01193501472417\r\nassert area_pentagon(10) == 172.0477400588967\r\nassert area_pentagon(15) == 387.10741513251753"], ["def frequency_Of_Largest(n, arr):\r\n    max_val = max(arr)\r\n    count = arr.count(max_val)\r\n    return count"], ["def extract_symmetric(lst):\r\n    symmetric_pairs = set()\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if lst[i] == lst[j][::-1]:\r\n                symmetric_pairs.add(tuple(sorted(lst[i])))\r\n    return symmetric_pairs"], ["def sum_gp(a, r, n):\r\n    \"\"\"\r\n    This function takes three arguments:\r\n    a: first term of the geometric progression\r\n    r: common ratio of the geometric progression\r\n    n: number of terms in the geometric progression\r\n    \r\n    It returns the sum of the geometric progression series.\r\n    \"\"\"\r\n    return (a*(1-r**n))/(1-r)"], ["def binary_search(arr, x):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] == x:\r\n            return True\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    return False"], ["import math\r\n\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    # Calculate the number of rows and columns in the grid\r\n    rows = math.ceil((endy - starty) / (2 * radius))\r\n    cols = math.ceil((endx - startx) / (2 * radius * math.cos(math.pi / 6)))\r\n\r\n    # Initialize the list of lists to store the hexagon coordinates\r\n    polygons = [[] for i in range(rows)]\r\n\r\n    # Calculate the x and y coordinates of the hexagon centers\r\n    for i in range(rows):\r\n        for j in range(cols):\r\n            x = startx + 2 * radius * j * math.cos(math.pi / 3)\r\n            y = starty + 2 * radius * i + radius * math.sin(math.pi / 3)\r\n            polygons[i].append((x, y))\r\n\r\n    return polygons"], ["def binary_to_integer(binary_tuple):\r\n    \"\"\"\r\n    Convert the given binary tuple to integer.\r\n    \"\"\"\r\n    binary_str = ''.join(str(bit) for bit in binary_tuple)\r\n    return int(binary_str, 2)\r\n\r\n# Test cases\r\nassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == 105\r\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == 101\r\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == 53"], ["import re\r\n\r\ndef remove_lowercase(string):\r\n    pattern = re.compile(r'[a-z]+')\r\n    return pattern.sub('', string)\r\n\r\n# Test cases\r\nassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\r\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\r\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"], ["import heapq\r\n\r\ndef heap_queue_smallest(numbers, k):\r\n    heap = []\r\n    for num in numbers:\r\n        heapq.heappush(heap, num)\r\n        if len(heap) > k:\r\n            heapq.heappop(heap)\r\n    return sorted(heap)\r\n\r\n# Test cases\r\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25]\r\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[14, 22]\r\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"], ["import math\r\n\r\ndef surfacearea_cone(r, h):\r\n    \"\"\"\r\n    Calculates the surface area of a cone.\r\n    \r\n    Args:\r\n    r: radius of the cone\r\n    h: height of the cone\r\n    \r\n    Returns:\r\n    The surface area of the cone.\r\n    \"\"\"\r\n    return math.pi * r * (r + math.sqrt(h**2 + r**2))\r\n\r\n# Test cases\r\nassert surfacearea_cone(5,12)==282.7433388230814\r\nassert surfacearea_cone(10,15)==880.5179353159282\r\nassert surfacearea_cone(19,17)==2655.923961165254"], ["def gcd(a, b):\r\n    \"\"\"\r\n    This function takes two positive integers as input and returns their gcd.\r\n    \"\"\"\r\n    if b == 0:\r\n        return a\r\n    else:\r\n        return gcd(b, a % b)"], ["def diameter_circle(radius):\r\n    return 2 * radius\r\n\r\n# Test cases\r\nassert diameter_circle(10) == 20\r\nassert diameter_circle(40) == 80\r\nassert diameter_circle(15) == 30"], ["def concatenate_elements(lst):\r\n    \"\"\"\r\n    Concatenates all elements of the given list into a string.\r\n    \"\"\"\r\n    return '  ' + ' '.join(lst)"], ["def num_comm_div(a, b):\r\n    \"\"\"\r\n    This function takes two numbers as input and returns their common divisor.\r\n    \"\"\"\r\n    for i in range(min(a, b), 0, -1):\r\n        if a % i == 0 and b % i == 0:\r\n            return i"], ["def find(a, b):\r\n    return a % b"], ["def add_consecutive_nums(lst):\r\n    result = []\r\n    count = 0\r\n    for i in range(len(lst)):\r\n        if i == 0:\r\n            count += lst[i]\r\n        else:\r\n            count += lst[i] - lst[i-1]\r\n        result.append(count)\r\n    return result"], ["def sum_of_series(n):\r\n    sum = 0\r\n    for i in range(1, n+1):\r\n        sum += i**3\r\n    return sum"], ["def re_order(arr):\r\n    zero_count = 0\r\n    for i in range(len(arr)):\r\n        if arr[i] == 0:\r\n            zero_count += 1\r\n    j = len(arr) - 1\r\n    for i in range(len(arr) - zero_count, len(arr)):\r\n        if arr[i] == 0:\r\n            arr[i], arr[j] = arr[j], arr[i]\r\n            j -= 1\r\n    return arr"], ["def permutation_coefficient(n, k):\r\n    if k > n:\r\n        return 0\r\n    elif k == n:\r\n        return 1\r\n    else:\r\n        return factorial(n) // factorial(n-k)\r\n\r\ndef factorial(n):\r\n    if n == 0:\r\n        return 1\r\n    else:\r\n        return n * factorial(n-1)\r\n\r\n# Test cases\r\nassert permutation_coefficient(10, 2) == 90\r\nassert permutation_coefficient(10, 3) == 720\r\nassert permutation_coefficient(10, 1) == 10"], ["def remove_words(lst, words_to_remove):\r\n    return [word for word in lst if word not in words_to_remove]"], ["def same_order(list1, list2):\r\n    \"\"\"\r\n    This function takes two lists as input and returns True if the common elements between the two lists are in the same order, else False.\r\n    \"\"\"\r\n    common_elements = set(list1) & set(list2)\r\n    if sorted(list1) == sorted(list(common_elements)):\r\n        return True\r\n    else:\r\n        return False"], ["def average_Odd(n):\r\n    # Check if the given number is odd\r\n    if n % 2 == 0:\r\n        return \"Error: The given number should be odd\"\r\n    \r\n    # Initialize variables\r\n    sum_odd = 0\r\n    count_odd = 0\r\n    \r\n    # Loop through odd numbers till the given number\r\n    for i in range(1, n+1, 2):\r\n        sum_odd += i\r\n        count_odd += 1\r\n    \r\n    # Calculate the average\r\n    avg_odd = sum_odd / count_odd\r\n    \r\n    return avg_odd"], ["def no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] < k:\n                count += dp[j] - dp[i]\n\n    return count\n\n# Test cases\nassert no_of_subsequences([1, 2, 3, 4], 10) == 11\nassert no_of_subsequences([4, 8, 7, 2], 50) == 9\nassert no_of_subsequences([5, 6, 7, 8], 15) == 4"]]
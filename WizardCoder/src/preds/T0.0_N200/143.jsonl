{"task_id": "HumanEval/80", "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef is_happy(s):\r\n    \"\"\"You are given a string s.\r\n    Your task is to check if the string is happy or not.\r\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\r\n    For example:\r\n    is_happy(a) => False\r\n    is_happy(aa) => False\r\n    is_happy(abcd) => True\r\n    is_happy(aabb) => False\r\n    is_happy(adb) => True\r\n    is_happy(xyy) => False\r\n    \"\"\"\r\n    if len(s) < 3:\r\n        return False\r\n    for i in range(len(s)-2):\r\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\r\n            return False\r\n    return True\r\n```\r\n\r\nThe function `is_happy` takes a string `s` as input and returns `True` if the string is happy and `False` otherwise. The function first checks if the length of the string is less than 3, in which case it returns `False`. If the length is at least 3, the function iterates over the string and checks if every 3 consecutive letters are distinct. If any pair of consecutive letters are the same, the function returns `False`. If all pairs of consecutive letters are distinct, the function returns `True`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef is_happy(s):\r\n    \"\"\"You are given a string s.\r\n    Your task is to check if the string is happy or not.\r\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\r\n    For example:\r\n    is_happy(a) => False\r\n    is_happy(aa) => False\r\n    is_happy(abcd) => True\r\n    is_happy(aabb) => False\r\n    is_happy(adb) => True\r\n    is_happy(xyy) => False\r\n    \"\"\"\r\n    if len(s) < 3:\r\n        return False\r\n    for i in range(len(s)-2):\r\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\r\n            return False\r\n    return True\r\n```\r\n\r\nThe function `is_happy` takes a string `s` as input and returns `True` if the string is happy and `False` otherwise. The function first checks if the length of the string is less than 3, in which case it returns `False`. If the length is at least 3, the function iterates over the string and checks if every 3 consecutive letters are distinct. If any pair of consecutive letters are the same, the function returns `False`. If all pairs of consecutive letters are distinct, the function returns `True`. "}

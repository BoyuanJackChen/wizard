{"task_id": "HumanEval/69", "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef search(lst):\r\n    '''\r\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \r\n    zero, and has a frequency greater than or equal to the value of the integer itself. \r\n    The frequency of an integer is the number of times it appears in the list. \r\n    If no such a value exist, return -1.\r\n    Examples:\r\n        search([4, 1, 2, 2, 3, 1]) == 2\r\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\r\n        search([5, 5, 4, 4, 4]) == -1\r\n    '''\r\n    freq = {}\r\n    for num in lst:\r\n        if num > 0:\r\n            if num in freq:\r\n                freq[num] += 1\r\n            else:\r\n                freq[num] = 1\r\n    for num in sorted(freq.keys(), reverse=True):\r\n        if freq[num] >= num:\r\n            return num\r\n    return -1\r\n```\r\n\r\nHere's how the function works:\r\n\r\n1. First, we create an empty dictionary `freq` to store the frequency of each integer in the list.\r\n2. We loop through the list and check if each integer is greater than zero. If it is, we check if it already exists in the `freq` dictionary. If it does, we increment its frequency by 1. If it doesn't, we add it to the dictionary with a frequency of 1.\r\n3. We sort the keys of the `freq` dictionary in reverse order. This means that we start with the largest integer and work our way down to the smallest.\r\n4. We loop through the sorted keys of the `freq` dictionary. For each integer, we check if its frequency is greater than or equal to the integer itself. If it is, we return the integer.\r\n5. If we loop through all the integers and none of them meet the condition, we return -1. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef search(lst):\r\n    '''\r\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \r\n    zero, and has a frequency greater than or equal to the value of the integer itself. \r\n    The frequency of an integer is the number of times it appears in the list. \r\n    If no such a value exist, return -1.\r\n    Examples:\r\n        search([4, 1, 2, 2, 3, 1]) == 2\r\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\r\n        search([5, 5, 4, 4, 4]) == -1\r\n    '''\r\n    freq = {}\r\n    for num in lst:\r\n        if num > 0:\r\n            if num in freq:\r\n                freq[num] += 1\r\n            else:\r\n                freq[num] = 1\r\n    for num in sorted(freq.keys(), reverse=True):\r\n        if freq[num] >= num:\r\n            return num\r\n    return -1\r\n```\r\n\r\nHere's how the function works:\r\n\r\n1. First, we create an empty dictionary `freq` to store the frequency of each integer in the list.\r\n2. We loop through the list and check if each integer is greater than zero. If it is, we check if it already exists in the `freq` dictionary. If it does, we increment its frequency by 1. If it doesn't, we add it to the dictionary with a frequency of 1.\r\n3. We sort the keys of the `freq` dictionary in reverse order. This means that we start with the largest integer and work our way down to the smallest.\r\n4. We loop through the sorted keys of the `freq` dictionary. For each integer, we check if its frequency is greater than or equal to the integer itself. If it is, we return the integer.\r\n5. If we loop through all the integers and none of them meet the condition, we return -1. "}

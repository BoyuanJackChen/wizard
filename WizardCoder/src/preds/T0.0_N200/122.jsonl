{"task_id": "HumanEval/61", "completion": "Here's the Python script for the given problem:\r\n\r\n\r\n```python\r\ndef correct_bracketing(brackets: str):\r\n    \"\"\" brackets is a string of \"(\" and \")\".\r\n    return True if every opening bracket has a corresponding closing bracket.\r\n\r\n    >>> correct_bracketing(\"(\")\r\n    False\r\n    >>> correct_bracketing(\"()\")\r\n    True\r\n    >>> correct_bracketing(\"(()())\")\r\n    True\r\n    >>> correct_bracketing(\")(()\")\r\n    False\r\n    \"\"\"\r\n\r\n    stack = []\r\n    for bracket in brackets:\r\n        if bracket == \"(\":\r\n            stack.append(bracket)\r\n        elif bracket == \")\":\r\n            if not stack:\r\n                return False\r\n            stack.pop()\r\n    return len(stack) == 0\r\n```\r\n\r\nThe function `correct_bracketing` takes a string `brackets` as input and returns `True` if every opening bracket has a corresponding closing bracket. Otherwise, it returns `False`.\r\n\r\nThe function uses a stack to keep track of the opening brackets. For each bracket in the input string, it either pushes it onto the stack if it's an opening bracket, or pops it from the stack if it's a closing bracket. If there are any opening brackets left in the stack at the end of the string, the function returns `False`. Otherwise, it returns `True`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n\n### Response:Here's the Python script for the given problem:\r\n\r\n\r\n```python\r\ndef correct_bracketing(brackets: str):\r\n    \"\"\" brackets is a string of \"(\" and \")\".\r\n    return True if every opening bracket has a corresponding closing bracket.\r\n\r\n    >>> correct_bracketing(\"(\")\r\n    False\r\n    >>> correct_bracketing(\"()\")\r\n    True\r\n    >>> correct_bracketing(\"(()())\")\r\n    True\r\n    >>> correct_bracketing(\")(()\")\r\n    False\r\n    \"\"\"\r\n\r\n    stack = []\r\n    for bracket in brackets:\r\n        if bracket == \"(\":\r\n            stack.append(bracket)\r\n        elif bracket == \")\":\r\n            if not stack:\r\n                return False\r\n            stack.pop()\r\n    return len(stack) == 0\r\n```\r\n\r\nThe function `correct_bracketing` takes a string `brackets` as input and returns `True` if every opening bracket has a corresponding closing bracket. Otherwise, it returns `False`.\r\n\r\nThe function uses a stack to keep track of the opening brackets. For each bracket in the input string, it either pushes it onto the stack if it's an opening bracket, or pops it from the stack if it's a closing bracket. If there are any opening brackets left in the stack at the end of the string, the function returns `False`. Otherwise, it returns `True`. "}

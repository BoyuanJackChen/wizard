{"task_id": "HumanEval/20", "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\nfrom typing import List, Tuple\r\n\r\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\r\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\r\n    other and return them in order (smaller number, larger number).\r\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\r\n    (2.0, 2.2)\r\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\r\n    (2.0, 2.0)\r\n    \"\"\"\r\n    \r\n    min_diff = float('inf')\r\n    closest_numbers = (float('inf'), float('-inf'))\r\n    \r\n    for i in range(len(numbers)):\r\n        for j in range(i+1, len(numbers)):\r\n            diff = abs(numbers[i] - numbers[j])\r\n            if diff < min_diff:\r\n                min_diff = diff\r\n                closest_numbers = (numbers[i], numbers[j])\r\n    \r\n    return closest_numbers\r\n```\r\n\r\nThe function `find_closest_elements` takes a list of numbers as input and returns a tuple of two numbers that are the closest to each other. The function first initializes a variable `min_diff` to infinity and a variable `closest_numbers` to two infinite values. It then loops through all possible pairs of numbers in the list and calculates the absolute difference between them. If the difference is less than the current minimum difference, it updates the minimum difference and the closest numbers. Finally, it returns the closest numbers as a tuple. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\nfrom typing import List, Tuple\r\n\r\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\r\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\r\n    other and return them in order (smaller number, larger number).\r\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\r\n    (2.0, 2.2)\r\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\r\n    (2.0, 2.0)\r\n    \"\"\"\r\n    \r\n    min_diff = float('inf')\r\n    closest_numbers = (float('inf'), float('-inf'))\r\n    \r\n    for i in range(len(numbers)):\r\n        for j in range(i+1, len(numbers)):\r\n            diff = abs(numbers[i] - numbers[j])\r\n            if diff < min_diff:\r\n                min_diff = diff\r\n                closest_numbers = (numbers[i], numbers[j])\r\n    \r\n    return closest_numbers\r\n```\r\n\r\nThe function `find_closest_elements` takes a list of numbers as input and returns a tuple of two numbers that are the closest to each other. The function first initializes a variable `min_diff` to infinity and a variable `closest_numbers` to two infinite values. It then loops through all possible pairs of numbers in the list and calculates the absolute difference between them. If the difference is less than the current minimum difference, it updates the minimum difference and the closest numbers. Finally, it returns the closest numbers as a tuple. "}

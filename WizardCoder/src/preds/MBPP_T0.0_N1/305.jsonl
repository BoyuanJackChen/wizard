{"task_id": 316, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef find_last_occurrence(arr, num):\r\n    \"\"\"\r\n    Find the index of the last occurrence of a given number in a sorted array.\r\n    \"\"\"\r\n    left, right = 0, len(arr) - 1\r\n    result = -1\r\n    \r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == num:\r\n            result = mid\r\n            left = mid + 1\r\n        elif arr[mid] < num:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n    \r\n    return result\r\n```\r\n\r\nThe function `find_last_occurrence` takes two arguments: the sorted array `arr` and the number `num` to search for. It returns the index of the last occurrence of `num` in `arr`, or `-1` if `num` is not found in `arr`.\r\n\r\nThe function uses binary search to find the last occurrence of `num` in `arr`. It starts by initializing `left` and `right` pointers to the beginning and end of `arr`, respectively. It also initializes `result` to `-1`, which will be used to store the index of the last occurrence of `num` found by the function.\r\n\r\nThe function then enters a loop that continues as long as `left` is less than or equal to `right`. In each iteration of the loop, the function computes the index `mid` of the middle element of `arr` using integer division. If `arr[mid]` is equal to `num`, the function updates `result` to `mid` and moves the `left` pointer to the right of `mid` to search for the next occurrence of `num`. If `arr[mid]` is less than `num`, the function moves the `left` pointer to the right of `mid`. If `arr[mid]` is greater than `num`, the function moves the `right` pointer to the left of `mid`.\r\n\r\nOnce the loop exits, the function returns `result`, which will be the index of the last occurrence of `num` in `arr`, or `-1` if `num` is not found in `arr`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the index of the last occurrence of a given number in a sorted array.\nTest examples:\nassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef find_last_occurrence(arr, num):\r\n    \"\"\"\r\n    Find the index of the last occurrence of a given number in a sorted array.\r\n    \"\"\"\r\n    left, right = 0, len(arr) - 1\r\n    result = -1\r\n    \r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == num:\r\n            result = mid\r\n            left = mid + 1\r\n        elif arr[mid] < num:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n    \r\n    return result\r\n```\r\n\r\nThe function `find_last_occurrence` takes two arguments: the sorted array `arr` and the number `num` to search for. It returns the index of the last occurrence of `num` in `arr`, or `-1` if `num` is not found in `arr`.\r\n\r\nThe function uses binary search to find the last occurrence of `num` in `arr`. It starts by initializing `left` and `right` pointers to the beginning and end of `arr`, respectively. It also initializes `result` to `-1`, which will be used to store the index of the last occurrence of `num` found by the function.\r\n\r\nThe function then enters a loop that continues as long as `left` is less than or equal to `right`. In each iteration of the loop, the function computes the index `mid` of the middle element of `arr` using integer division. If `arr[mid]` is equal to `num`, the function updates `result` to `mid` and moves the `left` pointer to the right of `mid` to search for the next occurrence of `num`. If `arr[mid]` is less than `num`, the function moves the `left` pointer to the right of `mid`. If `arr[mid]` is greater than `num`, the function moves the `right` pointer to the left of `mid`.\r\n\r\nOnce the loop exits, the function returns `result`, which will be the index of the last occurrence of `num` in `arr`, or `-1` if `num` is not found in `arr`. "}

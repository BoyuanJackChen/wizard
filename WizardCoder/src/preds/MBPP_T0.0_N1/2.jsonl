{"task_id": 13, "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef count_common(words):\r\n    word_count = {}\r\n    for word in words:\r\n        if word in word_count:\r\n            word_count[word] += 1\r\n        else:\r\n            word_count[word] = 1\r\n    \r\n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\r\n    \r\n    return sorted_word_count\r\n```\r\n\r\nThe function `count_common` takes a list of words as input and returns a list of tuples, where each tuple contains a word and its frequency count. The function first creates an empty dictionary `word_count` to store the frequency count of each word. It then iterates through the list of words and updates the frequency count in the dictionary. Finally, it sorts the dictionary by frequency count in descending order and returns the sorted list of tuples.\r\n\r\nThe test cases provided in the problem statement can be tested using the `assert` statement. For example:\r\n\r\n```python\r\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\r\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\r\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\r\n```\r\n\r\nThe first test case checks if the function correctly counts the frequency of each word in the list of words provided. The second test case checks if the function correctly handles words with the same frequency count. The third test case checks if the function correctly handles words with different capitalization. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to count the most common words in a dictionary.\nTest examples:\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef count_common(words):\r\n    word_count = {}\r\n    for word in words:\r\n        if word in word_count:\r\n            word_count[word] += 1\r\n        else:\r\n            word_count[word] = 1\r\n    \r\n    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\r\n    \r\n    return sorted_word_count\r\n```\r\n\r\nThe function `count_common` takes a list of words as input and returns a list of tuples, where each tuple contains a word and its frequency count. The function first creates an empty dictionary `word_count` to store the frequency count of each word. It then iterates through the list of words and updates the frequency count in the dictionary. Finally, it sorts the dictionary by frequency count in descending order and returns the sorted list of tuples.\r\n\r\nThe test cases provided in the problem statement can be tested using the `assert` statement. For example:\r\n\r\n```python\r\nassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\r\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\r\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\r\n```\r\n\r\nThe first test case checks if the function correctly counts the frequency of each word in the list of words provided. The second test case checks if the function correctly handles words with the same frequency count. The third test case checks if the function correctly handles words with different capitalization. "}

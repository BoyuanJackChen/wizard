{"task_id": 290, "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef max_length(lst):\r\n    max_len = 0\r\n    max_lst = []\r\n    for sub_lst in lst:\r\n        if len(sub_lst) > max_len:\r\n            max_len = len(sub_lst)\r\n            max_lst = sub_lst\r\n    return max_len, max_lst\r\n```\r\n\r\nThe function `max_length` takes a list of lists as input and returns a tuple containing the length of the longest sublist and the sublist itself. It works by iterating over each sublist in the input list, and keeping track of the length of the longest sublist seen so far and the sublist itself. When it has finished iterating over all the sublists, it returns the length and sublist as a tuple.\r\n\r\nTo test the function, we can use the `assert` statement to check that it returns the expected output for some test cases. The first test case checks that the function correctly identifies the sublist with the maximum length, which is `[13, 15, 17]`. The second test case checks that the function correctly identifies the sublist with the maximum length, which is `[10, 12, 14,15]`. The third test case checks that the function correctly identifies the sublist with the maximum length, which is `[15,20,25]`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the list of lists with maximum length.\nTest examples:\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef max_length(lst):\r\n    max_len = 0\r\n    max_lst = []\r\n    for sub_lst in lst:\r\n        if len(sub_lst) > max_len:\r\n            max_len = len(sub_lst)\r\n            max_lst = sub_lst\r\n    return max_len, max_lst\r\n```\r\n\r\nThe function `max_length` takes a list of lists as input and returns a tuple containing the length of the longest sublist and the sublist itself. It works by iterating over each sublist in the input list, and keeping track of the length of the longest sublist seen so far and the sublist itself. When it has finished iterating over all the sublists, it returns the length and sublist as a tuple.\r\n\r\nTo test the function, we can use the `assert` statement to check that it returns the expected output for some test cases. The first test case checks that the function correctly identifies the sublist with the maximum length, which is `[13, 15, 17]`. The second test case checks that the function correctly identifies the sublist with the maximum length, which is `[10, 12, 14,15]`. The third test case checks that the function correctly identifies the sublist with the maximum length, which is `[15,20,25]`. "}

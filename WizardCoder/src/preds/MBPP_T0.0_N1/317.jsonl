{"task_id": 328, "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef rotate_left(lst, n, k):\r\n    \"\"\"\r\n    Rotate a given list by specified number of items to the left direction.\r\n    \r\n    Args:\r\n    lst: list to be rotated\r\n    n: number of items to be rotated\r\n    k: number of times to rotate the list\r\n    \r\n    Returns:\r\n    Rotated list\r\n    \"\"\"\r\n    if n > len(lst):\r\n        n = len(lst)\r\n    if k > 0:\r\n        return lst[n:] + lst[:n] * k\r\n    else:\r\n        return lst\r\n\r\n# Test cases\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\r\n```\r\n\r\nThe `rotate_left` function takes in three arguments: `lst`, `n`, and `k`. `lst` is the list to be rotated, `n` is the number of items to be rotated, and `k` is the number of times to rotate the list. The function first checks if `n` is greater than the length of the list. If it is, it sets `n` to the length of the list. Then, it checks if `k` is greater than 0. If it is, it returns the rotated list by slicing the list from `n` to the end and concatenating it with the sliced list from the beginning to `n` multiplied by `k`. If `k` is 0 or less, it returns the original list. \r\n\r\nThe test cases provided in the problem statement are used to test the function. The first test case checks if the function correctly rotates the list by 3 items to the left and then rotates it by 4 more times. The second test case checks if the function correctly rotates the list by 2 items to the left and then rotates it by 2 more times. The third test case checks if the function correctly rotates the list by 5 items to the left and then rotates it by 2 more times. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to rotate a given list by specified number of items to the left direction.\nTest examples:\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef rotate_left(lst, n, k):\r\n    \"\"\"\r\n    Rotate a given list by specified number of items to the left direction.\r\n    \r\n    Args:\r\n    lst: list to be rotated\r\n    n: number of items to be rotated\r\n    k: number of times to rotate the list\r\n    \r\n    Returns:\r\n    Rotated list\r\n    \"\"\"\r\n    if n > len(lst):\r\n        n = len(lst)\r\n    if k > 0:\r\n        return lst[n:] + lst[:n] * k\r\n    else:\r\n        return lst\r\n\r\n# Test cases\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\r\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]\r\n```\r\n\r\nThe `rotate_left` function takes in three arguments: `lst`, `n`, and `k`. `lst` is the list to be rotated, `n` is the number of items to be rotated, and `k` is the number of times to rotate the list. The function first checks if `n` is greater than the length of the list. If it is, it sets `n` to the length of the list. Then, it checks if `k` is greater than 0. If it is, it returns the rotated list by slicing the list from `n` to the end and concatenating it with the sliced list from the beginning to `n` multiplied by `k`. If `k` is 0 or less, it returns the original list. \r\n\r\nThe test cases provided in the problem statement are used to test the function. The first test case checks if the function correctly rotates the list by 3 items to the left and then rotates it by 4 more times. The second test case checks if the function correctly rotates the list by 2 items to the left and then rotates it by 2 more times. The third test case checks if the function correctly rotates the list by 5 items to the left and then rotates it by 2 more times. "}

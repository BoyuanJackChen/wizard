{"task_id": 286, "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef max_sub_array_sum_repeated(arr, k, n):\r\n    # Repeat the array k times\r\n    modified_arr = arr * k\r\n    \r\n    # Initialize variables to store the maximum sum and the current sum\r\n    max_sum = float('-inf')\r\n    curr_sum = 0\r\n    \r\n    # Iterate through the modified array\r\n    for i in range(n):\r\n        # Add the current element to the current sum\r\n        curr_sum += modified_arr[i]\r\n        \r\n        # If the current sum is greater than the maximum sum, update the maximum sum\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n            \r\n        # If the current sum is negative, reset the current sum to 0\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n            \r\n    return max_sum\r\n```\r\n\r\nThe function takes in three arguments: `arr`, which is the original array, `k`, which is the number of times to repeat the array, and `n`, which is the length of the modified array. The function first repeats the original array `k` times to create the modified array. It then initializes two variables, `max_sum` and `curr_sum`, to store the maximum sum and the current sum, respectively. The function then iterates through the modified array, adding each element to the current sum and updating the maximum sum if the current sum is greater than the previous maximum sum. If the current sum becomes negative, the function resets the current sum to 0. Finally, the function returns the maximum sum. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\nTest examples:\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef max_sub_array_sum_repeated(arr, k, n):\r\n    # Repeat the array k times\r\n    modified_arr = arr * k\r\n    \r\n    # Initialize variables to store the maximum sum and the current sum\r\n    max_sum = float('-inf')\r\n    curr_sum = 0\r\n    \r\n    # Iterate through the modified array\r\n    for i in range(n):\r\n        # Add the current element to the current sum\r\n        curr_sum += modified_arr[i]\r\n        \r\n        # If the current sum is greater than the maximum sum, update the maximum sum\r\n        if curr_sum > max_sum:\r\n            max_sum = curr_sum\r\n            \r\n        # If the current sum is negative, reset the current sum to 0\r\n        if curr_sum < 0:\r\n            curr_sum = 0\r\n            \r\n    return max_sum\r\n```\r\n\r\nThe function takes in three arguments: `arr`, which is the original array, `k`, which is the number of times to repeat the array, and `n`, which is the length of the modified array. The function first repeats the original array `k` times to create the modified array. It then initializes two variables, `max_sum` and `curr_sum`, to store the maximum sum and the current sum, respectively. The function then iterates through the modified array, adding each element to the current sum and updating the maximum sum if the current sum is greater than the previous maximum sum. If the current sum becomes negative, the function resets the current sum to 0. Finally, the function returns the maximum sum. "}

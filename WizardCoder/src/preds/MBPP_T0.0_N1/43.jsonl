{"task_id": 54, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef counting_sort(arr):\r\n    # Find the maximum element in the array\r\n    max_val = max(arr)\r\n    # Create a list of zeros with length equal to max_val+1\r\n    count = [0] * (max_val+1)\r\n    # Count the occurrences of each element in the array\r\n    for i in arr:\r\n        count[i] += 1\r\n    # Modify the count array such that each element at index i stores the sum of all elements before it\r\n    for i in range(1, max_val+1):\r\n        count[i] += count[i-1]\r\n    # Create a new array to store the sorted elements\r\n    sorted_arr = [0] * len(arr)\r\n    # Place the elements in the sorted array in their correct position based on their count\r\n    for i in range(len(arr)-1, -1, -1):\r\n        sorted_arr[count[arr[i]]-1] = arr[i]\r\n        count[arr[i]] -= 1\r\n    return sorted_arr\r\n```\r\n\r\nThe function takes an array as input and returns a new array that contains the sorted elements of the input array. The algorithm used in this function is called counting sort. Counting sort works by counting the number of occurrences of each element in the array and storing the count in a separate list. Then, it modifies the count list such that each element at index i stores the sum of all elements before it. Finally, it places the elements in the sorted array in their correct position based on their count. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to sort the given array by using counting sort.\nTest examples:\nassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef counting_sort(arr):\r\n    # Find the maximum element in the array\r\n    max_val = max(arr)\r\n    # Create a list of zeros with length equal to max_val+1\r\n    count = [0] * (max_val+1)\r\n    # Count the occurrences of each element in the array\r\n    for i in arr:\r\n        count[i] += 1\r\n    # Modify the count array such that each element at index i stores the sum of all elements before it\r\n    for i in range(1, max_val+1):\r\n        count[i] += count[i-1]\r\n    # Create a new array to store the sorted elements\r\n    sorted_arr = [0] * len(arr)\r\n    # Place the elements in the sorted array in their correct position based on their count\r\n    for i in range(len(arr)-1, -1, -1):\r\n        sorted_arr[count[arr[i]]-1] = arr[i]\r\n        count[arr[i]] -= 1\r\n    return sorted_arr\r\n```\r\n\r\nThe function takes an array as input and returns a new array that contains the sorted elements of the input array. The algorithm used in this function is called counting sort. Counting sort works by counting the number of occurrences of each element in the array and storing the count in a separate list. Then, it modifies the count list such that each element at index i stores the sum of all elements before it. Finally, it places the elements in the sorted array in their correct position based on their count. "}

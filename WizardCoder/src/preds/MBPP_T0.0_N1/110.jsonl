{"task_id": 121, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef check_triplet(arr, target_sum1, target_sum2, target_sum3):\r\n    arr.sort()\r\n    n = len(arr)\r\n    for i in range(n-2):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum1:\r\n                return True\r\n            elif current_sum < target_sum1:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    for i in range(n-1):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum2:\r\n                return True\r\n            elif current_sum < target_sum2:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    for i in range(n-2):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum3:\r\n                return True\r\n            elif current_sum < target_sum3:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    return False\r\n```\r\n\r\nThe function takes in four parameters: the array `arr`, and three target sums `target_sum1`, `target_sum2`, and `target_sum3`. It first sorts the array in ascending order. Then, it uses three nested loops to iterate through the array and find the triplet with the given target sums. The first loop iterates through the array from the first element to the second-to-last element. The second loop iterates through the array from the second element to the second-to-last element. The third loop iterates through the array from the third element to the second-to-last element. The three loops are nested to ensure that we find the triplet with the smallest sum first. If we find a triplet with the given target sum, we return `True`. If we reach the end of the loops without finding a triplet, we return `False`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the triplet with sum of the given array\nTest examples:\nassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef check_triplet(arr, target_sum1, target_sum2, target_sum3):\r\n    arr.sort()\r\n    n = len(arr)\r\n    for i in range(n-2):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum1:\r\n                return True\r\n            elif current_sum < target_sum1:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    for i in range(n-1):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum2:\r\n                return True\r\n            elif current_sum < target_sum2:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    for i in range(n-2):\r\n        left = i+1\r\n        right = n-1\r\n        while left < right:\r\n            current_sum = arr[i] + arr[left] + arr[right]\r\n            if current_sum == target_sum3:\r\n                return True\r\n            elif current_sum < target_sum3:\r\n                left += 1\r\n            else:\r\n                right -= 1\r\n    return False\r\n```\r\n\r\nThe function takes in four parameters: the array `arr`, and three target sums `target_sum1`, `target_sum2`, and `target_sum3`. It first sorts the array in ascending order. Then, it uses three nested loops to iterate through the array and find the triplet with the given target sums. The first loop iterates through the array from the first element to the second-to-last element. The second loop iterates through the array from the second element to the second-to-last element. The third loop iterates through the array from the third element to the second-to-last element. The three loops are nested to ensure that we find the triplet with the smallest sum first. If we find a triplet with the given target sum, we return `True`. If we reach the end of the loops without finding a triplet, we return `False`. "}

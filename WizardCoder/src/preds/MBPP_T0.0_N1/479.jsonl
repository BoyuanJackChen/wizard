{"task_id": 490, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef extract_symmetric(lst):\r\n    symmetric_pairs = set()\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if lst[i] == lst[j][::-1]:\r\n                symmetric_pairs.add(tuple(sorted(lst[i])))\r\n    return symmetric_pairs\r\n```\r\n\r\nExplanation:\r\n\r\n- The function `extract_symmetric` takes a list of tuples as input.\r\n- We initialize an empty set `symmetric_pairs` to store the symmetric pairs.\r\n- We iterate over the list using two nested loops. The outer loop iterates over the indices of the tuples, and the inner loop iterates over the indices of the tuples starting from the next index.\r\n- For each pair of tuples, we check if they are symmetric by comparing their elements in reverse order. If they are symmetric, we add the sorted tuple to the `symmetric_pairs` set.\r\n- Finally, we return the `symmetric_pairs` set containing all the symmetric pairs.\r\n\r\nLet's test the function with the given test cases:\r\n\r\n```python\r\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\r\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\r\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\r\n```\r\n\r\nThe function works as expected and returns the correct output for all the test cases. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to extract all the pairs which are symmetric in the given tuple list.\nTest examples:\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef extract_symmetric(lst):\r\n    symmetric_pairs = set()\r\n    for i in range(len(lst)):\r\n        for j in range(i+1, len(lst)):\r\n            if lst[i] == lst[j][::-1]:\r\n                symmetric_pairs.add(tuple(sorted(lst[i])))\r\n    return symmetric_pairs\r\n```\r\n\r\nExplanation:\r\n\r\n- The function `extract_symmetric` takes a list of tuples as input.\r\n- We initialize an empty set `symmetric_pairs` to store the symmetric pairs.\r\n- We iterate over the list using two nested loops. The outer loop iterates over the indices of the tuples, and the inner loop iterates over the indices of the tuples starting from the next index.\r\n- For each pair of tuples, we check if they are symmetric by comparing their elements in reverse order. If they are symmetric, we add the sorted tuple to the `symmetric_pairs` set.\r\n- Finally, we return the `symmetric_pairs` set containing all the symmetric pairs.\r\n\r\nLet's test the function with the given test cases:\r\n\r\n```python\r\nassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\r\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\r\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}\r\n```\r\n\r\nThe function works as expected and returns the correct output for all the test cases. "}

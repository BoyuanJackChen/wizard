{"task_id": 298, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef intersection_nested_lists(list1, list2):\r\n    result = []\r\n    for sublist in list1:\r\n        if sublist in list2:\r\n            result.append(sublist)\r\n    return result\r\n\r\n# Test cases\r\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\r\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\r\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\r\n```\r\n\r\nThe `intersection_nested_lists` function takes two lists as input and returns a list of nested lists that are present in both input lists. The function first initializes an empty list `result`. It then iterates over each sublist in the first list and checks if it is present in the second list. If it is present, the sublist is appended to the `result` list. Finally, the function returns the `result` list. \r\n\r\nThe test cases provided in the problem statement are used to test the function. The first test case checks if the function correctly identifies the nested lists that are present in both input lists. The second test case checks if the function correctly identifies the nested lists that are not present in both input lists. The third test case checks if the function correctly identifies the nested lists that are present in both input lists, even if the input lists contain non-nested lists. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the nested list elements which are present in another list.\nTest examples:\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef intersection_nested_lists(list1, list2):\r\n    result = []\r\n    for sublist in list1:\r\n        if sublist in list2:\r\n            result.append(sublist)\r\n    return result\r\n\r\n# Test cases\r\nassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\r\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\r\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\r\n```\r\n\r\nThe `intersection_nested_lists` function takes two lists as input and returns a list of nested lists that are present in both input lists. The function first initializes an empty list `result`. It then iterates over each sublist in the first list and checks if it is present in the second list. If it is present, the sublist is appended to the `result` list. Finally, the function returns the `result` list. \r\n\r\nThe test cases provided in the problem statement are used to test the function. The first test case checks if the function correctly identifies the nested lists that are present in both input lists. The second test case checks if the function correctly identifies the nested lists that are not present in both input lists. The third test case checks if the function correctly identifies the nested lists that are present in both input lists, even if the input lists contain non-nested lists. "}

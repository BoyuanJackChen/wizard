{"task_id": 401, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef add_nested_tuples(t1, t2):\r\n    result = []\r\n    for i in range(len(t1)):\r\n        result.append(tuple(t1[i][j] + t2[i][j] for j in range(len(t1[i]))))\r\n    return tuple(result)\r\n\r\n# Test cases\r\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\r\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\r\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\r\n```\r\n\r\nThe `add_nested_tuples` function takes two nested tuples as input and returns a new nested tuple with the index-wise addition of the corresponding elements of the input tuples. The function uses a list comprehension to iterate over the elements of the input tuples and add them together. The resulting list is then converted back to a tuple using the `tuple` function. The function is tested with three test cases. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\nTest examples:\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef add_nested_tuples(t1, t2):\r\n    result = []\r\n    for i in range(len(t1)):\r\n        result.append(tuple(t1[i][j] + t2[i][j] for j in range(len(t1[i]))))\r\n    return tuple(result)\r\n\r\n# Test cases\r\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\r\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\r\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\r\n```\r\n\r\nThe `add_nested_tuples` function takes two nested tuples as input and returns a new nested tuple with the index-wise addition of the corresponding elements of the input tuples. The function uses a list comprehension to iterate over the elements of the input tuples and add them together. The resulting list is then converted back to a tuple using the `tuple` function. The function is tested with three test cases. "}

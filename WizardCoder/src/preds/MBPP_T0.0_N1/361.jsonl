{"task_id": 372, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\nimport heapq\r\n\r\ndef heap_assending(lst):\r\n    heapq.heapify(lst)\r\n    return [heapq.heappop(lst) for i in range(len(lst))]\r\n\r\n# Test cases\r\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\r\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\r\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\r\n\r\nThe `heap_assending` function takes a list as input and returns a new list with the elements sorted in ascending order using the heap queue algorithm. The `heapq` module is used to implement the heap queue algorithm. The `heapify` function is used to convert the list into a heap, and the `heappop` function is used to pop the smallest element from the heap repeatedly until the heap is empty. The resulting list is returned. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to sort a given list of elements in ascending order using heap queue algorithm.\nTest examples:\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\nimport heapq\r\n\r\ndef heap_assending(lst):\r\n    heapq.heapify(lst)\r\n    return [heapq.heappop(lst) for i in range(len(lst))]\r\n\r\n# Test cases\r\nassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\r\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\r\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\r\n```\r\n\r\nThe `heap_assending` function takes a list as input and returns a new list with the elements sorted in ascending order using the heap queue algorithm. The `heapq` module is used to implement the heap queue algorithm. The `heapify` function is used to convert the list into a heap, and the `heappop` function is used to pop the smallest element from the heap repeatedly until the heap is empty. The resulting list is returned. "}

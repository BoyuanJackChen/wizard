{"task_id": 314, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef max_sum_rectangular_grid(grid, n):\r\n    # Initialize the maximum sum and the current sum\r\n    max_sum = 0\r\n    curr_sum = 0\r\n    \r\n    # Iterate through the grid\r\n    for i in range(n):\r\n        for j in range(n):\r\n            # If the current element is not adjacent to the previous element\r\n            if j == 0 or grid[i][j] != grid[i][j-1]:\r\n                # Add the current element to the current sum\r\n                curr_sum += grid[i][j]\r\n            # If the current element is adjacent to the previous element\r\n            else:\r\n                # Update the maximum sum if the current sum is greater than the maximum sum\r\n                max_sum = max(max_sum, curr_sum)\r\n                # Reset the current sum\r\n                curr_sum = 0\r\n    \r\n    # Update the maximum sum if the current sum is greater than the maximum sum\r\n    max_sum = max(max_sum, curr_sum)\r\n    \r\n    return max_sum\r\n```\r\n\r\nThe function takes in a rectangular grid of dimension 2 x n and returns the maximum sum such that no two chosen numbers are adjacent. The function iterates through the grid and keeps track of the current sum and the maximum sum. If the current element is not adjacent to the previous element, it is added to the current sum. If the current element is adjacent to the previous element, the current sum is reset to 0 and the maximum sum is updated if the current sum is greater than the maximum sum. Finally, the maximum sum is returned. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\nTest examples:\nassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef max_sum_rectangular_grid(grid, n):\r\n    # Initialize the maximum sum and the current sum\r\n    max_sum = 0\r\n    curr_sum = 0\r\n    \r\n    # Iterate through the grid\r\n    for i in range(n):\r\n        for j in range(n):\r\n            # If the current element is not adjacent to the previous element\r\n            if j == 0 or grid[i][j] != grid[i][j-1]:\r\n                # Add the current element to the current sum\r\n                curr_sum += grid[i][j]\r\n            # If the current element is adjacent to the previous element\r\n            else:\r\n                # Update the maximum sum if the current sum is greater than the maximum sum\r\n                max_sum = max(max_sum, curr_sum)\r\n                # Reset the current sum\r\n                curr_sum = 0\r\n    \r\n    # Update the maximum sum if the current sum is greater than the maximum sum\r\n    max_sum = max(max_sum, curr_sum)\r\n    \r\n    return max_sum\r\n```\r\n\r\nThe function takes in a rectangular grid of dimension 2 x n and returns the maximum sum such that no two chosen numbers are adjacent. The function iterates through the grid and keeps track of the current sum and the maximum sum. If the current element is not adjacent to the previous element, it is added to the current sum. If the current element is adjacent to the previous element, the current sum is reset to 0 and the maximum sum is updated if the current sum is greater than the maximum sum. Finally, the maximum sum is returned. "}

{"task_id": 60, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef max_len_sub(arr, diff):\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if abs(arr[i] - arr[j]) <= diff:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n# Test cases\r\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\r\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\r\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1\r\n```\r\n\r\nThe `max_len_sub` function takes an array `arr` and a difference `diff` as input. It initializes a list `dp` of length `n` with all elements set to 1. It then iterates through the array and checks if the absolute difference between the current element and any previous element is less than or equal to `diff`. If it is, it updates the `dp` list with the maximum value of the current `dp` list element and the previous `dp` list element plus 1. Finally, it returns the maximum value in the `dp` list. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\nTest examples:\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef max_len_sub(arr, diff):\r\n    n = len(arr)\r\n    dp = [1] * n\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            if abs(arr[i] - arr[j]) <= diff:\r\n                dp[i] = max(dp[i], dp[j] + 1)\r\n    return max(dp)\r\n\r\n# Test cases\r\nassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\r\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\r\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1\r\n```\r\n\r\nThe `max_len_sub` function takes an array `arr` and a difference `diff` as input. It initializes a list `dp` of length `n` with all elements set to 1. It then iterates through the array and checks if the absolute difference between the current element and any previous element is less than or equal to `diff`. If it is, it updates the `dp` list with the maximum value of the current `dp` list element and the previous `dp` list element plus 1. Finally, it returns the maximum value in the `dp` list. "}

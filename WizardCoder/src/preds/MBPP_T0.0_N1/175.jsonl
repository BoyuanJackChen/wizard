{"task_id": 186, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\nimport re\r\n\r\ndef check_literals(string, literals):\r\n    for literal in literals:\r\n        if re.search(r'\\b' + literal + r'\\b', string):\r\n            return 'Matched!'\r\n    return 'Not Matched!'\r\n```\r\n\r\nThe `check_literals` function takes two arguments: `string` and `literals`. The `string` argument is the string in which we want to search for the literals. The `literals` argument is a list of strings that we want to search for in the string.\r\n\r\nThe function uses the `re` module to search for the literals in the string. The `re.search` function searches for a pattern in a string. In this case, we are searching for the literal strings surrounded by word boundaries (`\\b`). If we don't use word boundaries, the function might match partial words as well, which we don't want.\r\n\r\nThe function loops through each literal in the `literals` list and checks if it is present in the `string`. If it is present, the function returns `'Matched!'`. If none of the literals are present in the `string`, the function returns `'Not Matched!'`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to search some literals strings in a string by using regex.\nTest examples:\nassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\nimport re\r\n\r\ndef check_literals(string, literals):\r\n    for literal in literals:\r\n        if re.search(r'\\b' + literal + r'\\b', string):\r\n            return 'Matched!'\r\n    return 'Not Matched!'\r\n```\r\n\r\nThe `check_literals` function takes two arguments: `string` and `literals`. The `string` argument is the string in which we want to search for the literals. The `literals` argument is a list of strings that we want to search for in the string.\r\n\r\nThe function uses the `re` module to search for the literals in the string. The `re.search` function searches for a pattern in a string. In this case, we are searching for the literal strings surrounded by word boundaries (`\\b`). If we don't use word boundaries, the function might match partial words as well, which we don't want.\r\n\r\nThe function loops through each literal in the `literals` list and checks if it is present in the `string`. If it is present, the function returns `'Matched!'`. If none of the literals are present in the `string`, the function returns `'Not Matched!'`. "}

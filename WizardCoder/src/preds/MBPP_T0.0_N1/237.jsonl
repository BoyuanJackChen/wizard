{"task_id": 248, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef harmonic_sum(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        sum += 1/i\r\n    return sum\r\n\r\n# Test cases\r\nassert harmonic_sum(7) == 2.5928571428571425\r\nassert harmonic_sum(4) == 2.083333333333333\r\nassert harmonic_sum(19) == 3.547739657143682\r\n```\r\n\r\nThe `harmonic_sum` function takes an integer `n` as input and returns the harmonic sum of `n-1`. The function uses a `for` loop to iterate from 1 to `n-1` and calculates the harmonic sum by adding the reciprocal of each number to a running total. Finally, the function returns the harmonic sum.\r\n\r\nThe test cases at the end of the script use the `assert` statement to check that the function returns the expected values for different inputs. If the function returns the expected values, the test cases will pass and the script will run without errors. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to calculate the harmonic sum of n-1.\nTest examples:\nassert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef harmonic_sum(n):\r\n    sum = 0\r\n    for i in range(1, n):\r\n        sum += 1/i\r\n    return sum\r\n\r\n# Test cases\r\nassert harmonic_sum(7) == 2.5928571428571425\r\nassert harmonic_sum(4) == 2.083333333333333\r\nassert harmonic_sum(19) == 3.547739657143682\r\n```\r\n\r\nThe `harmonic_sum` function takes an integer `n` as input and returns the harmonic sum of `n-1`. The function uses a `for` loop to iterate from 1 to `n-1` and calculates the harmonic sum by adding the reciprocal of each number to a running total. Finally, the function returns the harmonic sum.\r\n\r\nThe test cases at the end of the script use the `assert` statement to check that the function returns the expected values for different inputs. If the function returns the expected values, the test cases will pass and the script will run without errors. "}

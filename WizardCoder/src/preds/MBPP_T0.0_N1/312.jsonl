{"task_id": 323, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef re_arrange(arr, n):\r\n    # Initialize two pointers, one for positive and one for negative items\r\n    pos = 0\r\n    neg = 1\r\n    \r\n    # Loop through the array and swap items based on their sign\r\n    while neg < n:\r\n        if arr[pos] < 0 and arr[neg] > 0:\r\n            arr[pos], arr[neg] = arr[neg], arr[pos]\r\n            pos += 2\r\n            neg += 2\r\n        elif arr[pos] >= 0:\r\n            pos += 1\r\n        elif arr[neg] <= 0:\r\n            neg += 1\r\n    \r\n    return arr\r\n```\r\n\r\nThe function takes two arguments - the input array `arr` and the size of the array `n`. It initializes two pointers, one for positive and one for negative items. It then loops through the array and swaps items based on their sign. If the current item is negative and the next item is positive, it swaps them and moves both pointers two steps forward. If the current item is positive, it moves the positive pointer one step forward. If the current item is negative, it moves the negative pointer one step forward. Finally, it returns the re-arranged array. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to re-arrange the given array in alternating positive and negative items.\nTest examples:\nassert re_arrange([-5, -2, 5, 2, 4,    7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef re_arrange(arr, n):\r\n    # Initialize two pointers, one for positive and one for negative items\r\n    pos = 0\r\n    neg = 1\r\n    \r\n    # Loop through the array and swap items based on their sign\r\n    while neg < n:\r\n        if arr[pos] < 0 and arr[neg] > 0:\r\n            arr[pos], arr[neg] = arr[neg], arr[pos]\r\n            pos += 2\r\n            neg += 2\r\n        elif arr[pos] >= 0:\r\n            pos += 1\r\n        elif arr[neg] <= 0:\r\n            neg += 1\r\n    \r\n    return arr\r\n```\r\n\r\nThe function takes two arguments - the input array `arr` and the size of the array `n`. It initializes two pointers, one for positive and one for negative items. It then loops through the array and swaps items based on their sign. If the current item is negative and the next item is positive, it swaps them and moves both pointers two steps forward. If the current item is positive, it moves the positive pointer one step forward. If the current item is negative, it moves the negative pointer one step forward. Finally, it returns the re-arranged array. "}

{"task_id": 291, "completion": "Here's a Python script that implements the function `count_no_of_ways` as described in the problem statement:\n\n```python\ndef count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        for j in range(1, i):\n            for color in range(1, k + 1):\n                if j == 1 or dp[j - 1] != color or dp[j] != color:\n                    dp[i] += dp[j - 1]\n\n    return dp[n]\n\n# Test cases\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228\n```\n\nThis script defines the `count_no_of_ways` function, which takes two arguments `n` and `k` and returns the number of ways to paint the fence with `n` posts and `k` colors such that at most 2 adjacent posts have the same color. The function uses dynamic programming to compute the number of ways in a bottom-up manner. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\nTest examples:\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228\n\n### Response:Here's a Python script that implements the function `count_no_of_ways` as described in the problem statement:\n\n```python\ndef count_no_of_ways(n, k):\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[1] = k\n    dp[2] = k * k\n\n    for i in range(3, n + 1):\n        for j in range(1, i):\n            for color in range(1, k + 1):\n                if j == 1 or dp[j - 1] != color or dp[j] != color:\n                    dp[i] += dp[j - 1]\n\n    return dp[n]\n\n# Test cases\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228\n```\n\nThis script defines the `count_no_of_ways` function, which takes two arguments `n` and `k` and returns the number of ways to paint the fence with `n` posts and `k` colors such that at most 2 adjacent posts have the same color. The function uses dynamic programming to compute the number of ways in a bottom-up manner. "}

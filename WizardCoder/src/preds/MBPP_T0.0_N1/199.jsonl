{"task_id": 210, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\nimport re\r\n\r\ndef is_allowed_specific_char(string):\r\n    pattern = re.compile(r'^[a-zA-Z0-9]+$')\r\n    return bool(pattern.match(string))\r\n\r\n# Test cases\r\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\r\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\r\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True\r\n```\r\n\r\nExplanation:\r\n\r\nThe `is_allowed_specific_char` function takes a string as input and uses the `re` module to create a regular expression pattern that matches only the characters a-z, A-Z, and 0-9. The `^` and `$` characters are used to match the start and end of the string respectively. The `+` character is used to match one or more occurrences of the pattern. The `match` method is used to check if the pattern matches the entire string. If the pattern matches, the function returns `True`, otherwise it returns `False`.\r\n\r\nThe test cases provided in the problem statement are used to test the function. The first test case checks if the function returns `True` for a string that contains only the allowed characters. The second test case checks if the function returns `False` for a string that contains characters that are not allowed. The third test case checks if the function returns `True` for a string that contains only the allowed characters. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\nTest examples:\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\nimport re\r\n\r\ndef is_allowed_specific_char(string):\r\n    pattern = re.compile(r'^[a-zA-Z0-9]+$')\r\n    return bool(pattern.match(string))\r\n\r\n# Test cases\r\nassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\r\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\r\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True\r\n```\r\n\r\nExplanation:\r\n\r\nThe `is_allowed_specific_char` function takes a string as input and uses the `re` module to create a regular expression pattern that matches only the characters a-z, A-Z, and 0-9. The `^` and `$` characters are used to match the start and end of the string respectively. The `+` character is used to match one or more occurrences of the pattern. The `match` method is used to check if the pattern matches the entire string. If the pattern matches, the function returns `True`, otherwise it returns `False`.\r\n\r\nThe test cases provided in the problem statement are used to test the function. The first test case checks if the function returns `True` for a string that contains only the allowed characters. The second test case checks if the function returns `False` for a string that contains characters that are not allowed. The third test case checks if the function returns `True` for a string that contains only the allowed characters. "}

{"task_id": 510, "completion": "Here's a Python function that solves the problem:\n\n```python\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] < k:\n                count += dp[j] - dp[i]\n\n    return count\n\n# Test cases\nassert no_of_subsequences([1, 2, 3, 4], 10) == 11\nassert no_of_subsequences([4, 8, 7, 2], 50) == 9\nassert no_of_subsequences([5, 6, 7, 8], 15) == 4\n```\n\nThis function uses dynamic programming to find the number of subsequences having product smaller than k. It first calculates the length of the longest increasing subsequence for each element in the array, and then iterates through all pairs of elements in the array to count the number of subsequences with product smaller than k. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the number of subsequences having product smaller than k for the given non negative array.\nTest examples:\nassert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4\n\n### Response:Here's a Python function that solves the problem:\n\n```python\ndef no_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] < k:\n                count += dp[j] - dp[i]\n\n    return count\n\n# Test cases\nassert no_of_subsequences([1, 2, 3, 4], 10) == 11\nassert no_of_subsequences([4, 8, 7, 2], 50) == 9\nassert no_of_subsequences([5, 6, 7, 8], 15) == 4\n```\n\nThis function uses dynamic programming to find the number of subsequences having product smaller than k. It first calculates the length of the longest increasing subsequence for each element in the array, and then iterates through all pairs of elements in the array to count the number of subsequences with product smaller than k. "}

{"task_id": 229, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef re_arrange_array(arr, n):\r\n    neg = []\r\n    pos = []\r\n    for i in range(n):\r\n        if arr[i] < 0:\r\n            neg.append(arr[i])\r\n        else:\r\n            pos.append(arr[i])\r\n    return neg + pos\r\n\r\n# Test cases\r\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\r\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\r\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\r\n```\r\n\r\nThe function `re_arrange_array` takes two arguments: the array `arr` and its length `n`. It creates two empty lists `neg` and `pos` to store the negative and positive elements of the array, respectively. It then iterates through the array and appends the negative elements to `neg` and the positive elements to `pos`. Finally, it returns the concatenation of `neg` and `pos`. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\nTest examples:\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef re_arrange_array(arr, n):\r\n    neg = []\r\n    pos = []\r\n    for i in range(n):\r\n        if arr[i] < 0:\r\n            neg.append(arr[i])\r\n        else:\r\n            pos.append(arr[i])\r\n    return neg + pos\r\n\r\n# Test cases\r\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\r\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\r\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\r\n```\r\n\r\nThe function `re_arrange_array` takes two arguments: the array `arr` and its length `n`. It creates two empty lists `neg` and `pos` to store the negative and positive elements of the array, respectively. It then iterates through the array and appends the negative elements to `neg` and the positive elements to `pos`. Finally, it returns the concatenation of `neg` and `pos`. "}

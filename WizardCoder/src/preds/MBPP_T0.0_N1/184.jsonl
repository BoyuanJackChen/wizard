{"task_id": 195, "completion": "Here's the Python function to find the first position of an element in a sorted array:\r\n\r\n```python\r\ndef first(arr, target, n):\r\n    left = 0\r\n    right = n - 1\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == target:\r\n            result = mid\r\n            right = mid - 1\r\n        elif arr[mid] < target:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n    return result\r\n```\r\n\r\nThe function takes in three arguments: `arr` is the sorted array, `target` is the element to be searched for, and `n` is the length of the array. The function returns the index of the first occurrence of the target element in the array, or -1 if the element is not found.\r\n\r\nThe function uses binary search to find the first occurrence of the target element in the array. It starts by initializing the left and right pointers to the beginning and end of the array, respectively. It also initializes a result variable to -1, which will be used to store the index of the first occurrence of the target element.\r\n\r\nThe function then enters a while loop that continues as long as the left pointer is less than or equal to the right pointer. In each iteration of the loop, the function computes the middle index of the array using integer division. If the element at the middle index is equal to the target element, the function updates the result variable to the middle index and moves the right pointer to the left of the middle index. If the element at the middle index is less than the target element, the function moves the left pointer to the right of the middle index. If the element at the middle index is greater than the target element, the function moves the right pointer to the left of the middle index.\r\n\r\nOnce the while loop terminates, the function returns the result variable, which will be the index of the first occurrence of the target element in the array, or -1 if the element is not found. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a python function to find the first position of an element in a sorted array.\nTest examples:\nassert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0\n\n### Response:Here's the Python function to find the first position of an element in a sorted array:\r\n\r\n```python\r\ndef first(arr, target, n):\r\n    left = 0\r\n    right = n - 1\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if arr[mid] == target:\r\n            result = mid\r\n            right = mid - 1\r\n        elif arr[mid] < target:\r\n            left = mid + 1\r\n        else:\r\n            right = mid - 1\r\n    return result\r\n```\r\n\r\nThe function takes in three arguments: `arr` is the sorted array, `target` is the element to be searched for, and `n` is the length of the array. The function returns the index of the first occurrence of the target element in the array, or -1 if the element is not found.\r\n\r\nThe function uses binary search to find the first occurrence of the target element in the array. It starts by initializing the left and right pointers to the beginning and end of the array, respectively. It also initializes a result variable to -1, which will be used to store the index of the first occurrence of the target element.\r\n\r\nThe function then enters a while loop that continues as long as the left pointer is less than or equal to the right pointer. In each iteration of the loop, the function computes the middle index of the array using integer division. If the element at the middle index is equal to the target element, the function updates the result variable to the middle index and moves the right pointer to the left of the middle index. If the element at the middle index is less than the target element, the function moves the left pointer to the right of the middle index. If the element at the middle index is greater than the target element, the function moves the right pointer to the left of the middle index.\r\n\r\nOnce the while loop terminates, the function returns the result variable, which will be the index of the first occurrence of the target element in the array, or -1 if the element is not found. "}

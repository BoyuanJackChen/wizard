{"task_id": 492, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef binary_search(arr, x):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] == x:\r\n            return True\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    return False\r\n```\r\n\r\nThe function takes two arguments - the array to search in and the element to search for. It uses binary search algorithm to search for the element in the array. The algorithm works by repeatedly dividing the search interval in half. If the middle element of the interval is equal to the given element, the search is successful. If the middle element is greater than the given element, the search continues in the lower half of the interval. If the middle element is less than the given element, the search continues in the upper half of the interval. The search continues until the interval is empty or the given element is found.\r\n\r\nThe function returns True if the element is found in the array, and False otherwise.\r\n\r\nHere are the test cases:\r\n\r\n```python\r\nassert binary_search([1,2,3,5,8], 6) == False\r\nassert binary_search([7, 8, 9, 10, 13], 10) == True\r\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False\r\n```\r\n\r\nThe first test case checks if the element 6 is present in the array [1,2,3,5,8]. The function returns False, which is the expected output.\r\n\r\nThe second test case checks if the element 10 is present in the array [7, 8, 9, 10, 13]. The function returns True, which is the expected output.\r\n\r\nThe third test case checks if the element 23 is present in the array [11, 13, 14, 19, 22, 36]. The function returns False, which is the expected output. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to search an element in the given array by using binary search.\nTest examples:\nassert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef binary_search(arr, x):\r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high:\r\n        mid = (low + high) // 2\r\n        if arr[mid] == x:\r\n            return True\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            high = mid - 1\r\n    return False\r\n```\r\n\r\nThe function takes two arguments - the array to search in and the element to search for. It uses binary search algorithm to search for the element in the array. The algorithm works by repeatedly dividing the search interval in half. If the middle element of the interval is equal to the given element, the search is successful. If the middle element is greater than the given element, the search continues in the lower half of the interval. If the middle element is less than the given element, the search continues in the upper half of the interval. The search continues until the interval is empty or the given element is found.\r\n\r\nThe function returns True if the element is found in the array, and False otherwise.\r\n\r\nHere are the test cases:\r\n\r\n```python\r\nassert binary_search([1,2,3,5,8], 6) == False\r\nassert binary_search([7, 8, 9, 10, 13], 10) == True\r\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False\r\n```\r\n\r\nThe first test case checks if the element 6 is present in the array [1,2,3,5,8]. The function returns False, which is the expected output.\r\n\r\nThe second test case checks if the element 10 is present in the array [7, 8, 9, 10, 13]. The function returns True, which is the expected output.\r\n\r\nThe third test case checks if the element 23 is present in the array [11, 13, 14, 19, 22, 36]. The function returns False, which is the expected output. "}

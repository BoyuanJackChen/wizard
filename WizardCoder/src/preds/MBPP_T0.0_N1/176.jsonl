{"task_id": 187, "completion": "Here's a Python script that implements the function to find the longest common subsequence for the given two sequences:\r\n\r\n```python\r\ndef longest_common_subsequence(s1, s2, m, n):\r\n    # Create a table to store lengths of longest common suffixes of substrings\r\n    # of s1 and s2. The table is filled in a bottom-up manner.\r\n    table = [[0] * (n + 1) for _ in range(m + 1)]\r\n    for i in range(1, m + 1):\r\n        for j in range(1, n + 1):\r\n            if s1[i - 1] == s2[j - 1]:\r\n                table[i][j] = table[i - 1][j - 1] + 1\r\n            else:\r\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\r\n    # The length of the longest common subsequence is stored in the bottom-right corner of the table.\r\n    return table[m][n]\r\n```\r\n\r\nThe function takes four arguments: `s1` and `s2` are the two sequences to find the longest common subsequence for, `m` and `n` are the lengths of `s1` and `s2`, respectively. The function returns the length of the longest common subsequence.\r\n\r\nThe function uses dynamic programming to fill in a table of lengths of longest common suffixes of substrings of `s1` and `s2`. The table is filled in a bottom-up manner, starting from the first row and first column and working our way up to the last row and last column. The length of the longest common subsequence is stored in the bottom-right corner of the table.\r\n\r\nThe function checks whether the characters at the current positions in `s1` and `s2` are the same. If they are, it adds 1 to the length of the longest common suffix of the substrings that end at those positions. Otherwise, it takes the maximum of the lengths of the longest common suffixes of the substrings that end at the previous positions in `s1` and `s2`.\r\n\r\nHere are some test examples:\r\n\r\n```python\r\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\r\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\r\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2\r\n```\r\n\r\nThe first test example checks whether the longest common subsequence of \"AGGTAB\" and \"GXTXAYB\" is 4. The longest common subsequence is \"GTAB\", which has a length of 4.\r\n\r\nThe second test example checks whether the longest common subsequence of \"ABCDGH\" and \"AEDFHR\" is 3. The longest common subsequence is \"ADGH\", which has a length of 3.\r\n\r\nThe third test example checks whether the longest common subsequence of \"AXYT\" and \"AYZX\" is 2. The longest common subsequence is \"AY\", which has a length of 2. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the longest common subsequence for the given two sequences.\nTest examples:\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2\n\n### Response:Here's a Python script that implements the function to find the longest common subsequence for the given two sequences:\r\n\r\n```python\r\ndef longest_common_subsequence(s1, s2, m, n):\r\n    # Create a table to store lengths of longest common suffixes of substrings\r\n    # of s1 and s2. The table is filled in a bottom-up manner.\r\n    table = [[0] * (n + 1) for _ in range(m + 1)]\r\n    for i in range(1, m + 1):\r\n        for j in range(1, n + 1):\r\n            if s1[i - 1] == s2[j - 1]:\r\n                table[i][j] = table[i - 1][j - 1] + 1\r\n            else:\r\n                table[i][j] = max(table[i - 1][j], table[i][j - 1])\r\n    # The length of the longest common subsequence is stored in the bottom-right corner of the table.\r\n    return table[m][n]\r\n```\r\n\r\nThe function takes four arguments: `s1` and `s2` are the two sequences to find the longest common subsequence for, `m` and `n` are the lengths of `s1` and `s2`, respectively. The function returns the length of the longest common subsequence.\r\n\r\nThe function uses dynamic programming to fill in a table of lengths of longest common suffixes of substrings of `s1` and `s2`. The table is filled in a bottom-up manner, starting from the first row and first column and working our way up to the last row and last column. The length of the longest common subsequence is stored in the bottom-right corner of the table.\r\n\r\nThe function checks whether the characters at the current positions in `s1` and `s2` are the same. If they are, it adds 1 to the length of the longest common suffix of the substrings that end at those positions. Otherwise, it takes the maximum of the lengths of the longest common suffixes of the substrings that end at the previous positions in `s1` and `s2`.\r\n\r\nHere are some test examples:\r\n\r\n```python\r\nassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\r\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\r\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2\r\n```\r\n\r\nThe first test example checks whether the longest common subsequence of \"AGGTAB\" and \"GXTXAYB\" is 4. The longest common subsequence is \"GTAB\", which has a length of 4.\r\n\r\nThe second test example checks whether the longest common subsequence of \"ABCDGH\" and \"AEDFHR\" is 3. The longest common subsequence is \"ADGH\", which has a length of 3.\r\n\r\nThe third test example checks whether the longest common subsequence of \"AXYT\" and \"AYZX\" is 2. The longest common subsequence is \"AY\", which has a length of 2. "}

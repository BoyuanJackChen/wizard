{"task_id": 281, "completion": "Here's the Python function to check if the elements of a given list are unique or not:\r\n\r\n```python\r\ndef all_unique(lst):\r\n    return len(lst) == len(set(lst))\r\n```\r\n\r\nThis function uses the `set()` function to remove duplicates from the list and then compares the length of the original list with the length of the set. If they are equal, then all the elements in the list are unique. Otherwise, there are duplicates in the list.\r\n\r\nHere are the test examples:\r\n\r\n```python\r\nassert all_unique([1,2,3]) == True\r\nassert all_unique([1,2,1,2]) == False\r\nassert all_unique([1,2,3,4,5]) == True\r\n```\r\n\r\nAll of these test cases should pass. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a python function to check if the elements of a given list are unique or not.\nTest examples:\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True\n\n### Response:Here's the Python function to check if the elements of a given list are unique or not:\r\n\r\n```python\r\ndef all_unique(lst):\r\n    return len(lst) == len(set(lst))\r\n```\r\n\r\nThis function uses the `set()` function to remove duplicates from the list and then compares the length of the original list with the length of the set. If they are equal, then all the elements in the list are unique. Otherwise, there are duplicates in the list.\r\n\r\nHere are the test examples:\r\n\r\n```python\r\nassert all_unique([1,2,3]) == True\r\nassert all_unique([1,2,1,2]) == False\r\nassert all_unique([1,2,3,4,5]) == True\r\n```\r\n\r\nAll of these test cases should pass. "}

{"task_id": 300, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef count_binary_seq(n):\r\n    count = 0\r\n    for i in range(2**n):\r\n        binary_str = bin(i)[2:].zfill(n)\r\n        if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[n:]):\r\n            count += 1\r\n    return count / 2**n\r\n```\r\n\r\nExplanation:\r\n\r\n- The function `count_binary_seq` takes an integer `n` as input.\r\n- The variable `count` is initialized to 0.\r\n- A loop is run from 0 to 2^n-1.\r\n- Inside the loop, the current number `i` is converted to a binary string using the `bin()` function and the `zfill()` method is used to ensure that the binary string has length `n`.\r\n- The sum of the first `n` bits and the sum of the last `n` bits are calculated using a list comprehension and the `sum()` function.\r\n- If the sums are equal, the count is incremented by 1.\r\n- Finally, the count is returned as the result divided by 2^n to get the probability of finding a sequence that satisfies the given condition.\r\n\r\nTest examples:\r\n\r\n```python\r\nassert count_binary_seq(1) == 2.0\r\nassert count_binary_seq(2) == 6.0\r\nassert count_binary_seq(3) == 20.0\r\n```\r\n\r\nThe first test example checks if the function returns the correct count for a binary sequence of length 1. The second test example checks if the function returns the correct count for a binary sequence of length 2. The third test example checks if the function returns the correct count for a binary sequence of length 3. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nTest examples:\nassert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef count_binary_seq(n):\r\n    count = 0\r\n    for i in range(2**n):\r\n        binary_str = bin(i)[2:].zfill(n)\r\n        if sum(int(bit) for bit in binary_str[:n]) == sum(int(bit) for bit in binary_str[n:]):\r\n            count += 1\r\n    return count / 2**n\r\n```\r\n\r\nExplanation:\r\n\r\n- The function `count_binary_seq` takes an integer `n` as input.\r\n- The variable `count` is initialized to 0.\r\n- A loop is run from 0 to 2^n-1.\r\n- Inside the loop, the current number `i` is converted to a binary string using the `bin()` function and the `zfill()` method is used to ensure that the binary string has length `n`.\r\n- The sum of the first `n` bits and the sum of the last `n` bits are calculated using a list comprehension and the `sum()` function.\r\n- If the sums are equal, the count is incremented by 1.\r\n- Finally, the count is returned as the result divided by 2^n to get the probability of finding a sequence that satisfies the given condition.\r\n\r\nTest examples:\r\n\r\n```python\r\nassert count_binary_seq(1) == 2.0\r\nassert count_binary_seq(2) == 6.0\r\nassert count_binary_seq(3) == 20.0\r\n```\r\n\r\nThe first test example checks if the function returns the correct count for a binary sequence of length 1. The second test example checks if the function returns the correct count for a binary sequence of length 2. The third test example checks if the function returns the correct count for a binary sequence of length 3. "}

{"task_id": 216, "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef check_subset_list(nested_list1, nested_list2):\r\n    for sublist in nested_list1:\r\n        if sublist not in nested_list2:\r\n            return False\r\n    return True\r\n```\r\n\r\nThe function takes two nested lists as input and returns True if the first list is a subset of the second list, and False otherwise. It does this by iterating through each sublist in the first list and checking if it is present in the second list. If any sublist is not present in the second list, the function returns False. If all sublists are present in the second list, the function returns True.\r\n\r\nThe test cases provided in the problem statement can be tested using the following code:\r\n\r\n```python\r\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\r\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\r\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\r\n```\r\n\r\nThe first test case should return False because the first list is not a subset of the second list. The second test case should return True because all sublists in the first list are present in the second list. The third test case should return False because the first list is not a subset of the second list. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to check if a nested list is a subset of another nested list.\nTest examples:\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef check_subset_list(nested_list1, nested_list2):\r\n    for sublist in nested_list1:\r\n        if sublist not in nested_list2:\r\n            return False\r\n    return True\r\n```\r\n\r\nThe function takes two nested lists as input and returns True if the first list is a subset of the second list, and False otherwise. It does this by iterating through each sublist in the first list and checking if it is present in the second list. If any sublist is not present in the second list, the function returns False. If all sublists are present in the second list, the function returns True.\r\n\r\nThe test cases provided in the problem statement can be tested using the following code:\r\n\r\n```python\r\nassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\r\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\r\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False\r\n```\r\n\r\nThe first test case should return False because the first list is not a subset of the second list. The second test case should return True because all sublists in the first list are present in the second list. The third test case should return False because the first list is not a subset of the second list. "}

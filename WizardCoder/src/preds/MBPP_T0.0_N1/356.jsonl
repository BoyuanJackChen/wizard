{"task_id": 367, "completion": "Here's a Python function to check if a binary tree is balanced or not:\r\n\r\n```python\r\nclass TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\n\r\ndef is_tree_balanced(root: TreeNode) -> bool:\r\n    def height(node: TreeNode) -> int:\r\n        if not node:\r\n            return 0\r\n        \r\n        left_height = height(node.left)\r\n        right_height = height(node.right)\r\n        \r\n        if left_height == -1 or right_height == -1:\r\n            return -1\r\n        \r\n        return max(left_height, right_height) + 1\r\n    \r\n    return height(root) != -1\r\n```\r\n\r\nThe function `is_tree_balanced` takes a binary tree `root` as input and returns `True` if the tree is balanced and `False` otherwise. The function uses a helper function `height` to calculate the height of the tree. The `height` function returns `-1` if the tree is unbalanced. The `is_tree_balanced` function returns `True` if the height of the tree is not `-1`.\r\n\r\nHere are some test cases:\r\n\r\n```python\r\n# Test case 1\r\nroot = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\r\nassert is_tree_balanced(root) == False\r\n\r\n# Test case 2\r\nroot1 = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\r\nroot1.left.left.left = TreeNode(2)\r\nassert is_tree_balanced(root1) == True\r\n\r\n# Test case 3\r\nroot2 = TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4), TreeNode(4)), TreeNode(4)), TreeNode(2))\r\nassert is_tree_balanced(root2) == False\r\n```\r\n\r\nIn the first test case, the tree is not balanced because the left subtree has a height of 2 and the right subtree has a height of 3. In the second test case, the tree is balanced because all the subtrees have the same height. In the third test case, the tree is not balanced because the left subtree has a height of 3 and the right subtree has a height of 2. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to check if a binary tree is balanced or not.\nTest examples:\nassert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False \n\n### Response:Here's a Python function to check if a binary tree is balanced or not:\r\n\r\n```python\r\nclass TreeNode:\r\n    def __init__(self, val=0, left=None, right=None):\r\n        self.val = val\r\n        self.left = left\r\n        self.right = right\r\n\r\ndef is_tree_balanced(root: TreeNode) -> bool:\r\n    def height(node: TreeNode) -> int:\r\n        if not node:\r\n            return 0\r\n        \r\n        left_height = height(node.left)\r\n        right_height = height(node.right)\r\n        \r\n        if left_height == -1 or right_height == -1:\r\n            return -1\r\n        \r\n        return max(left_height, right_height) + 1\r\n    \r\n    return height(root) != -1\r\n```\r\n\r\nThe function `is_tree_balanced` takes a binary tree `root` as input and returns `True` if the tree is balanced and `False` otherwise. The function uses a helper function `height` to calculate the height of the tree. The `height` function returns `-1` if the tree is unbalanced. The `is_tree_balanced` function returns `True` if the height of the tree is not `-1`.\r\n\r\nHere are some test cases:\r\n\r\n```python\r\n# Test case 1\r\nroot = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\r\nassert is_tree_balanced(root) == False\r\n\r\n# Test case 2\r\nroot1 = TreeNode(3, TreeNode(9), TreeNode(20, TreeNode(15), TreeNode(7)))\r\nroot1.left.left.left = TreeNode(2)\r\nassert is_tree_balanced(root1) == True\r\n\r\n# Test case 3\r\nroot2 = TreeNode(1, TreeNode(2, TreeNode(3, TreeNode(4), TreeNode(4)), TreeNode(4)), TreeNode(2))\r\nassert is_tree_balanced(root2) == False\r\n```\r\n\r\nIn the first test case, the tree is not balanced because the left subtree has a height of 2 and the right subtree has a height of 3. In the second test case, the tree is balanced because all the subtrees have the same height. In the third test case, the tree is not balanced because the left subtree has a height of 3 and the right subtree has a height of 2. "}

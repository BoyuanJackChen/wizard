{"task_id": 481, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef is_subset_sum(arr, n, s):\r\n    # Create a boolean array to mark the presence of the elements in the subset\r\n    subset = [False] * n\r\n    \r\n    # Recursive function to find the subset with sum equal to s\r\n    def helper(arr, subset, n, s, start):\r\n        # Base case: if sum is 0, we have found a subset\r\n        if s == 0:\r\n            return True\r\n        \r\n        # Base case: if sum is negative or start is greater than n, we cannot find a subset\r\n        if s < 0 or start >= n:\r\n            return False\r\n        \r\n        # If the current element is already included in the subset, skip it\r\n        if subset[start]:\r\n            return helper(arr, subset, n, s, start+1)\r\n        \r\n        # Exclude the current element\r\n        subset[start] = True\r\n        if helper(arr, subset, n, s-arr[start], start+1):\r\n            return True\r\n        \r\n        # Include the current element\r\n        subset[start] = False\r\n        return helper(arr, subset, n, s, start+1)\r\n    \r\n    # Call the recursive function with the initial values\r\n    return helper(arr, subset, n, s, 0)\r\n```\r\n\r\nThe function `is_subset_sum` takes three arguments: the input array `arr`, the length of the array `n`, and the target sum `s`. It returns `True` if there is a subset of `arr` with sum equal to `s`, and `False` otherwise.\r\n\r\nThe function uses a recursive approach to find a subset with the given sum. It creates a boolean array `subset` to mark the presence of the elements in the subset. The function `helper` is a recursive function that takes the input array, the boolean array, the length of the array, the target sum, and the starting index as arguments. It returns `True` if a subset with the given sum is found, and `False` otherwise.\r\n\r\nThe base case of the recursive function is when the target sum is 0. In this case, we have found a subset, and we return `True`.\r\n\r\nThe base case of the recursive function is when the target sum is negative or the starting index is greater than the length of the array. In this case, we cannot find a subset, and we return `False`.\r\n\r\nIf the current element is already included in the subset, we skip it and call the recursive function with the next element. If the current element is not included in the subset, we exclude it, call the recursive function with the next element, and then include the current element again. We repeat this process until we find a subset with the given sum or we exhaust all possible subsets.\r\n\r\nFinally, we call the `helper` function with the initial values and return the result. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to determine if there is a subset of the given set with sum equal to the given sum.\nTest examples:\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef is_subset_sum(arr, n, s):\r\n    # Create a boolean array to mark the presence of the elements in the subset\r\n    subset = [False] * n\r\n    \r\n    # Recursive function to find the subset with sum equal to s\r\n    def helper(arr, subset, n, s, start):\r\n        # Base case: if sum is 0, we have found a subset\r\n        if s == 0:\r\n            return True\r\n        \r\n        # Base case: if sum is negative or start is greater than n, we cannot find a subset\r\n        if s < 0 or start >= n:\r\n            return False\r\n        \r\n        # If the current element is already included in the subset, skip it\r\n        if subset[start]:\r\n            return helper(arr, subset, n, s, start+1)\r\n        \r\n        # Exclude the current element\r\n        subset[start] = True\r\n        if helper(arr, subset, n, s-arr[start], start+1):\r\n            return True\r\n        \r\n        # Include the current element\r\n        subset[start] = False\r\n        return helper(arr, subset, n, s, start+1)\r\n    \r\n    # Call the recursive function with the initial values\r\n    return helper(arr, subset, n, s, 0)\r\n```\r\n\r\nThe function `is_subset_sum` takes three arguments: the input array `arr`, the length of the array `n`, and the target sum `s`. It returns `True` if there is a subset of `arr` with sum equal to `s`, and `False` otherwise.\r\n\r\nThe function uses a recursive approach to find a subset with the given sum. It creates a boolean array `subset` to mark the presence of the elements in the subset. The function `helper` is a recursive function that takes the input array, the boolean array, the length of the array, the target sum, and the starting index as arguments. It returns `True` if a subset with the given sum is found, and `False` otherwise.\r\n\r\nThe base case of the recursive function is when the target sum is 0. In this case, we have found a subset, and we return `True`.\r\n\r\nThe base case of the recursive function is when the target sum is negative or the starting index is greater than the length of the array. In this case, we cannot find a subset, and we return `False`.\r\n\r\nIf the current element is already included in the subset, we skip it and call the recursive function with the next element. If the current element is not included in the subset, we exclude it, call the recursive function with the next element, and then include the current element again. We repeat this process until we find a subset with the given sum or we exhaust all possible subsets.\r\n\r\nFinally, we call the `helper` function with the initial values and return the result. "}

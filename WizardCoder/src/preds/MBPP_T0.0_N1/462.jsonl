{"task_id": 473, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef tuple_intersection(tuples_list, other_tuples):\r\n    intersection = set()\r\n    for t in tuples_list:\r\n        for o in other_tuples:\r\n            if t[::-1] == o[::-1]:\r\n                intersection.add(t)\r\n    return intersection\r\n\r\n# Test cases\r\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\r\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\r\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\r\n```\r\n\r\nThe `tuple_intersection` function takes two arguments: `tuples_list` and `other_tuples`. It returns a set of tuples that are present in both `tuples_list` and `other_tuples`, irrespective of their order. The function iterates over each tuple in `tuples_list` and checks if it is present in `other_tuples` after reversing the order of its elements. If it is present, the tuple is added to the `intersection` set. Finally, the function returns the `intersection` set. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nTest examples:\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef tuple_intersection(tuples_list, other_tuples):\r\n    intersection = set()\r\n    for t in tuples_list:\r\n        for o in other_tuples:\r\n            if t[::-1] == o[::-1]:\r\n                intersection.add(t)\r\n    return intersection\r\n\r\n# Test cases\r\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\r\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\r\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\r\n```\r\n\r\nThe `tuple_intersection` function takes two arguments: `tuples_list` and `other_tuples`. It returns a set of tuples that are present in both `tuples_list` and `other_tuples`, irrespective of their order. The function iterates over each tuple in `tuples_list` and checks if it is present in `other_tuples` after reversing the order of its elements. If it is present, the tuple is added to the `intersection` set. Finally, the function returns the `intersection` set. "}

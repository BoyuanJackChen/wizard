{"task_id": 280, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef sequential_search(arr, x):\r\n    \"\"\"\r\n    Searches for an element x in the given array using sequential search.\r\n    Returns a tuple containing a boolean value indicating whether the element was found and its index if found.\r\n    \"\"\"\r\n    for i in range(len(arr)):\r\n        if arr[i] == x:\r\n            return (True, i)\r\n    return (False, -1)\r\n```\r\n\r\nThe function takes two arguments - the array to search and the element to search for. It then iterates through the array using a for loop and checks if the current element is equal to the element to search for. If it is, it returns a tuple containing a boolean value of True and the index of the element in the array. If the loop completes without finding the element, it returns a tuple containing a boolean value of False and -1 as the index.\r\n\r\nWe can test the function using the provided test cases:\r\n\r\n```python\r\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\r\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\r\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\r\n```\r\n\r\nAll the test cases pass, so we can conclude that the function is working correctly. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to search an element in the given array by using sequential search.\nTest examples:\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef sequential_search(arr, x):\r\n    \"\"\"\r\n    Searches for an element x in the given array using sequential search.\r\n    Returns a tuple containing a boolean value indicating whether the element was found and its index if found.\r\n    \"\"\"\r\n    for i in range(len(arr)):\r\n        if arr[i] == x:\r\n            return (True, i)\r\n    return (False, -1)\r\n```\r\n\r\nThe function takes two arguments - the array to search and the element to search for. It then iterates through the array using a for loop and checks if the current element is equal to the element to search for. If it is, it returns a tuple containing a boolean value of True and the index of the element in the array. If the loop completes without finding the element, it returns a tuple containing a boolean value of False and -1 as the index.\r\n\r\nWe can test the function using the provided test cases:\r\n\r\n```python\r\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\r\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\r\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\r\n```\r\n\r\nAll the test cases pass, so we can conclude that the function is working correctly. "}

{"task_id": 427, "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\nimport re\r\n\r\ndef change_date_format(date):\r\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\r\n    match = re.match(pattern, date)\r\n    if match:\r\n        year = match.group(1)\r\n        month = match.group(2)\r\n        day = match.group(3)\r\n        return f'{day}-{month}-{year}'\r\n    else:\r\n        return None\r\n```\r\n\r\nThe `change_date_format` function takes a date string in the `yyyy-mm-dd` format as input and returns the same date string in the `dd-mm-yyyy` format. It uses regular expressions to match the date pattern and extract the year, month, and day components. The function then returns the date string in the desired format using string formatting.\r\n\r\nThe `re.match` function is used to match the input date string against the pattern. If the pattern matches, the function extracts the year, month, and day components using the `group` method and returns the date string in the desired format. If the pattern does not match, the function returns `None`.\r\n\r\nHere are some test cases:\r\n\r\n```python\r\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\r\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\r\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\r\nassert change_date_format(\"2021-13-02\") == None\r\n```\r\n\r\nThe last test case demonstrates that the function returns `None` if the input date string does not match the pattern. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\nTest examples:\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\nimport re\r\n\r\ndef change_date_format(date):\r\n    pattern = r'(\\d{4})-(\\d{2})-(\\d{2})'\r\n    match = re.match(pattern, date)\r\n    if match:\r\n        year = match.group(1)\r\n        month = match.group(2)\r\n        day = match.group(3)\r\n        return f'{day}-{month}-{year}'\r\n    else:\r\n        return None\r\n```\r\n\r\nThe `change_date_format` function takes a date string in the `yyyy-mm-dd` format as input and returns the same date string in the `dd-mm-yyyy` format. It uses regular expressions to match the date pattern and extract the year, month, and day components. The function then returns the date string in the desired format using string formatting.\r\n\r\nThe `re.match` function is used to match the input date string against the pattern. If the pattern matches, the function extracts the year, month, and day components using the `group` method and returns the date string in the desired format. If the pattern does not match, the function returns `None`.\r\n\r\nHere are some test cases:\r\n\r\n```python\r\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\r\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\r\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\r\nassert change_date_format(\"2021-13-02\") == None\r\n```\r\n\r\nThe last test case demonstrates that the function returns `None` if the input date string does not match the pattern. "}

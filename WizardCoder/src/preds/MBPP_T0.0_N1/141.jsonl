{"task_id": 152, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef merge_sort(arr):\r\n    if len(arr) <= 1:\r\n        return arr\r\n    \r\n    mid = len(arr) // 2\r\n    left = arr[:mid]\r\n    right = arr[mid:]\r\n    \r\n    left = merge_sort(left)\r\n    right = merge_sort(right)\r\n    \r\n    return merge(left, right)\r\n    \r\ndef merge(left, right):\r\n    result = []\r\n    i = j = 0\r\n    \r\n    while i < len(left) and j < len(right):\r\n        if left[i] < right[j]:\r\n            result.append(left[i])\r\n            i += 1\r\n        else:\r\n            result.append(right[j])\r\n            j += 1\r\n            \r\n    result += left[i:]\r\n    result += right[j:]\r\n    \r\n    return result\r\n```\r\n\r\nThe `merge_sort` function takes an array as input and recursively divides it into two halves until each half contains only one element. Then, it calls the `merge` function to merge the two halves in sorted order.\r\n\r\nThe `merge` function takes two sorted arrays as input and returns a single sorted array by comparing the first elements of each array and appending the smaller element to the result array. It continues this process until one of the arrays is exhausted, and then appends the remaining elements of the other array to the result array. Finally, it returns the sorted result array.\r\n\r\nThe `assert` statements in the problem statement test the `merge_sort` function with different input arrays. The first test case sorts the array `[3, 4, 2, 6, 5, 7, 1, 9]` in ascending order, and the second test case sorts the array `[7, 25, 45, 78, 11, 33, 19]` in ascending order. The third test case sorts the array `[3, 1, 4, 9, 8]` in ascending order. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to sort the given array by using merge sort.\nTest examples:\nassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef merge_sort(arr):\r\n    if len(arr) <= 1:\r\n        return arr\r\n    \r\n    mid = len(arr) // 2\r\n    left = arr[:mid]\r\n    right = arr[mid:]\r\n    \r\n    left = merge_sort(left)\r\n    right = merge_sort(right)\r\n    \r\n    return merge(left, right)\r\n    \r\ndef merge(left, right):\r\n    result = []\r\n    i = j = 0\r\n    \r\n    while i < len(left) and j < len(right):\r\n        if left[i] < right[j]:\r\n            result.append(left[i])\r\n            i += 1\r\n        else:\r\n            result.append(right[j])\r\n            j += 1\r\n            \r\n    result += left[i:]\r\n    result += right[j:]\r\n    \r\n    return result\r\n```\r\n\r\nThe `merge_sort` function takes an array as input and recursively divides it into two halves until each half contains only one element. Then, it calls the `merge` function to merge the two halves in sorted order.\r\n\r\nThe `merge` function takes two sorted arrays as input and returns a single sorted array by comparing the first elements of each array and appending the smaller element to the result array. It continues this process until one of the arrays is exhausted, and then appends the remaining elements of the other array to the result array. Finally, it returns the sorted result array.\r\n\r\nThe `assert` statements in the problem statement test the `merge_sort` function with different input arrays. The first test case sorts the array `[3, 4, 2, 6, 5, 7, 1, 9]` in ascending order, and the second test case sorts the array `[7, 25, 45, 78, 11, 33, 19]` in ascending order. The third test case sorts the array `[3, 1, 4, 9, 8]` in ascending order. "}

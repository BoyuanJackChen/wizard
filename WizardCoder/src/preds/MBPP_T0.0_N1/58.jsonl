{"task_id": 69, "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef is_sublist(lst, sublst):\r\n    \"\"\"\r\n    This function checks whether a list contains the given sublist or not.\r\n    \"\"\"\r\n    if len(sublst) > len(lst):\r\n        return False\r\n    else:\r\n        for i in range(len(lst)):\r\n            if lst[i:i+len(sublst)] == sublst:\r\n                return True\r\n        return False\r\n```\r\n\r\nThe function takes two arguments, `lst` and `sublst`, which are the list and the sublist respectively. It first checks whether the length of the sublist is greater than the length of the list. If it is, then it returns False, as a sublist cannot be greater than the list.\r\n\r\nIf the length of the sublist is less than or equal to the length of the list, the function iterates over the list using a for loop. For each iteration, it checks whether the sublist is present in the list from the current index to the next `len(sublst)` elements. If it finds a match, it returns True, indicating that the sublist is present in the list.\r\n\r\nIf the function iterates over the entire list and does not find a match, it returns False, indicating that the sublist is not present in the list. ", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for this problem:\n\nWrite a function to check whether a list contains the given sublist or not.\nTest examples:\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef is_sublist(lst, sublst):\r\n    \"\"\"\r\n    This function checks whether a list contains the given sublist or not.\r\n    \"\"\"\r\n    if len(sublst) > len(lst):\r\n        return False\r\n    else:\r\n        for i in range(len(lst)):\r\n            if lst[i:i+len(sublst)] == sublst:\r\n                return True\r\n        return False\r\n```\r\n\r\nThe function takes two arguments, `lst` and `sublst`, which are the list and the sublist respectively. It first checks whether the length of the sublist is greater than the length of the list. If it is, then it returns False, as a sublist cannot be greater than the list.\r\n\r\nIf the length of the sublist is less than or equal to the length of the list, the function iterates over the list using a for loop. For each iteration, it checks whether the sublist is present in the list from the current index to the next `len(sublst)` elements. If it finds a match, it returns True, indicating that the sublist is present in the list.\r\n\r\nIf the function iterates over the entire list and does not find a match, it returns False, indicating that the sublist is not present in the list. "}

{"task_id": "HumanEval/87", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef get_row(lst, x):\r\n    \"\"\"\r\n    You are given a 2 dimensional data, as a nested lists,\r\n    which is similar to matrix, however, unlike matrices,\r\n    each row may contain a different number of columns.\r\n    Given lst, and integer x, find integers x in the list,\r\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\r\n    each tuple is a coordinate - (row, columns), starting with 0.\r\n    Sort coordinates initially by rows in ascending order.\r\n    Also, sort coordinates of the row by columns in descending order.\r\n    \r\n    Examples:\r\n    get_row([\r\n      [1,2,3,4,5,6],\r\n      [1,2,3,4,1,6],\r\n      [1,2,3,4,5,1]\r\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\r\n    get_row([], 1) == []\r\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\r\n    \"\"\"\r\n    result = []\r\n    for i, row in enumerate(lst):\r\n        for j, col in enumerate(row):\r\n            if col == x:\r\n                result.append((i, j))\r\n    result.sort(key=lambda x: (x[0], -x[1]))\r\n    return result\r\n```\r\n\r\nThe function `get_row` takes two arguments, `lst` and `x`. It initializes an empty list `result` to store the coordinates of `x` in `lst`. It then iterates over each row and column of `lst`, and checks if the current element is equal to `x`. If it is, it appends the current row and column indices to `result`.\r\n\r\nAfter all elements of `lst` have been checked, `result` is sorted first by row in ascending order, and then by column in descending order. Finally, the sorted list of coordinates is returned.\r\n\r\nThe function has some edge cases to consider:\r\n\r\n- If `lst` is empty, an empty list is returned.\r\n- If `x` is not found in `lst`, an empty list is returned.\r\n- If `lst` contains rows with different lengths, the function will still return the correct coordinates.\r\n- If `lst` contains multiple occurrences of `x`, all occurrences will be returned.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef get_row(lst, x):\r\n    \"\"\"\r\n    You are given a 2 dimensional data, as a nested lists,\r\n    which is similar to matrix, however, unlike matrices,\r\n    each row may contain a different number of columns.\r\n    Given lst, and integer x, find integers x in the list,\r\n    and return list of tuples, [(x1, y1), (x2, y2)...] such that\r\n    each tuple is a coordinate - (row, columns), starting with 0.\r\n    Sort coordinates initially by rows in ascending order.\r\n    Also, sort coordinates of the row by columns in descending order.\r\n    \r\n    Examples:\r\n    get_row([\r\n      [1,2,3,4,5,6],\r\n      [1,2,3,4,1,6],\r\n      [1,2,3,4,5,1]\r\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\r\n    get_row([], 1) == []\r\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\r\n    \"\"\"\r\n    result = []\r\n    for i, row in enumerate(lst):\r\n        for j, col in enumerate(row):\r\n            if col == x:\r\n                result.append((i, j))\r\n    result.sort(key=lambda x: (x[0], -x[1]))\r\n    return result\r\n```\r\n\r\nThe function `get_row` takes two arguments, `lst` and `x`. It initializes an empty list `result` to store the coordinates of `x` in `lst`. It then iterates over each row and column of `lst`, and checks if the current element is equal to `x`. If it is, it appends the current row and column indices to `result`.\r\n\r\nAfter all elements of `lst` have been checked, `result` is sorted first by row in ascending order, and then by column in descending order. Finally, the sorted list of coordinates is returned.\r\n\r\nThe function has some edge cases to consider:\r\n\r\n- If `lst` is empty, an empty list is returned.\r\n- If `x` is not found in `lst`, an empty list is returned.\r\n- If `lst` contains rows with different lengths, the function will still return the correct coordinates.\r\n- If `lst` contains multiple occurrences of `x`, all occurrences will be returned."}

{"task_id": "HumanEval/69", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef search(lst):\r\n    freq = {}\r\n    for num in lst:\r\n        if num > 0:\r\n            if num in freq:\r\n                freq[num] += 1\r\n            else:\r\n                freq[num] = 1\r\n    for num in freq:\r\n        if freq[num] >= num:\r\n            return num\r\n    return -1\r\n```\r\n\r\nThe function `search` takes a list `lst` as input and returns the greatest integer that satisfies the given conditions.\r\n\r\nFirst, we create an empty dictionary `freq` to keep track of the frequency of each integer in the list. We iterate through the list and update the frequency of each positive integer in the dictionary.\r\n\r\nNext, we iterate through the dictionary and check if the frequency of each integer is greater than or equal to the integer itself. If we find such an integer, we return it. If we iterate through the entire dictionary and don't find such an integer, we return -1.\r\n\r\nThe time complexity of this function is O(n), where n is the length of the input list. The space complexity is also O(n), since we need to store the frequency of each integer in the dictionary.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef search(lst):\r\n    freq = {}\r\n    for num in lst:\r\n        if num > 0:\r\n            if num in freq:\r\n                freq[num] += 1\r\n            else:\r\n                freq[num] = 1\r\n    for num in freq:\r\n        if freq[num] >= num:\r\n            return num\r\n    return -1\r\n```\r\n\r\nThe function `search` takes a list `lst` as input and returns the greatest integer that satisfies the given conditions.\r\n\r\nFirst, we create an empty dictionary `freq` to keep track of the frequency of each integer in the list. We iterate through the list and update the frequency of each positive integer in the dictionary.\r\n\r\nNext, we iterate through the dictionary and check if the frequency of each integer is greater than or equal to the integer itself. If we find such an integer, we return it. If we iterate through the entire dictionary and don't find such an integer, we return -1.\r\n\r\nThe time complexity of this function is O(n), where n is the length of the input list. The space complexity is also O(n), since we need to store the frequency of each integer in the dictionary."}

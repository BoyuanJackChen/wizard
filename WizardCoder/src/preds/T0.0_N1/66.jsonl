{"task_id": "HumanEval/158", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef find_max(words):\r\n    \"\"\"Write a function that accepts a list of strings.\r\n    The list contains different words. Return the word with maximum number\r\n    of unique characters. If multiple strings have maximum number of unique\r\n    characters, return the one which comes first in lexicographical order.\r\n\r\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\r\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\r\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"\r\n    \"\"\"\r\n    max_word = \"\"\r\n    max_count = 0\r\n    for word in words:\r\n        count = len(set(word))\r\n        if count > max_count or (count == max_count and word < max_word):\r\n            max_word = word\r\n            max_count = count\r\n    return max_word\r\n```\r\n\r\nThe function `find_max` takes a list of strings as input and returns the word with maximum number of unique characters. If multiple strings have the same maximum number of unique characters, the function returns the one which comes first in lexicographical order.\r\n\r\nThe function first initializes two variables `max_word` and `max_count` to keep track of the word with maximum number of unique characters and its count respectively. It then iterates over each word in the input list and calculates the number of unique characters in the word using the `set` function. If the count of unique characters is greater than the current maximum count or if the count is equal to the maximum count but the word comes before the current maximum word in lexicographical order, the function updates the `max_word` and `max_count` variables.\r\n\r\nFinally, the function returns the `max_word` variable.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef find_max(words):\r\n    \"\"\"Write a function that accepts a list of strings.\r\n    The list contains different words. Return the word with maximum number\r\n    of unique characters. If multiple strings have maximum number of unique\r\n    characters, return the one which comes first in lexicographical order.\r\n\r\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\r\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\r\n    find_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"aaaaaaa\"\r\n    \"\"\"\r\n    max_word = \"\"\r\n    max_count = 0\r\n    for word in words:\r\n        count = len(set(word))\r\n        if count > max_count or (count == max_count and word < max_word):\r\n            max_word = word\r\n            max_count = count\r\n    return max_word\r\n```\r\n\r\nThe function `find_max` takes a list of strings as input and returns the word with maximum number of unique characters. If multiple strings have the same maximum number of unique characters, the function returns the one which comes first in lexicographical order.\r\n\r\nThe function first initializes two variables `max_word` and `max_count` to keep track of the word with maximum number of unique characters and its count respectively. It then iterates over each word in the input list and calculates the number of unique characters in the word using the `set` function. If the count of unique characters is greater than the current maximum count or if the count is equal to the maximum count but the word comes before the current maximum word in lexicographical order, the function updates the `max_word` and `max_count` variables.\r\n\r\nFinally, the function returns the `max_word` variable."}

{"task_id": "HumanEval/59", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef largest_prime_factor(n: int):\r\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\r\n    >>> largest_prime_factor(13195)\r\n    29\r\n    >>> largest_prime_factor(2048)\r\n    2\r\n    \"\"\"\r\n    i = 2\r\n    while i * i <= n:\r\n        if n % i:\r\n            i += 1\r\n        else:\r\n            n //= i\r\n    return n\r\n```\r\n\r\nThe function `largest_prime_factor` takes an integer `n` as input and returns the largest prime factor of `n`. It assumes that `n` is greater than 1 and is not a prime number.\r\n\r\nThe function uses a while loop to iterate over all the numbers from 2 to the square root of `n`. For each number `i`, it checks if `n` is divisible by `i`. If `n` is not divisible by `i`, it increments `i` by 1. If `n` is divisible by `i`, it divides `n` by `i` and continues the loop.\r\n\r\nOnce the loop has finished, the function returns the value of `n`, which is the largest prime factor of the original input `n`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef largest_prime_factor(n: int):\r\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\r\n    >>> largest_prime_factor(13195)\r\n    29\r\n    >>> largest_prime_factor(2048)\r\n    2\r\n    \"\"\"\r\n    i = 2\r\n    while i * i <= n:\r\n        if n % i:\r\n            i += 1\r\n        else:\r\n            n //= i\r\n    return n\r\n```\r\n\r\nThe function `largest_prime_factor` takes an integer `n` as input and returns the largest prime factor of `n`. It assumes that `n` is greater than 1 and is not a prime number.\r\n\r\nThe function uses a while loop to iterate over all the numbers from 2 to the square root of `n`. For each number `i`, it checks if `n` is divisible by `i`. If `n` is not divisible by `i`, it increments `i` by 1. If `n` is divisible by `i`, it divides `n` by `i` and continues the loop.\r\n\r\nOnce the loop has finished, the function returns the value of `n`, which is the largest prime factor of the original input `n`."}

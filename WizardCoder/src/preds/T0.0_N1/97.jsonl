{"task_id": "HumanEval/39", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef is_prime(n: int) -> bool:\r\n    \"\"\"\r\n    is_prime returns True if n is prime, False otherwise.\r\n    \"\"\"\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(n ** 0.5) + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\n\r\ndef prime_fib(n: int) -> int:\r\n    \"\"\"\r\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\r\n    \"\"\"\r\n    a, b = 0, 1\r\n    for i in range(n):\r\n        if is_prime(b):\r\n            return b\r\n        a, b = b, a + b\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod()\r\n```\r\n\r\nThe `is_prime` function checks if a number is prime or not. It returns `True` if the number is prime, `False` otherwise.\r\n\r\nThe `prime_fib` function uses a loop to generate Fibonacci numbers until it finds the `n`-th number that is both a Fibonacci number and prime. It returns this number.\r\n\r\nThe `if __name__ == '__main__':` block at the end of the script is used to run the doctest. Doctest is a tool for testing Python code. It checks if the code examples in the docstrings are correct.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef is_prime(n: int) -> bool:\r\n    \"\"\"\r\n    is_prime returns True if n is prime, False otherwise.\r\n    \"\"\"\r\n    if n < 2:\r\n        return False\r\n    for i in range(2, int(n ** 0.5) + 1):\r\n        if n % i == 0:\r\n            return False\r\n    return True\r\n\r\n\r\ndef prime_fib(n: int) -> int:\r\n    \"\"\"\r\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\r\n    \"\"\"\r\n    a, b = 0, 1\r\n    for i in range(n):\r\n        if is_prime(b):\r\n            return b\r\n        a, b = b, a + b\r\n\r\n\r\nif __name__ == '__main__':\r\n    import doctest\r\n    doctest.testmod()\r\n```\r\n\r\nThe `is_prime` function checks if a number is prime or not. It returns `True` if the number is prime, `False` otherwise.\r\n\r\nThe `prime_fib` function uses a loop to generate Fibonacci numbers until it finds the `n`-th number that is both a Fibonacci number and prime. It returns this number.\r\n\r\nThe `if __name__ == '__main__':` block at the end of the script is used to run the doctest. Doctest is a tool for testing Python code. It checks if the code examples in the docstrings are correct."}

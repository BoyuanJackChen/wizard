{"task_id": "HumanEval/117", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef select_words(s, n):\r\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \r\n    a function that returns a list of all words from string s that contain exactly \r\n    n consonants, in order these words appear in the string s.\r\n    If the string s is empty then the function should return an empty list.\r\n    Note: you may assume the input string contains only letters and spaces.\r\n    Examples:\r\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\r\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\r\n    select_words(\"simple white space\", 2) ==> []\r\n    select_words(\"Hello world\", 4) ==> [\"world\"]\r\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\r\n    \"\"\"\r\n    if not s:\r\n        return []\r\n    words = s.split()\r\n    result = []\r\n    for word in words:\r\n        if len([c for c in word if c.isalpha() and c.islower() and c not in \"aeiou\"]) == n:\r\n            result.append(word)\r\n    return result\r\n```\r\n\r\nThe function `select_words` takes two arguments: `s` is the input string and `n` is the number of consonants we want to find. We first check if the input string is empty, in which case we return an empty list. Otherwise, we split the string into a list of words using the `split` method. We then iterate over each word in the list and check if it has exactly `n` consonants. We do this by using a list comprehension to create a list of all consonants in the word, filtering out any vowels and any uppercase letters, and then checking the length of the resulting list. If the length is equal to `n`, we add the word to the `result` list. Finally, we return the `result` list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef select_words(s, n):\r\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \r\n    a function that returns a list of all words from string s that contain exactly \r\n    n consonants, in order these words appear in the string s.\r\n    If the string s is empty then the function should return an empty list.\r\n    Note: you may assume the input string contains only letters and spaces.\r\n    Examples:\r\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\r\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\r\n    select_words(\"simple white space\", 2) ==> []\r\n    select_words(\"Hello world\", 4) ==> [\"world\"]\r\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\r\n    \"\"\"\r\n    if not s:\r\n        return []\r\n    words = s.split()\r\n    result = []\r\n    for word in words:\r\n        if len([c for c in word if c.isalpha() and c.islower() and c not in \"aeiou\"]) == n:\r\n            result.append(word)\r\n    return result\r\n```\r\n\r\nThe function `select_words` takes two arguments: `s` is the input string and `n` is the number of consonants we want to find. We first check if the input string is empty, in which case we return an empty list. Otherwise, we split the string into a list of words using the `split` method. We then iterate over each word in the list and check if it has exactly `n` consonants. We do this by using a list comprehension to create a list of all consonants in the word, filtering out any vowels and any uppercase letters, and then checking the length of the resulting list. If the length is equal to `n`, we add the word to the `result` list. Finally, we return the `result` list."}

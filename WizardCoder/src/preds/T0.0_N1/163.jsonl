{"task_id": "HumanEval/99", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef closest_integer(value):\r\n    '''\r\n    Create a function that takes a value (string) representing a number\r\n    and returns the closest integer to it. If the number is equidistant\r\n    from two integers, round it away from zero.\r\n\r\n    Examples\r\n    >>> closest_integer(\"10\")\r\n    10\r\n    >>> closest_integer(\"15.3\")\r\n    15\r\n\r\n    Note:\r\n    Rounding away from zero means that if the given number is equidistant\r\n    from two integers, the one you should return is the one that is the\r\n    farthest from zero. For example closest_integer(\"14.5\") should\r\n    return 15 and closest_integer(\"-14.5\") should return -15.\r\n    '''\r\n    num = float(value)\r\n    if num >= 0:\r\n        return int(num + 0.5)\r\n    else:\r\n        return int(num - 0.5)\r\n```\r\n\r\nThe function takes a string `value` representing a number as input. It converts the string to a float and then checks if the number is positive or negative. If the number is positive, it adds 0.5 to it and returns the integer part of the result. If the number is negative, it subtracts 0.5 from it and returns the integer part of the result. This approach ensures that the function returns the closest integer to the given number, regardless of whether it is equidistant from two integers.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef closest_integer(value):\r\n    '''\r\n    Create a function that takes a value (string) representing a number\r\n    and returns the closest integer to it. If the number is equidistant\r\n    from two integers, round it away from zero.\r\n\r\n    Examples\r\n    >>> closest_integer(\"10\")\r\n    10\r\n    >>> closest_integer(\"15.3\")\r\n    15\r\n\r\n    Note:\r\n    Rounding away from zero means that if the given number is equidistant\r\n    from two integers, the one you should return is the one that is the\r\n    farthest from zero. For example closest_integer(\"14.5\") should\r\n    return 15 and closest_integer(\"-14.5\") should return -15.\r\n    '''\r\n    num = float(value)\r\n    if num >= 0:\r\n        return int(num + 0.5)\r\n    else:\r\n        return int(num - 0.5)\r\n```\r\n\r\nThe function takes a string `value` representing a number as input. It converts the string to a float and then checks if the number is positive or negative. If the number is positive, it adds 0.5 to it and returns the integer part of the result. If the number is negative, it subtracts 0.5 from it and returns the integer part of the result. This approach ensures that the function returns the closest integer to the given number, regardless of whether it is equidistant from two integers."}

{"task_id": "HumanEval/126", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef is_sorted(lst):\r\n    '''\r\n    Given a list of numbers, return whether or not they are sorted\r\n    in ascending order. If list has more than 1 duplicate of the same\r\n    number, return False. Assume no negative numbers and only integers.\r\n\r\n    Examples\r\n    is_sorted([5]) \u279e True\r\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\r\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\r\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\r\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\r\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\r\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\r\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\r\n    '''\r\n    for i in range(len(lst)-1):\r\n        if lst[i] > lst[i+1]:\r\n            return False\r\n        elif lst[i] == lst[i+1]:\r\n            return False\r\n    return True\r\n```\r\n\r\nThe function `is_sorted` takes a list of numbers as input and returns `True` if the list is sorted in ascending order and has no duplicates, and `False` otherwise.\r\n\r\nThe function first checks if the list has more than 1 duplicate of the same number by iterating through the list and checking if the current number is equal to the next number. If it is, the function returns `False`.\r\n\r\nIf the list has no duplicates, the function then iterates through the list and checks if each number is less than or equal to the next number. If it is not, the function returns `False`. If the loop completes without returning `False`, the function returns `True`.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef is_sorted(lst):\r\n    '''\r\n    Given a list of numbers, return whether or not they are sorted\r\n    in ascending order. If list has more than 1 duplicate of the same\r\n    number, return False. Assume no negative numbers and only integers.\r\n\r\n    Examples\r\n    is_sorted([5]) \u279e True\r\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\r\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\r\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\r\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\r\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\r\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\r\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\r\n    '''\r\n    for i in range(len(lst)-1):\r\n        if lst[i] > lst[i+1]:\r\n            return False\r\n        elif lst[i] == lst[i+1]:\r\n            return False\r\n    return True\r\n```\r\n\r\nThe function `is_sorted` takes a list of numbers as input and returns `True` if the list is sorted in ascending order and has no duplicates, and `False` otherwise.\r\n\r\nThe function first checks if the list has more than 1 duplicate of the same number by iterating through the list and checking if the current number is equal to the next number. If it is, the function returns `False`.\r\n\r\nIf the list has no duplicates, the function then iterates through the list and checks if each number is less than or equal to the next number. If it is not, the function returns `False`. If the loop completes without returning `False`, the function returns `True`."}

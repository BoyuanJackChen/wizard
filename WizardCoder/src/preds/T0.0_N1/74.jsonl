{"task_id": "HumanEval/18", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef how_many_times(string: str, substring: str) -> int:\r\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\r\n    >>> how_many_times('', 'a')\r\n    0\r\n    >>> how_many_times('aaa', 'a')\r\n    3\r\n    >>> how_many_times('aaaa', 'aa')\r\n    3\r\n    \"\"\"\r\n    count = 0\r\n    for i in range(len(string)):\r\n        if string[i:i+len(substring)] == substring:\r\n            count += 1\r\n    return count\r\n```\r\n\r\nThe function takes two parameters, `string` and `substring`, and returns the number of times the substring can be found in the original string. The function uses a for loop to iterate over the indices of the string and checks if the substring is present at that index. If it is, the count is incremented. If the substring is not present, the function moves on to the next index. The function also handles the case where the substring is not found in the string by returning 0.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef how_many_times(string: str, substring: str) -> int:\r\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\r\n    >>> how_many_times('', 'a')\r\n    0\r\n    >>> how_many_times('aaa', 'a')\r\n    3\r\n    >>> how_many_times('aaaa', 'aa')\r\n    3\r\n    \"\"\"\r\n    count = 0\r\n    for i in range(len(string)):\r\n        if string[i:i+len(substring)] == substring:\r\n            count += 1\r\n    return count\r\n```\r\n\r\nThe function takes two parameters, `string` and `substring`, and returns the number of times the substring can be found in the original string. The function uses a for loop to iterate over the indices of the string and checks if the substring is present at that index. If it is, the count is incremented. If the substring is not present, the function moves on to the next index. The function also handles the case where the substring is not found in the string by returning 0."}

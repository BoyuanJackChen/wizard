{"task_id": "HumanEval/145", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef order_by_points(nums):\r\n    \"\"\"\r\n    Write a function which sorts the given list of integers\r\n    in ascending order according to the sum of their digits.\r\n    Note: if there are several items with similar sum of their digits,\r\n    order them based on their index in original list.\r\n\r\n    For example:\r\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\r\n    >>> order_by_points([]) == []\r\n    \"\"\"\r\n    def sum_of_digits(num):\r\n        return sum(int(digit) for digit in str(abs(num)))\r\n\r\n    nums_with_points = [(num, sum_of_digits(num)) for num in nums]\r\n    nums_with_points.sort(key=lambda x: (x[1], nums.index(x[0])))\r\n    return [num for num, _ in nums_with_points]\r\n```\r\n\r\nThe `order_by_points` function takes a list of integers as input and returns a sorted list of integers based on the sum of their digits. The function first defines a nested function `sum_of_digits` which takes an integer as input and returns the sum of its digits. It then uses a list comprehension to create a list of tuples, where each tuple contains an integer from the input list and its corresponding sum of digits.\r\n\r\nThe `nums_with_points` list is then sorted based on the sum of digits and the index of the integer in the original list. The `key` parameter of the `sort` method is set to a lambda function that returns a tuple containing the sum of digits and the index of the integer in the original list.\r\n\r\nFinally, the function returns a list of integers by extracting the first element of each tuple in the sorted `nums_with_points` list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef order_by_points(nums):\r\n    \"\"\"\r\n    Write a function which sorts the given list of integers\r\n    in ascending order according to the sum of their digits.\r\n    Note: if there are several items with similar sum of their digits,\r\n    order them based on their index in original list.\r\n\r\n    For example:\r\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\r\n    >>> order_by_points([]) == []\r\n    \"\"\"\r\n    def sum_of_digits(num):\r\n        return sum(int(digit) for digit in str(abs(num)))\r\n\r\n    nums_with_points = [(num, sum_of_digits(num)) for num in nums]\r\n    nums_with_points.sort(key=lambda x: (x[1], nums.index(x[0])))\r\n    return [num for num, _ in nums_with_points]\r\n```\r\n\r\nThe `order_by_points` function takes a list of integers as input and returns a sorted list of integers based on the sum of their digits. The function first defines a nested function `sum_of_digits` which takes an integer as input and returns the sum of its digits. It then uses a list comprehension to create a list of tuples, where each tuple contains an integer from the input list and its corresponding sum of digits.\r\n\r\nThe `nums_with_points` list is then sorted based on the sum of digits and the index of the integer in the original list. The `key` parameter of the `sort` method is set to a lambda function that returns a tuple containing the sum of digits and the index of the integer in the original list.\r\n\r\nFinally, the function returns a list of integers by extracting the first element of each tuple in the sorted `nums_with_points` list."}

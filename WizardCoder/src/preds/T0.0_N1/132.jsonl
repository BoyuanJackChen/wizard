{"task_id": "HumanEval/70", "completion": "Here's the Python script for the given problem:\r\n\r\n```python\r\ndef strange_sort_list(lst):\r\n    '''\r\n    Given list of integers, return list in strange order.\r\n    Strange sorting, is when you start with the minimum value,\r\n    then maximum of the remaining integers, then minimum and so on.\r\n\r\n    Examples:\r\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\r\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\r\n    strange_sort_list([]) == []\r\n    '''\r\n    if not lst:\r\n        return []\r\n    min_val = min(lst)\r\n    max_val = max(lst)\r\n    new_lst = []\r\n    for i in range(len(lst)):\r\n        if lst[i] == min_val:\r\n            new_lst.append(lst[i])\r\n            lst.remove(lst[i])\r\n            min_val = min(lst)\r\n        elif lst[i] == max_val:\r\n            new_lst.append(lst[i])\r\n            lst.remove(lst[i])\r\n            max_val = max(lst)\r\n    return new_lst + strange_sort_list(lst)\r\n```\r\n\r\nExplanation:\r\n\r\nThe function `strange_sort_list` takes a list of integers as input and returns a new list in strange order. The function first checks if the input list is empty or not. If it is empty, it returns an empty list.\r\n\r\nIf the input list is not empty, the function finds the minimum and maximum values in the list. It then creates a new empty list `new_lst` to store the sorted values.\r\n\r\nThe function then loops through the input list and checks if the current value is equal to the minimum or maximum value. If it is, it appends the value to `new_lst` and removes it from the input list. It then updates the minimum and maximum values accordingly.\r\n\r\nAfter the loop, the function recursively calls itself with the updated input list and appends the sorted values to the beginning of `new_lst`. Finally, it returns the sorted list.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n\n### Response:Here's the Python script for the given problem:\r\n\r\n```python\r\ndef strange_sort_list(lst):\r\n    '''\r\n    Given list of integers, return list in strange order.\r\n    Strange sorting, is when you start with the minimum value,\r\n    then maximum of the remaining integers, then minimum and so on.\r\n\r\n    Examples:\r\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\r\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\r\n    strange_sort_list([]) == []\r\n    '''\r\n    if not lst:\r\n        return []\r\n    min_val = min(lst)\r\n    max_val = max(lst)\r\n    new_lst = []\r\n    for i in range(len(lst)):\r\n        if lst[i] == min_val:\r\n            new_lst.append(lst[i])\r\n            lst.remove(lst[i])\r\n            min_val = min(lst)\r\n        elif lst[i] == max_val:\r\n            new_lst.append(lst[i])\r\n            lst.remove(lst[i])\r\n            max_val = max(lst)\r\n    return new_lst + strange_sort_list(lst)\r\n```\r\n\r\nExplanation:\r\n\r\nThe function `strange_sort_list` takes a list of integers as input and returns a new list in strange order. The function first checks if the input list is empty or not. If it is empty, it returns an empty list.\r\n\r\nIf the input list is not empty, the function finds the minimum and maximum values in the list. It then creates a new empty list `new_lst` to store the sorted values.\r\n\r\nThe function then loops through the input list and checks if the current value is equal to the minimum or maximum value. If it is, it appends the value to `new_lst` and removes it from the input list. It then updates the minimum and maximum values accordingly.\r\n\r\nAfter the loop, the function recursively calls itself with the updated input list and appends the sorted values to the beginning of `new_lst`. Finally, it returns the sorted list."}

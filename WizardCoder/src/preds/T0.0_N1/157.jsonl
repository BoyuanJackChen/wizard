{"task_id": "HumanEval/93", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef encode(message):\r\n    \"\"\"\r\n    Write a function that takes a message, and encodes in such a \r\n    way that it swaps case of all letters, replaces all vowels in \r\n    the message with the letter that appears 2 places ahead of that \r\n    vowel in the english alphabet. \r\n    Assume only letters. \r\n    \r\n    Examples:\r\n    >>> encode('test')\r\n    'TGST'\r\n    >>> encode('This is a message')\r\n    'tHKS KS C MGSSCGG'\r\n    \"\"\"\r\n    vowels = ['a', 'e', 'i', 'o', 'u']\r\n    encoded_message = ''\r\n    for letter in message:\r\n        if letter.lower() in vowels:\r\n            if letter.islower():\r\n                encoded_message += vowels[(vowels.index(letter.lower()) + 2) % 5].upper()\r\n            else:\r\n                encoded_message += vowels[(vowels.index(letter.lower()) + 2) % 5]\r\n        else:\r\n            encoded_message += letter.swapcase()\r\n    return encoded_message\r\n```\r\n\r\nThe function takes a message as input and encodes it according to the given rules. It first initializes a list of vowels and an empty string to store the encoded message. It then iterates through each letter in the message and checks if it is a vowel. If it is, it replaces it with the letter that appears 2 places ahead of that vowel in the english alphabet. If the letter is already uppercase, it converts it to lowercase before adding it to the encoded message. If the letter is already lowercase, it adds it to the encoded message as is. If the letter is not a vowel, it swaps its case and adds it to the encoded message. Finally, the function returns the encoded message.", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef encode(message):\r\n    \"\"\"\r\n    Write a function that takes a message, and encodes in such a \r\n    way that it swaps case of all letters, replaces all vowels in \r\n    the message with the letter that appears 2 places ahead of that \r\n    vowel in the english alphabet. \r\n    Assume only letters. \r\n    \r\n    Examples:\r\n    >>> encode('test')\r\n    'TGST'\r\n    >>> encode('This is a message')\r\n    'tHKS KS C MGSSCGG'\r\n    \"\"\"\r\n    vowels = ['a', 'e', 'i', 'o', 'u']\r\n    encoded_message = ''\r\n    for letter in message:\r\n        if letter.lower() in vowels:\r\n            if letter.islower():\r\n                encoded_message += vowels[(vowels.index(letter.lower()) + 2) % 5].upper()\r\n            else:\r\n                encoded_message += vowels[(vowels.index(letter.lower()) + 2) % 5]\r\n        else:\r\n            encoded_message += letter.swapcase()\r\n    return encoded_message\r\n```\r\n\r\nThe function takes a message as input and encodes it according to the given rules. It first initializes a list of vowels and an empty string to store the encoded message. It then iterates through each letter in the message and checks if it is a vowel. If it is, it replaces it with the letter that appears 2 places ahead of that vowel in the english alphabet. If the letter is already uppercase, it converts it to lowercase before adding it to the encoded message. If the letter is already lowercase, it adds it to the encoded message as is. If the letter is not a vowel, it swaps its case and adds it to the encoded message. Finally, the function returns the encoded message."}

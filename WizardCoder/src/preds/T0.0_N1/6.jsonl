{"task_id": "HumanEval/103", "completion": "Here's the Python script for the problem:\r\n\r\n```python\r\ndef rounded_avg(n, m):\r\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\r\n    average of the integers from n through m (including n and m). \r\n    Round the answer to the nearest integer and convert that to binary.\r\n    If n is greater than m, return -1.\r\n    Example:\r\n    rounded_avg(1, 5) => \"0b11\"\r\n    rounded_avg(7, 5) => -1\r\n    rounded_avg(10, 20) => \"0b1111\"\r\n    rounded_avg(20, 33) => \"0b11010\"\r\n    \"\"\"\r\n    if n > m:\r\n        return -1\r\n    else:\r\n        avg = (n + m) / 2\r\n        rounded_avg = round(avg)\r\n        binary_avg = bin(rounded_avg)[2:]\r\n        return \"0b\" + binary_avg\r\n```\r\n\r\nHere's how the script works:\r\n\r\n- The function `rounded_avg` takes two arguments `n` and `m`.\r\n- The first thing the function does is check if `n` is greater than `m`. If it is, the function returns -1.\r\n- If `n` is not greater than `m`, the function calculates the average of `n` and `m` and rounds it to the nearest integer using the `round` function.\r\n- The function then converts the rounded average to binary using the `bin` function and removes the \"0b\" prefix from the binary string using string slicing.\r\n- Finally, the function returns the binary string with the \"0b\" prefix.\r\n\r\nHere are some examples of how to use the function:\r\n\r\n```python\r\n>>> rounded_avg(1, 5)\r\n'0b11'\r\n>>> rounded_avg(7, 5)\r\n-1\r\n>>> rounded_avg(10, 20)\r\n'0b1111'\r\n>>> rounded_avg(20, 33)\r\n'0b11010'\r\n```", "all_code": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n\n### Instruction:\nCreate a Python script for this problem:\n\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n\n\n### Response:Here's the Python script for the problem:\r\n\r\n```python\r\ndef rounded_avg(n, m):\r\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\r\n    average of the integers from n through m (including n and m). \r\n    Round the answer to the nearest integer and convert that to binary.\r\n    If n is greater than m, return -1.\r\n    Example:\r\n    rounded_avg(1, 5) => \"0b11\"\r\n    rounded_avg(7, 5) => -1\r\n    rounded_avg(10, 20) => \"0b1111\"\r\n    rounded_avg(20, 33) => \"0b11010\"\r\n    \"\"\"\r\n    if n > m:\r\n        return -1\r\n    else:\r\n        avg = (n + m) / 2\r\n        rounded_avg = round(avg)\r\n        binary_avg = bin(rounded_avg)[2:]\r\n        return \"0b\" + binary_avg\r\n```\r\n\r\nHere's how the script works:\r\n\r\n- The function `rounded_avg` takes two arguments `n` and `m`.\r\n- The first thing the function does is check if `n` is greater than `m`. If it is, the function returns -1.\r\n- If `n` is not greater than `m`, the function calculates the average of `n` and `m` and rounds it to the nearest integer using the `round` function.\r\n- The function then converts the rounded average to binary using the `bin` function and removes the \"0b\" prefix from the binary string using string slicing.\r\n- Finally, the function returns the binary string with the \"0b\" prefix.\r\n\r\nHere are some examples of how to use the function:\r\n\r\n```python\r\n>>> rounded_avg(1, 5)\r\n'0b11'\r\n>>> rounded_avg(7, 5)\r\n-1\r\n>>> rounded_avg(10, 20)\r\n'0b1111'\r\n>>> rounded_avg(20, 33)\r\n'0b11010'\r\n```"}
